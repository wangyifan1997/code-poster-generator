<svg version="1.1"
                        viewBox="0 0 51200 29700"
                        width="51200" height="29700"
                        xml:space="preserve"
                        style="font-family: 'Source Code Pro'; font-size: 5px; font-weight: 500; white-space: normal;"
                        xmlns="http://www.w3.org/2000/svg"><text x="0" y="0"  fill="rgb(246 246 246)">import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken</text><text x="0" y="5"  fill="rgb(246 246 246)">: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = [</text><text x="0" y="10"  fill="rgb(246 246 246)">]; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): </text><text x="0" y="15"  fill="rgb(246 246 246)">void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private va</text><text x="0" y="20"  fill="rgb(246 246 246)">lidateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Obj</text><text x="0" y="25"  fill="rgb(246 246 246)">ect.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.msto</text><text x="0" y="30"  fill="rgb(246 246 246)">ken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptio</text><text x="0" y="35"  fill="rgb(246 246 246)">ns(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysIn</text><text x="0" y="40"  fill="rgb(246 246 246)">Query.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.k</text><text x="0" y="45"  fill="rgb(246 246 246)">eysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(v</text><text x="0" y="50"  fill="rgb(246 246 246)">alue); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(</text><text x="0" y="55"  fill="rgb(246 246 246)">&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(</text><text x="0" y="60"  fill="rgb(246 246 246)">); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { thi</text><text x="0" y="65"  fill="rgb(246 246 246)">s.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery</text><text x="0" y="70"  fill="rgb(246 246 246)">.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname</text><text x="0" y="75"  fill="rgb(246 246 246)">&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private </text><text x="0" y="80"  fill="rgb(246 246 246)">sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORM</text><text x="0" y="85"  fill="rgb(246 246 246)">ATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transforma</text><text x="0" y="90"  fill="rgb(246 246 246)">tionKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have</text><text x="0" y="95"  fill="rgb(246 246 246)"> at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: </text><text x="0" y="100"  fill="rgb(246 246 246)">string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || thi</text><text x="0" y="105"  fill="rgb(246 246 246)">s.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes</text><text x="0" y="110"  fill="rgb(246 246 246)">(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) ||</text><text x="0" y="115"  fill="rgb(246 246 246)"> keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { c</text><text x="0" y="120"  fill="rgb(246 246 246)">ase &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length </text><text x="0" y="125"  fill="rgb(246 246 246)">!== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (t</text><text x="0" y="130"  fill="rgb(246 246 246)">ypeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) |</text><text x="0" y="135"  fill="rgb(246 246 246)">| value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfiel</text><text x="0" y="140"  fill="rgb(246 246 246)">ds = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;l</text><text x="0" y="145"  fill="rgb(246 246 246)">at&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transform</text><text x="0" y="150"  fill="rgb(246 246 246)">ation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.val</text><text x="0" y="155"  fill="rgb(246 246 246)">idateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should </text><text x="0" y="160"  fill="rgb(246 246 246)">has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!</text><text x="0" y="165"  fill="rgb(246 246 246)">Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteri</text><text x="0" y="170"  fill="rgb(246 246 246)">a) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(apply</text><text x="0" y="175"  fill="rgb(246 246 246)">token)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey</text><text x="0" y="180"  fill="rgb(246 246 246)"> of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DO</text><text x="0" y="185"  fill="rgb(246 246 246)">WN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let k</text><text x="0" y="190"  fill="rgb(246 246 246)">ey: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (t</text><text x="0" y="195"  fill="rgb(246 246 246)">ypeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)</text><text x="0" y="200"  fill="rgb(246 246 246)">) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new Insig</text><text x="0" y="205"  fill="rgb(246 246 246)">htError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; t</text><text x="0" y="210"  fill="rgb(246 246 246)">his.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dep</text><text x="0" y="215"  fill="rgb(246 246 246)">t&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private tr</text><text x="0" y="220"  fill="rgb(246 246 246)">ansformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; </text><text x="0" y="225"  fill="rgb(246 246 246)">key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray</text><text x="0" y="230"  fill="rgb(246 246 246)">(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splitted</text><text x="0" y="235"  fill="rgb(246 246 246)">Key[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw </text><text x="0" y="240"  fill="rgb(246 246 246)">new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.i</text><text x="0" y="245"  fill="rgb(246 246 246)">ncludes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumn</text><text x="0" y="250"  fill="rgb(246 246 246)">s(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.k</text><text x="0" y="255"  fill="rgb(246 246 246)">eys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: an</text><text x="0" y="260"  fill="rgb(246 246 246)">y): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new Insigh</text><text x="0" y="265"  fill="rgb(246 246 246)">tError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1</text><text x="0" y="270"  fill="rgb(246 246 246)">).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) ||</text><text x="0" y="275"  fill="rgb(246 246 246)"> !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insi</text><text x="0" y="280"  fill="rgb(246 246 246)">ghtDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;av</text><text x="0" y="285"  fill="rgb(246 246 246)">g&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private k</text><text x="0" y="290"  fill="rgb(246 246 246)">eysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { t</text><text x="0" y="295"  fill="rgb(246 246 246)">hrow new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); t</text><text x="0" y="300"  fill="rgb(246 246 246)">his.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(split</text><text x="0" y="305"  fill="rgb(246 246 246)">tedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length </text><text x="0" y="310"  fill="rgb(246 246 246)">=== 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (thi</text><text x="0" y="315"  fill="rgb(246 246 246)">s.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColu</text><text x="0" y="320"  fill="rgb(246 246 246)">mns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery</text><text x="0" y="325"  fill="rgb(246 246 246)">.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Obj</text><text x="0" y="330"  fill="rgb(246 246 246)">ect.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } pri</text><text x="0" y="335"  fill="rgb(246 246 246)">vate validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; </text><text x="0" y="340"  fill="rgb(246 246 246)">if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: stri</text><text x="0" y="345"  fill="rgb(246 246 246)">ng = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDa</text><text x="0" y="350"  fill="rgb(246 246 246)">taset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;;</text><text x="0" y="355"  fill="rgb(246 246 246)"> export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;</text><text x="0" y="360"  fill="rgb(246 246 246)">COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = in</text><text x="0" y="365"  fill="rgb(246 246 246)">sightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Obj</text><text x="0" y="370"  fill="rgb(246 246 246)">ect.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (spl</text><text x="0" y="375"  fill="rgb(246 246 246)">ittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string</text><text x="0" y="380"  fill="rgb(246 246 246)"> = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criter</text><text x="0" y="385"  fill="rgb(246 246 246)">ia[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (k</text><text x="0" y="390"  fill="rgb(246 246 246)">ey !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q))</text><text x="0" y="395"  fill="rgb(246 246 246)"> { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWh</text><text x="0" y="400"  fill="rgb(246 246 246)">ere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; </text><text x="0" y="405"  fill="rgb(246 246 246)">case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: st</text><text x="0" y="410"  fill="rgb(246 246 246)">ring = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2)</text><text x="0" y="415"  fill="rgb(246 246 246)"> { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boo</text><text x="0" y="420"  fill="rgb(246 246 246)">lean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; </text><text x="0" y="425"  fill="rgb(246 246 246)">} } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mt</text><text x="0" y="430"  fill="rgb(246 246 246)">oken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery</text><text x="0" y="435"  fill="rgb(246 246 246)"> = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: an</text><text x="0" y="440"  fill="rgb(246 246 246)">y): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } privat</text><text x="0" y="445"  fill="rgb(246 246 246)">e validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) ||</text><text x="0" y="450"  fill="rgb(246 246 246)"> Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.</text><text x="0" y="455"  fill="rgb(246 246 246)">mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateO</text><text x="0" y="460"  fill="rgb(246 246 246)">ptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private va</text><text x="738" y="460"  fill="rgb(246 246 245)">lid</text><text x="747" y="460"  fill="rgb(246 245 245)">ateColumns(q: a</text><text x="792" y="460"  fill="rgb(246 246 245)">ny)</text><text x="801" y="460"  fill="rgb(246 246 246)">: void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.ke</text><text x="0" y="465"  fill="rgb(246 246 246)">ysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.di</text><text x="702" y="465"  fill="rgb(246 246 245)">r |</text><text x="711" y="465"  fill="rgb(246 245 245)">| !</text><text x="720" y="465"  fill="rgb(245 245 245)">q.key</text><text x="735" y="465"  fill="rgb(245 245 246)">s</text><text x="738" y="465"  fill="rgb(245 245 249)"> </text><text x="741" y="465"  fill="rgb(245 246 251)">|</text><text x="744" y="465"  fill="rgb(245 246 252)">|</text><text x="747" y="465"  fill="rgb(245 247 253)"> Ob</text><text x="756" y="465"  fill="rgb(245 248 254)">ject.key</text><text x="780" y="465"  fill="rgb(245 247 254)">s</text><text x="783" y="465"  fill="rgb(245 247 253)">(q</text><text x="789" y="465"  fill="rgb(245 247 252)">)</text><text x="792" y="465"  fill="rgb(245 246 251)">.</text><text x="795" y="465"  fill="rgb(245 245 249)">l</text><text x="798" y="465"  fill="rgb(245 245 247)">e</text><text x="801" y="465"  fill="rgb(245 245 245)">ngth</text><text x="813" y="465"  fill="rgb(246 245 245)"> !==</text><text x="825" y="465"  fill="rgb(246 246 245)"> 2</text><text x="831" y="465"  fill="rgb(246 246 246)">) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!th</text><text x="0" y="470"  fill="rgb(246 246 246)">is.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } pr</text><text x="696" y="470"  fill="rgb(246 246 245)">i</text><text x="699" y="470"  fill="rgb(246 245 245)">v</text><text x="702" y="470"  fill="rgb(245 245 246)">a</text><text x="705" y="470"  fill="rgb(245 246 247)">te</text><text x="711" y="470"  fill="rgb(245 246 250)"> </text><text x="714" y="470"  fill="rgb(245 247 255)">v</text><text x="717" y="470"  fill="rgb(245 248 255)">a</text><text x="720" y="470"  fill="rgb(245 249 255)">l</text><text x="723" y="470"  fill="rgb(245 250 255)">i</text><text x="726" y="470"  fill="rgb(244 253 255)">d</text><text x="729" y="470"  fill="rgb(244 254 255)">at</text><text x="735" y="470"  fill="rgb(245 255 255)">e</text><text x="738" y="470"  fill="rgb(246 255 255)">F</text><text x="741" y="470"  fill="rgb(246 253 255)">i</text><text x="744" y="470"  fill="rgb(247 252 255)">l</text><text x="747" y="470"  fill="rgb(246 250 255)">t</text><text x="750" y="470"  fill="rgb(247 248 255)">e</text><text x="753" y="470"  fill="rgb(246 248 255)">r</text><text x="756" y="470"  fill="rgb(245 246 255)">(q</text><text x="762" y="470"  fill="rgb(246 246 255)">:</text><text x="765" y="470"  fill="rgb(245 245 255)"> a</text><text x="771" y="470"  fill="rgb(246 245 255)">n</text><text x="774" y="470"  fill="rgb(246 246 255)">y</text><text x="777" y="470"  fill="rgb(246 247 255)">):</text><text x="783" y="470"  fill="rgb(246 249 255)"> v</text><text x="789" y="470"  fill="rgb(246 252 255)">o</text><text x="792" y="470"  fill="rgb(247 254 255)">i</text><text x="795" y="470"  fill="rgb(246 255 255)">d </text><text x="801" y="470"  fill="rgb(244 255 255)">{</text><text x="804" y="470"  fill="rgb(244 254 255)"> </text><text x="807" y="470"  fill="rgb(245 253 255)">i</text><text x="810" y="470"  fill="rgb(245 250 255)">f </text><text x="816" y="470"  fill="rgb(245 249 255)">(</text><text x="819" y="470"  fill="rgb(245 248 255)">O</text><text x="822" y="470"  fill="rgb(245 246 252)">b</text><text x="825" y="470"  fill="rgb(246 246 247)">j</text><text x="828" y="470"  fill="rgb(245 246 247)">e</text><text x="831" y="470"  fill="rgb(246 246 246)">ct.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateN</text><text x="0" y="475"  fill="rgb(246 246 246)">OT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value</text><text x="675" y="475"  fill="rgb(246 246 245)"> !</text><text x="681" y="475"  fill="rgb(246 245 245)">==</text><text x="687" y="475"  fill="rgb(245 245 247)"> </text><text x="690" y="475"  fill="rgb(245 246 249)">&quot;</text><text x="693" y="475"  fill="rgb(245 247 252)">o</text><text x="696" y="475"  fill="rgb(245 248 255)">b</text><text x="699" y="475"  fill="rgb(244 250 255)">j</text><text x="702" y="475"  fill="rgb(245 252 255)">ect</text><text x="711" y="475"  fill="rgb(246 253 255)">&quot;</text><text x="714" y="475"  fill="rgb(246 247 224)">)</text><text x="717" y="475"  fill="rgb(248 241 198)"> </text><text x="720" y="475"  fill="rgb(249 234 174)">{</text><text x="723" y="475"  fill="rgb(249 228 128)"> </text><text x="726" y="475"  fill="rgb(253 218 88)">t</text><text x="729" y="475"  fill="rgb(252 210 81)">h</text><text x="732" y="475"  fill="rgb(251 209 73)">r</text><text x="735" y="475"  fill="rgb(251 203 60)">o</text><text x="738" y="475"  fill="rgb(251 201 32)">w</text><text x="741" y="475"  fill="rgb(250 197 3)"> </text><text x="744" y="475"  fill="rgb(253 195 0)">n</text><text x="747" y="475"  fill="rgb(253 192 0)">e</text><text x="750" y="475"  fill="rgb(253 190 0)">w</text><text x="753" y="475"  fill="rgb(255 188 0)"> </text><text x="756" y="475"  fill="rgb(255 189 0)">I</text><text x="759" y="475"  fill="rgb(255 188 0)">n</text><text x="762" y="475"  fill="rgb(255 189 0)">si</text><text x="768" y="475"  fill="rgb(254 189 0)">g</text><text x="771" y="475"  fill="rgb(254 190 0)">h</text><text x="774" y="475"  fill="rgb(255 189 0)">t</text><text x="777" y="475"  fill="rgb(254 187 0)">E</text><text x="780" y="475"  fill="rgb(254 189 0)">r</text><text x="783" y="475"  fill="rgb(255 192 0)">r</text><text x="786" y="475"  fill="rgb(254 192 0)">o</text><text x="789" y="475"  fill="rgb(254 193 0)">r</text><text x="792" y="475"  fill="rgb(253 195 9)">(</text><text x="795" y="475"  fill="rgb(251 198 27)">)</text><text x="798" y="475"  fill="rgb(251 200 52)">;</text><text x="801" y="475"  fill="rgb(252 205 66)"> </text><text x="804" y="475"  fill="rgb(252 211 71)">}</text><text x="807" y="475"  fill="rgb(251 218 85)"> </text><text x="810" y="475"  fill="rgb(246 227 109)">t</text><text x="813" y="475"  fill="rgb(246 228 138)">h</text><text x="816" y="475"  fill="rgb(249 231 167)">i</text><text x="819" y="475"  fill="rgb(247 239 187)">s</text><text x="822" y="475"  fill="rgb(246 246 232)">.</text><text x="825" y="475"  fill="rgb(244 245 255)">v</text><text x="828" y="475"  fill="rgb(245 245 248)">a</text><text x="831" y="475"  fill="rgb(245 245 245)">l</text><text x="834" y="475"  fill="rgb(246 246 248)">i</text><text x="837" y="475"  fill="rgb(247 246 248)">d</text><text x="840" y="475"  fill="rgb(247 246 249)">a</text><text x="843" y="475"  fill="rgb(247 246 248)">t</text><text x="846" y="475"  fill="rgb(246 246 247)">e</text><text x="849" y="475"  fill="rgb(245 245 246)">F</text><text x="852" y="475"  fill="rgb(245 245 245)">ilt</text><text x="861" y="475"  fill="rgb(246 246 245)">e</text><text x="864" y="475"  fill="rgb(246 246 246)">r(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].sp</text><text x="0" y="480"  fill="rgb(246 246 246)">lit(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightE</text><text x="663" y="480"  fill="rgb(246 246 245)">r</text><text x="666" y="480"  fill="rgb(246 245 245)">r</text><text x="669" y="480"  fill="rgb(245 245 245)">or</text><text x="675" y="480"  fill="rgb(245 245 247)">(</text><text x="678" y="480"  fill="rgb(245 246 250)">)</text><text x="681" y="480"  fill="rgb(245 247 255)">;</text><text x="684" y="480"  fill="rgb(245 251 255)"> </text><text x="687" y="480"  fill="rgb(246 253 255)">}</text><text x="690" y="480"  fill="rgb(246 251 255)"> </text><text x="693" y="480"  fill="rgb(245 248 255)">e</text><text x="696" y="480"  fill="rgb(248 241 203)">l</text><text x="699" y="480"  fill="rgb(250 232 184)">s</text><text x="702" y="480"  fill="rgb(248 225 136)">e</text><text x="705" y="480"  fill="rgb(250 213 59)"> </text><text x="708" y="480"  fill="rgb(252 202 5)">{</text><text x="711" y="480"  fill="rgb(249 197 0)"> </text><text x="714" y="480"  fill="rgb(249 196 0)">i</text><text x="717" y="480"  fill="rgb(253 193 0)">f</text><text x="720" y="480"  fill="rgb(254 192 0)"> </text><text x="723" y="480"  fill="rgb(252 192 0)">(</text><text x="726" y="480"  fill="rgb(254 193 0)">(</text><text x="729" y="480"  fill="rgb(254 195 0)">s</text><text x="732" y="480"  fill="rgb(252 196 0)">t</text><text x="735" y="480"  fill="rgb(254 195 0)">r</text><text x="738" y="480"  fill="rgb(254 197 0)">.</text><text x="741" y="480"  fill="rgb(255 198 0)">s</text><text x="744" y="480"  fill="rgb(253 199 0)">li</text><text x="750" y="480"  fill="rgb(254 200 1)">c</text><text x="753" y="480"  fill="rgb(254 200 0)">e</text><text x="756" y="480"  fill="rgb(254 201 1)">(</text><text x="759" y="480"  fill="rgb(253 201 0)">1</text><text x="762" y="480"  fill="rgb(253 199 0)">,</text><text x="765" y="480"  fill="rgb(253 198 1)"> </text><text x="768" y="480"  fill="rgb(253 199 0)">-</text><text x="771" y="480"  fill="rgb(253 198 0)">1</text><text x="774" y="480"  fill="rgb(254 199 0)">)</text><text x="777" y="480"  fill="rgb(253 200 0)">.</text><text x="780" y="480"  fill="rgb(252 201 0)">i</text><text x="783" y="480"  fill="rgb(254 196 0)">n</text><text x="786" y="480"  fill="rgb(255 193 0)">cl</text><text x="792" y="480"  fill="rgb(253 191 0)">u</text><text x="795" y="480"  fill="rgb(254 190 0)">d</text><text x="798" y="480"  fill="rgb(255 190 0)">e</text><text x="801" y="480"  fill="rgb(255 187 0)">s</text><text x="804" y="480"  fill="rgb(254 189 0)">(</text><text x="807" y="480"  fill="rgb(251 192 0)">&quot;</text><text x="810" y="480"  fill="rgb(247 193 0)">*</text><text x="813" y="480"  fill="rgb(251 198 8)">&quot;</text><text x="816" y="480"  fill="rgb(255 209 64)">)</text><text x="819" y="480"  fill="rgb(255 215 85)">)</text><text x="822" y="480"  fill="rgb(255 223 97)"> </text><text x="825" y="480"  fill="rgb(255 234 146)">|</text><text x="828" y="480"  fill="rgb(255 245 217)">|</text><text x="831" y="480"  fill="rgb(255 255 255)"> </text><text x="834" y="480"  fill="rgb(255 254 255)">!</text><text x="837" y="480"  fill="rgb(255 253 255)">t</text><text x="840" y="480"  fill="rgb(255 252 255)">h</text><text x="843" y="480"  fill="rgb(255 253 255)">is</text><text x="849" y="480"  fill="rgb(255 254 255)">.</text><text x="852" y="480"  fill="rgb(255 252 255)">v</text><text x="855" y="480"  fill="rgb(252 248 255)">a</text><text x="858" y="480"  fill="rgb(248 247 250)">l</text><text x="861" y="480"  fill="rgb(246 246 247)">i</text><text x="864" y="480"  fill="rgb(245 245 245)">d</text><text x="867" y="480"  fill="rgb(246 245 245)">a</text><text x="870" y="480"  fill="rgb(245 245 245)">t</text><text x="873" y="480"  fill="rgb(245 246 245)">e</text><text x="876" y="480"  fill="rgb(246 246 246)">Idstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightEr</text><text x="0" y="485"  fill="rgb(246 246 246)">ror(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(val</text><text x="654" y="485"  fill="rgb(246 246 245)">u</text><text x="657" y="485"  fill="rgb(246 245 245)">e)</text><text x="663" y="485"  fill="rgb(245 246 247)">[</text><text x="666" y="485"  fill="rgb(245 247 254)">0</text><text x="669" y="485"  fill="rgb(245 249 255)">]</text><text x="672" y="485"  fill="rgb(245 252 255)">;</text><text x="675" y="485"  fill="rgb(246 254 255)"> </text><text x="678" y="485"  fill="rgb(245 251 255)">i</text><text x="681" y="485"  fill="rgb(246 248 232)">f</text><text x="684" y="485"  fill="rgb(249 231 102)"> </text><text x="687" y="485"  fill="rgb(248 213 70)">(</text><text x="690" y="485"  fill="rgb(251 203 34)">(</text><text x="693" y="485"  fill="rgb(252 196 17)">t</text><text x="696" y="485"  fill="rgb(251 194 0)">y</text><text x="699" y="485"  fill="rgb(253 191 0)">p</text><text x="702" y="485"  fill="rgb(254 192 0)">e</text><text x="705" y="485"  fill="rgb(253 193 0)">o</text><text x="708" y="485"  fill="rgb(252 196 0)">f</text><text x="711" y="485"  fill="rgb(252 199 0)"> n</text><text x="717" y="485"  fill="rgb(254 199 0)">u</text><text x="720" y="485"  fill="rgb(254 197 0)">m</text><text x="723" y="485"  fill="rgb(253 199 0)"> </text><text x="726" y="485"  fill="rgb(252 199 2)">!</text><text x="729" y="485"  fill="rgb(252 199 0)">=</text><text x="732" y="485"  fill="rgb(253 198 0)">=</text><text x="735" y="485"  fill="rgb(254 197 2)"> </text><text x="738" y="485"  fill="rgb(253 201 0)">&quot;</text><text x="741" y="485"  fill="rgb(252 201 1)">n</text><text x="744" y="485"  fill="rgb(253 199 0)">u</text><text x="747" y="485"  fill="rgb(254 199 1)">m</text><text x="750" y="485"  fill="rgb(254 199 2)">b</text><text x="753" y="485"  fill="rgb(253 199 2)">e</text><text x="756" y="485"  fill="rgb(254 197 0)">r</text><text x="759" y="485"  fill="rgb(254 199 1)">&quot;</text><text x="762" y="485"  fill="rgb(253 201 0)">)</text><text x="765" y="485"  fill="rgb(253 199 0)"> </text><text x="768" y="485"  fill="rgb(254 195 0)">|</text><text x="771" y="485"  fill="rgb(255 194 0)">|</text><text x="774" y="485"  fill="rgb(252 192 0)"> </text><text x="777" y="485"  fill="rgb(253 190 0)">!</text><text x="780" y="485"  fill="rgb(254 190 0)">t</text><text x="783" y="485"  fill="rgb(253 196 12)">h</text><text x="786" y="485"  fill="rgb(248 203 46)">i</text><text x="789" y="485"  fill="rgb(246 209 77)">s</text><text x="792" y="485"  fill="rgb(254 221 105)">.</text><text x="795" y="485"  fill="rgb(250 232 142)">v</text><text x="798" y="485"  fill="rgb(245 236 171)">a</text><text x="801" y="485"  fill="rgb(247 244 222)">l</text><text x="804" y="485"  fill="rgb(248 247 241)">i</text><text x="807" y="485"  fill="rgb(252 254 255)">d</text><text x="810" y="485"  fill="rgb(255 255 255)">ate</text><text x="819" y="485"  fill="rgb(255 254 255)">I</text><text x="822" y="485"  fill="rgb(233 248 246)">d</text><text x="825" y="485"  fill="rgb(196 227 156)">s</text><text x="828" y="485"  fill="rgb(177 216 91)">t</text><text x="831" y="485"  fill="rgb(164 209 72)">r</text><text x="834" y="485"  fill="rgb(151 206 46)">i</text><text x="837" y="485"  fill="rgb(145 205 38)">n</text><text x="840" y="485"  fill="rgb(143 203 36)">g</text><text x="843" y="485"  fill="rgb(146 203 41)">(</text><text x="846" y="485"  fill="rgb(153 207 53)">i</text><text x="849" y="485"  fill="rgb(161 209 75)">d</text><text x="852" y="485"  fill="rgb(186 220 112)">s</text><text x="855" y="485"  fill="rgb(242 242 248)">t</text><text x="858" y="485"  fill="rgb(255 251 255)">r</text><text x="861" y="485"  fill="rgb(255 255 255)">in</text><text x="867" y="485"  fill="rgb(254 249 255)">g</text><text x="870" y="485"  fill="rgb(250 247 253)">)</text><text x="873" y="485"  fill="rgb(246 246 246)"> </text><text x="876" y="485"  fill="rgb(245 245 245)">||</text><text x="882" y="485"  fill="rgb(246 246 246)"> !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) {</text><text x="0" y="490"  fill="rgb(246 246 246)"> this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring</text><text x="645" y="490"  fill="rgb(246 246 245)">)</text><text x="648" y="490"  fill="rgb(246 245 245)"> </text><text x="651" y="490"  fill="rgb(245 246 247)">{</text><text x="654" y="490"  fill="rgb(245 247 252)"> </text><text x="657" y="490"  fill="rgb(245 249 255)">t</text><text x="660" y="490"  fill="rgb(245 251 255)">h</text><text x="663" y="490"  fill="rgb(245 254 255)">i</text><text x="666" y="490"  fill="rgb(246 248 248)">s</text><text x="669" y="490"  fill="rgb(247 237 199)">.</text><text x="672" y="490"  fill="rgb(246 221 103)">i</text><text x="675" y="490"  fill="rgb(246 211 56)">d</text><text x="678" y="490"  fill="rgb(250 196 0)">I</text><text x="681" y="490"  fill="rgb(252 185 0)">n</text><text x="684" y="490"  fill="rgb(251 189 0)">Q</text><text x="687" y="490"  fill="rgb(253 198 0)">u</text><text x="690" y="490"  fill="rgb(254 199 0)">e</text><text x="693" y="490"  fill="rgb(255 197 0)">ry.</text><text x="702" y="490"  fill="rgb(255 199 0)">p</text><text x="705" y="490"  fill="rgb(254 200 0)">u</text><text x="708" y="490"  fill="rgb(254 199 0)">s</text><text x="711" y="490"  fill="rgb(255 197 0)">h(</text><text x="717" y="490"  fill="rgb(255 198 0)">id</text><text x="723" y="490"  fill="rgb(255 198 1)">s</text><text x="726" y="490"  fill="rgb(253 198 0)">t</text><text x="729" y="490"  fill="rgb(255 199 1)">r</text><text x="732" y="490"  fill="rgb(255 198 1)">i</text><text x="735" y="490"  fill="rgb(254 200 1)">n</text><text x="738" y="490"  fill="rgb(254 196 2)">g</text><text x="741" y="490"  fill="rgb(254 196 1)">)</text><text x="744" y="490"  fill="rgb(253 199 0)">;</text><text x="747" y="490"  fill="rgb(255 199 0)"> </text><text x="750" y="490"  fill="rgb(253 199 0)">i</text><text x="753" y="490"  fill="rgb(252 197 0)">f</text><text x="756" y="490"  fill="rgb(254 194 0)"> </text><text x="759" y="490"  fill="rgb(254 189 0)">(</text><text x="762" y="490"  fill="rgb(252 191 0)">i</text><text x="765" y="490"  fill="rgb(254 193 1)">n</text><text x="768" y="490"  fill="rgb(250 206 49)">s</text><text x="771" y="490"  fill="rgb(247 217 77)">i</text><text x="774" y="490"  fill="rgb(250 230 166)">g</text><text x="777" y="490"  fill="rgb(245 246 227)">h</text><text x="780" y="490"  fill="rgb(244 248 255)">t</text><text x="783" y="490"  fill="rgb(246 254 255)">D</text><text x="786" y="490"  fill="rgb(247 255 255)">a</text><text x="789" y="490"  fill="rgb(245 255 255)">t</text><text x="792" y="490"  fill="rgb(244 252 255)">a</text><text x="795" y="490"  fill="rgb(245 250 255)">s</text><text x="798" y="490"  fill="rgb(247 250 255)">e</text><text x="801" y="490"  fill="rgb(255 254 255)">t</text><text x="804" y="490"  fill="rgb(255 255 255)">.</text><text x="807" y="490"  fill="rgb(243 245 253)">k</text><text x="810" y="490"  fill="rgb(203 225 171)">i</text><text x="813" y="490"  fill="rgb(158 206 76)">n</text><text x="816" y="490"  fill="rgb(121 193 24)">d</text><text x="819" y="490"  fill="rgb(102 185 0)"> </text><text x="822" y="490"  fill="rgb(104 185 0)">=</text><text x="825" y="490"  fill="rgb(111 190 0)">=</text><text x="828" y="490"  fill="rgb(115 191 6)">=</text><text x="831" y="490"  fill="rgb(121 194 14)"> </text><text x="834" y="490"  fill="rgb(125 194 20)">I</text><text x="837" y="490"  fill="rgb(126 194 22)">n</text><text x="840" y="490"  fill="rgb(125 196 21)">s</text><text x="843" y="490"  fill="rgb(125 195 20)">i</text><text x="846" y="490"  fill="rgb(122 193 18)">g</text><text x="849" y="490"  fill="rgb(122 195 10)">h</text><text x="852" y="490"  fill="rgb(113 190 6)">t</text><text x="855" y="490"  fill="rgb(101 184 0)">D</text><text x="858" y="490"  fill="rgb(111 189 0)">a</text><text x="861" y="490"  fill="rgb(146 199 59)">t</text><text x="864" y="490"  fill="rgb(173 211 97)">a</text><text x="867" y="490"  fill="rgb(219 234 192)">s</text><text x="870" y="490"  fill="rgb(248 246 253)">e</text><text x="873" y="490"  fill="rgb(255 254 255)">t</text><text x="876" y="490"  fill="rgb(255 252 255)">K</text><text x="879" y="490"  fill="rgb(253 250 255)">i</text><text x="882" y="490"  fill="rgb(248 247 249)">n</text><text x="885" y="490"  fill="rgb(246 246 247)">d</text><text x="888" y="490"  fill="rgb(245 245 245)">.</text><text x="891" y="490"  fill="rgb(245 246 245)">C</text><text x="894" y="490"  fill="rgb(246 246 246)">ourses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQ</text><text x="0" y="495"  fill="rgb(246 246 246)">uery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { pr</text><text x="639" y="495"  fill="rgb(246 246 245)">i</text><text x="642" y="495"  fill="rgb(245 245 246)">v</text><text x="645" y="495"  fill="rgb(245 246 250)">a</text><text x="648" y="495"  fill="rgb(245 249 255)">t</text><text x="651" y="495"  fill="rgb(246 252 255)">e</text><text x="654" y="495"  fill="rgb(247 248 255)"> </text><text x="657" y="495"  fill="rgb(246 238 212)">r</text><text x="660" y="495"  fill="rgb(249 228 135)">e</text><text x="663" y="495"  fill="rgb(252 205 8)">a</text><text x="666" y="495"  fill="rgb(253 195 0)">d</text><text x="669" y="495"  fill="rgb(254 190 0)">o</text><text x="672" y="495"  fill="rgb(254 192 0)">n</text><text x="675" y="495"  fill="rgb(255 194 0)">l</text><text x="678" y="495"  fill="rgb(254 196 0)">y</text><text x="681" y="495"  fill="rgb(254 202 1)"> </text><text x="684" y="495"  fill="rgb(253 199 1)">c</text><text x="687" y="495"  fill="rgb(253 197 1)">o</text><text x="690" y="495"  fill="rgb(254 198 1)">u</text><text x="693" y="495"  fill="rgb(255 198 0)">r</text><text x="696" y="495"  fill="rgb(254 199 0)">s</text><text x="699" y="495"  fill="rgb(253 199 0)">e</text><text x="702" y="495"  fill="rgb(255 199 0)">m</text><text x="705" y="495"  fill="rgb(255 198 0)">fi</text><text x="711" y="495"  fill="rgb(255 199 0)">el</text><text x="717" y="495"  fill="rgb(255 198 0)">ds</text><text x="723" y="495"  fill="rgb(253 199 1)">:</text><text x="726" y="495"  fill="rgb(254 198 0)"> </text><text x="729" y="495"  fill="rgb(253 199 2)">s</text><text x="732" y="495"  fill="rgb(252 202 1)">t</text><text x="735" y="495"  fill="rgb(252 202 0)">r</text><text x="738" y="495"  fill="rgb(252 201 0)">i</text><text x="741" y="495"  fill="rgb(251 199 0)">n</text><text x="744" y="495"  fill="rgb(251 194 0)">g</text><text x="747" y="495"  fill="rgb(253 193 0)">[</text><text x="750" y="495"  fill="rgb(253 195 0)">]</text><text x="753" y="495"  fill="rgb(251 205 52)"> </text><text x="756" y="495"  fill="rgb(246 218 134)">=</text><text x="759" y="495"  fill="rgb(246 232 174)"> </text><text x="762" y="495"  fill="rgb(250 245 221)">[</text><text x="765" y="495"  fill="rgb(245 249 255)">&quot;</text><text x="768" y="495"  fill="rgb(246 252 255)">a</text><text x="771" y="495"  fill="rgb(245 252 255)">v</text><text x="774" y="495"  fill="rgb(245 250 255)">g</text><text x="777" y="495"  fill="rgb(246 248 255)">&quot;</text><text x="780" y="495"  fill="rgb(246 247 253)">,</text><text x="783" y="495"  fill="rgb(245 246 250)"> </text><text x="786" y="495"  fill="rgb(245 245 247)">&quot;</text><text x="789" y="495"  fill="rgb(245 245 244)">p</text><text x="792" y="495"  fill="rgb(246 246 246)">a</text><text x="795" y="495"  fill="rgb(255 250 255)">s</text><text x="798" y="495"  fill="rgb(255 251 255)">s</text><text x="801" y="495"  fill="rgb(209 226 180)">&quot;</text><text x="804" y="495"  fill="rgb(146 202 13)">,</text><text x="807" y="495"  fill="rgb(119 192 0)"> </text><text x="810" y="495"  fill="rgb(116 191 0)">&quot;</text><text x="813" y="495"  fill="rgb(120 194 2)">f</text><text x="816" y="495"  fill="rgb(129 197 17)">a</text><text x="819" y="495"  fill="rgb(135 198 31)">i</text><text x="822" y="495"  fill="rgb(134 198 36)">l</text><text x="825" y="495"  fill="rgb(132 199 36)">&quot;</text><text x="828" y="495"  fill="rgb(133 199 32)">,</text><text x="831" y="495"  fill="rgb(133 198 31)"> &quot;</text><text x="837" y="495"  fill="rgb(133 198 32)">a</text><text x="840" y="495"  fill="rgb(133 197 32)">u</text><text x="843" y="495"  fill="rgb(133 198 32)">d</text><text x="846" y="495"  fill="rgb(132 197 32)">i</text><text x="849" y="495"  fill="rgb(134 198 23)">t</text><text x="852" y="495"  fill="rgb(132 198 30)">&quot;</text><text x="855" y="495"  fill="rgb(133 198 39)">,</text><text x="858" y="495"  fill="rgb(129 198 24)"> </text><text x="861" y="495"  fill="rgb(125 196 8)">&quot;</text><text x="864" y="495"  fill="rgb(122 190 7)">y</text><text x="867" y="495"  fill="rgb(116 190 0)">e</text><text x="870" y="495"  fill="rgb(117 191 0)">a</text><text x="873" y="495"  fill="rgb(136 197 10)">r</text><text x="876" y="495"  fill="rgb(194 222 153)">&quot;</text><text x="879" y="495"  fill="rgb(230 236 221)">]</text><text x="882" y="495"  fill="rgb(255 250 255)">;</text><text x="885" y="495"  fill="rgb(255 253 255)"> </text><text x="888" y="495"  fill="rgb(255 250 255)">p</text><text x="891" y="495"  fill="rgb(246 246 247)">r</text><text x="894" y="495"  fill="rgb(245 245 245)">i</text><text x="897" y="495"  fill="rgb(245 246 245)">v</text><text x="900" y="495"  fill="rgb(246 246 246)">ate readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;short</text><text x="0" y="500"  fill="rgb(246 246 246)">name&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; </text><text x="630" y="500"  fill="rgb(246 245 245)">/</text><text x="633" y="500"  fill="rgb(245 245 245)">/</text><text x="636" y="500"  fill="rgb(245 247 253)"> </text><text x="639" y="500"  fill="rgb(246 249 255)">m</text><text x="642" y="500"  fill="rgb(246 253 255)">a</text><text x="645" y="500"  fill="rgb(245 253 255)">k</text><text x="648" y="500"  fill="rgb(246 240 202)">e</text><text x="651" y="500"  fill="rgb(248 215 65)"> </text><text x="654" y="500"  fill="rgb(250 200 26)">s</text><text x="657" y="500"  fill="rgb(252 193 0)">u</text><text x="660" y="500"  fill="rgb(251 191 0)">r</text><text x="663" y="500"  fill="rgb(253 194 0)">e</text><text x="666" y="500"  fill="rgb(252 197 0)"> </text><text x="669" y="500"  fill="rgb(254 204 0)">t</text><text x="672" y="500"  fill="rgb(253 200 1)">h</text><text x="675" y="500"  fill="rgb(254 198 1)">e</text><text x="678" y="500"  fill="rgb(254 200 1)"> </text><text x="681" y="500"  fill="rgb(252 202 0)">q</text><text x="684" y="500"  fill="rgb(253 200 0)">u</text><text x="687" y="500"  fill="rgb(253 202 0)">e</text><text x="690" y="500"  fill="rgb(254 199 0)">r</text><text x="693" y="500"  fill="rgb(255 198 0)">y</text><text x="696" y="500"  fill="rgb(253 198 0)"> </text><text x="699" y="500"  fill="rgb(255 197 2)">o</text><text x="702" y="500"  fill="rgb(255 198 0)">n</text><text x="705" y="500"  fill="rgb(255 199 0)">l</text><text x="708" y="500"  fill="rgb(255 198 0)">y </text><text x="714" y="500"  fill="rgb(255 199 0)">ha</text><text x="720" y="500"  fill="rgb(255 198 1)">s</text><text x="723" y="500"  fill="rgb(254 199 0)"> </text><text x="726" y="500"  fill="rgb(254 201 4)">o</text><text x="729" y="500"  fill="rgb(255 196 0)">n</text><text x="732" y="500"  fill="rgb(255 189 0)">e</text><text x="735" y="500"  fill="rgb(253 188 0)"> </text><text x="738" y="500"  fill="rgb(248 190 0)">i</text><text x="741" y="500"  fill="rgb(251 196 31)">d</text><text x="744" y="500"  fill="rgb(252 222 113)"> </text><text x="747" y="500"  fill="rgb(247 234 184)">p</text><text x="750" y="500"  fill="rgb(247 248 250)">r</text><text x="753" y="500"  fill="rgb(244 251 255)">i</text><text x="756" y="500"  fill="rgb(246 253 255)">v</text><text x="759" y="500"  fill="rgb(245 250 255)">a</text><text x="762" y="500"  fill="rgb(244 248 255)">t</text><text x="765" y="500"  fill="rgb(245 247 252)">e</text><text x="768" y="500"  fill="rgb(245 246 248)"> </text><text x="771" y="500"  fill="rgb(245 246 246)">ke</text><text x="777" y="500"  fill="rgb(245 245 246)">y</text><text x="780" y="500"  fill="rgb(246 245 245)">s</text><text x="783" y="500"  fill="rgb(246 246 245)">I</text><text x="786" y="500"  fill="rgb(245 245 245)">n</text><text x="789" y="500"  fill="rgb(249 247 251)">Q</text><text x="792" y="500"  fill="rgb(255 255 255)">u</text><text x="795" y="500"  fill="rgb(217 233 209)">e</text><text x="798" y="500"  fill="rgb(138 196 36)">r</text><text x="801" y="500"  fill="rgb(116 190 0)">y</text><text x="804" y="500"  fill="rgb(123 196 6)">:</text><text x="807" y="500"  fill="rgb(130 197 32)"> </text><text x="810" y="500"  fill="rgb(133 198 33)">s</text><text x="813" y="500"  fill="rgb(132 198 35)">t</text><text x="816" y="500"  fill="rgb(133 198 34)">r</text><text x="819" y="500"  fill="rgb(132 198 31)">i</text><text x="822" y="500"  fill="rgb(132 198 37)">n</text><text x="825" y="500"  fill="rgb(134 196 33)">g</text><text x="828" y="500"  fill="rgb(133 199 26)">[</text><text x="831" y="500"  fill="rgb(133 199 29)">]</text><text x="834" y="500"  fill="rgb(133 198 34)">;</text><text x="837" y="500"  fill="rgb(133 198 32)"> //</text><text x="846" y="500"  fill="rgb(133 198 31)"> </text><text x="849" y="500"  fill="rgb(132 197 36)">a</text><text x="852" y="500"  fill="rgb(132 199 32)">l</text><text x="855" y="500"  fill="rgb(131 199 28)">l</text><text x="858" y="500"  fill="rgb(132 198 28)"> </text><text x="861" y="500"  fill="rgb(131 200 28)">k</text><text x="864" y="500"  fill="rgb(130 200 26)">e</text><text x="867" y="500"  fill="rgb(135 198 32)">y</text><text x="870" y="500"  fill="rgb(132 197 26)">s</text><text x="873" y="500"  fill="rgb(124 198 15)"> </text><text x="876" y="500"  fill="rgb(111 191 0)">a</text><text x="879" y="500"  fill="rgb(118 190 0)">p</text><text x="882" y="500"  fill="rgb(140 196 29)">p</text><text x="885" y="500"  fill="rgb(174 210 107)">e</text><text x="888" y="500"  fill="rgb(226 237 198)">a</text><text x="891" y="500"  fill="rgb(255 254 255)">re</text><text x="897" y="500"  fill="rgb(254 250 255)">d</text><text x="900" y="500"  fill="rgb(247 246 249)"> </text><text x="903" y="500"  fill="rgb(245 245 245)">in</text><text x="909" y="500"  fill="rgb(246 246 246)"> columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; priv</text><text x="0" y="505"  fill="rgb(246 246 246)">ate sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q:</text><text x="621" y="505"  fill="rgb(246 245 245)"> </text><text x="624" y="505"  fill="rgb(245 246 246)">a</text><text x="627" y="505"  fill="rgb(245 246 249)">n</text><text x="630" y="505"  fill="rgb(245 249 255)">y</text><text x="633" y="505"  fill="rgb(245 255 255)">)</text><text x="636" y="505"  fill="rgb(247 249 255)">:</text><text x="639" y="505"  fill="rgb(244 233 197)"> </text><text x="642" y="505"  fill="rgb(247 217 86)">v</text><text x="645" y="505"  fill="rgb(253 191 0)">o</text><text x="648" y="505"  fill="rgb(255 186 0)">i</text><text x="651" y="505"  fill="rgb(255 194 0)">d</text><text x="654" y="505"  fill="rgb(254 197 0)"> </text><text x="657" y="505"  fill="rgb(252 199 0)">{</text><text x="660" y="505"  fill="rgb(254 199 0)"> </text><text x="663" y="505"  fill="rgb(255 198 1)">i</text><text x="666" y="505"  fill="rgb(252 199 1)">f</text><text x="669" y="505"  fill="rgb(255 196 2)"> </text><text x="672" y="505"  fill="rgb(254 200 1)">(</text><text x="675" y="505"  fill="rgb(254 199 1)">!</text><text x="678" y="505"  fill="rgb(255 198 1)">q</text><text x="681" y="505"  fill="rgb(255 199 0)"> </text><text x="684" y="505"  fill="rgb(254 199 0)">|</text><text x="687" y="505"  fill="rgb(254 198 2)">|</text><text x="690" y="505"  fill="rgb(255 198 1)"> </text><text x="693" y="505"  fill="rgb(255 198 0)">!</text><text x="696" y="505"  fill="rgb(254 201 0)">q</text><text x="699" y="505"  fill="rgb(252 202 0)">.</text><text x="702" y="505"  fill="rgb(255 199 0)">WHE</text><text x="711" y="505"  fill="rgb(253 198 1)">R</text><text x="714" y="505"  fill="rgb(254 198 1)">E</text><text x="717" y="505"  fill="rgb(255 196 0)"> </text><text x="720" y="505"  fill="rgb(253 197 0)">|</text><text x="723" y="505"  fill="rgb(254 195 0)">|</text><text x="726" y="505"  fill="rgb(249 188 0)"> </text><text x="729" y="505"  fill="rgb(249 202 6)">!</text><text x="732" y="505"  fill="rgb(245 218 62)">q</text><text x="735" y="505"  fill="rgb(248 238 197)">.</text><text x="738" y="505"  fill="rgb(246 250 255)">O</text><text x="741" y="505"  fill="rgb(245 255 255)">P</text><text x="744" y="505"  fill="rgb(244 252 255)">T</text><text x="747" y="505"  fill="rgb(245 249 255)">I</text><text x="750" y="505"  fill="rgb(245 247 254)">O</text><text x="753" y="505"  fill="rgb(246 246 248)">N</text><text x="756" y="505"  fill="rgb(245 245 246)">S</text><text x="759" y="505"  fill="rgb(246 245 245)">)</text><text x="762" y="505"  fill="rgb(246 246 245)"> </text><text x="765" y="505"  fill="rgb(246 246 246)">{ thro</text><text x="783" y="505"  fill="rgb(245 245 245)">w</text><text x="786" y="505"  fill="rgb(254 249 255)"> </text><text x="789" y="505"  fill="rgb(252 250 255)">n</text><text x="792" y="505"  fill="rgb(148 200 56)">e</text><text x="795" y="505"  fill="rgb(106 186 0)">w</text><text x="798" y="505"  fill="rgb(127 195 20)"> </text><text x="801" y="505"  fill="rgb(131 195 40)">I</text><text x="804" y="505"  fill="rgb(135 198 36)">n</text><text x="807" y="505"  fill="rgb(133 198 27)">s</text><text x="810" y="505"  fill="rgb(132 199 29)">i</text><text x="813" y="505"  fill="rgb(131 197 30)">g</text><text x="816" y="505"  fill="rgb(129 197 27)">h</text><text x="819" y="505"  fill="rgb(132 200 27)">t</text><text x="822" y="505"  fill="rgb(133 197 28)">E</text><text x="825" y="505"  fill="rgb(133 198 31)">r</text><text x="828" y="505"  fill="rgb(133 198 32)">r</text><text x="831" y="505"  fill="rgb(133 198 31)">or</text><text x="837" y="505"  fill="rgb(133 198 32)">()</text><text x="843" y="505"  fill="rgb(131 197 30)">;</text><text x="846" y="505"  fill="rgb(133 197 32)"> </text><text x="849" y="505"  fill="rgb(133 198 32)">}</text><text x="852" y="505"  fill="rgb(132 197 30)"> </text><text x="855" y="505"  fill="rgb(132 197 31)">f</text><text x="858" y="505"  fill="rgb(134 196 36)">o</text><text x="861" y="505"  fill="rgb(134 197 35)">r</text><text x="864" y="505"  fill="rgb(134 198 31)"> </text><text x="867" y="505"  fill="rgb(131 198 29)">(</text><text x="870" y="505"  fill="rgb(131 197 35)">l</text><text x="873" y="505"  fill="rgb(134 195 37)">e</text><text x="876" y="505"  fill="rgb(136 199 34)">t</text><text x="879" y="505"  fill="rgb(132 198 27)"> </text><text x="882" y="505"  fill="rgb(125 196 24)">k</text><text x="885" y="505"  fill="rgb(115 194 3)">e</text><text x="888" y="505"  fill="rgb(102 186 0)">y</text><text x="891" y="505"  fill="rgb(123 190 0)"> </text><text x="894" y="505"  fill="rgb(171 212 100)">o</text><text x="897" y="505"  fill="rgb(223 232 222)">f</text><text x="900" y="505"  fill="rgb(255 252 255)"> </text><text x="903" y="505"  fill="rgb(255 253 255)">O</text><text x="906" y="505"  fill="rgb(252 249 255)">b</text><text x="909" y="505"  fill="rgb(246 246 247)">j</text><text x="912" y="505"  fill="rgb(246 245 245)">e</text><text x="915" y="505"  fill="rgb(245 246 245)">c</text><text x="918" y="505"  fill="rgb(246 246 246)">t.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANS</text><text x="0" y="510"  fill="rgb(246 246 246)">FORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw</text><text x="615" y="510"  fill="rgb(246 246 245)"> </text><text x="618" y="510"  fill="rgb(246 245 245)">n</text><text x="621" y="510"  fill="rgb(245 246 250)">e</text><text x="624" y="510"  fill="rgb(245 250 255)">w</text><text x="627" y="510"  fill="rgb(247 250 255)"> </text><text x="630" y="510"  fill="rgb(248 239 194)">I</text><text x="633" y="510"  fill="rgb(252 215 84)">n</text><text x="636" y="510"  fill="rgb(252 196 0)">s</text><text x="639" y="510"  fill="rgb(250 198 0)">i</text><text x="642" y="510"  fill="rgb(254 192 0)">g</text><text x="645" y="510"  fill="rgb(254 196 1)">h</text><text x="648" y="510"  fill="rgb(254 203 0)">t</text><text x="651" y="510"  fill="rgb(253 202 0)">E</text><text x="654" y="510"  fill="rgb(254 198 0)">r</text><text x="657" y="510"  fill="rgb(255 198 0)">ro</text><text x="663" y="510"  fill="rgb(255 199 0)">r</text><text x="666" y="510"  fill="rgb(255 198 0)">(</text><text x="669" y="510"  fill="rgb(255 199 0)">)</text><text x="672" y="510"  fill="rgb(255 198 0)">; } </text><text x="684" y="510"  fill="rgb(254 197 0)">t</text><text x="687" y="510"  fill="rgb(255 198 0)">h</text><text x="690" y="510"  fill="rgb(255 199 0)">i</text><text x="693" y="510"  fill="rgb(254 200 0)">s</text><text x="696" y="510"  fill="rgb(254 200 1)">.</text><text x="699" y="510"  fill="rgb(255 199 0)">v</text><text x="702" y="510"  fill="rgb(254 197 0)">a</text><text x="705" y="510"  fill="rgb(254 197 1)">l</text><text x="708" y="510"  fill="rgb(251 201 2)">i</text><text x="711" y="510"  fill="rgb(253 202 0)">d</text><text x="714" y="510"  fill="rgb(253 194 0)">a</text><text x="717" y="510"  fill="rgb(252 194 0)">t</text><text x="720" y="510"  fill="rgb(246 202 0)">e</text><text x="723" y="510"  fill="rgb(246 214 107)">G</text><text x="726" y="510"  fill="rgb(248 242 186)">R</text><text x="729" y="510"  fill="rgb(245 248 255)">O</text><text x="732" y="510"  fill="rgb(245 251 255)">U</text><text x="735" y="510"  fill="rgb(245 249 255)">P</text><text x="738" y="510"  fill="rgb(245 247 255)">(</text><text x="741" y="510"  fill="rgb(245 245 246)">q</text><text x="744" y="510"  fill="rgb(245 245 245)">.</text><text x="747" y="510"  fill="rgb(246 246 245)">G</text><text x="750" y="510"  fill="rgb(246 245 246)">R</text><text x="753" y="510"  fill="rgb(246 245 245)">O</text><text x="756" y="510"  fill="rgb(246 246 245)">U</text><text x="759" y="510"  fill="rgb(246 246 246)">P); thi</text><text x="780" y="510"  fill="rgb(245 246 245)">s</text><text x="783" y="510"  fill="rgb(248 247 249)">.</text><text x="786" y="510"  fill="rgb(234 240 232)">v</text><text x="789" y="510"  fill="rgb(135 196 0)">a</text><text x="792" y="510"  fill="rgb(121 193 11)">l</text><text x="795" y="510"  fill="rgb(132 198 34)">i</text><text x="798" y="510"  fill="rgb(133 197 32)">d</text><text x="801" y="510"  fill="rgb(133 198 33)">a</text><text x="804" y="510"  fill="rgb(132 197 32)">t</text><text x="807" y="510"  fill="rgb(133 197 32)">eA</text><text x="813" y="510"  fill="rgb(132 197 32)">P</text><text x="816" y="510"  fill="rgb(133 197 32)">PLY</text><text x="825" y="510"  fill="rgb(132 198 31)">(</text><text x="828" y="510"  fill="rgb(132 197 32)">q</text><text x="831" y="510"  fill="rgb(133 197 32)">.</text><text x="834" y="510"  fill="rgb(133 198 31)">A</text><text x="837" y="510"  fill="rgb(133 198 32)">PP</text><text x="843" y="510"  fill="rgb(132 197 32)">L</text><text x="846" y="510"  fill="rgb(133 197 32)">Y)</text><text x="852" y="510"  fill="rgb(132 197 32)">; </text><text x="858" y="510"  fill="rgb(133 197 31)">}</text><text x="861" y="510"  fill="rgb(133 198 31)"> </text><text x="864" y="510"  fill="rgb(133 197 32)">p</text><text x="867" y="510"  fill="rgb(132 197 32)">r</text><text x="870" y="510"  fill="rgb(133 197 31)">i</text><text x="873" y="510"  fill="rgb(133 198 31)">v</text><text x="876" y="510"  fill="rgb(132 198 33)">a</text><text x="879" y="510"  fill="rgb(132 197 32)">t</text><text x="882" y="510"  fill="rgb(132 197 28)">e</text><text x="885" y="510"  fill="rgb(133 198 26)"> </text><text x="888" y="510"  fill="rgb(134 198 40)">v</text><text x="891" y="510"  fill="rgb(127 197 25)">a</text><text x="894" y="510"  fill="rgb(119 193 0)">l</text><text x="897" y="510"  fill="rgb(123 190 0)">i</text><text x="900" y="510"  fill="rgb(131 194 6)">d</text><text x="903" y="510"  fill="rgb(186 221 142)">a</text><text x="906" y="510"  fill="rgb(235 240 227)">t</text><text x="909" y="510"  fill="rgb(255 252 255)">e</text><text x="912" y="510"  fill="rgb(255 250 255)">G</text><text x="915" y="510"  fill="rgb(246 245 246)">R</text><text x="918" y="510"  fill="rgb(245 245 245)">O</text><text x="921" y="510"  fill="rgb(246 246 246)">UP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transf</text><text x="0" y="515"  fill="rgb(246 246 246)">ormationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw </text><text x="609" y="515"  fill="rgb(246 245 245)">n</text><text x="612" y="515"  fill="rgb(245 246 247)">e</text><text x="615" y="515"  fill="rgb(246 248 255)">w</text><text x="618" y="515"  fill="rgb(244 254 255)"> </text><text x="621" y="515"  fill="rgb(248 253 255)">I</text><text x="624" y="515"  fill="rgb(251 230 158)">n</text><text x="627" y="515"  fill="rgb(251 208 43)">s</text><text x="630" y="515"  fill="rgb(254 193 0)">i</text><text x="633" y="515"  fill="rgb(253 192 0)">g</text><text x="636" y="515"  fill="rgb(254 197 0)">h</text><text x="639" y="515"  fill="rgb(253 198 0)">t</text><text x="642" y="515"  fill="rgb(250 201 1)">E</text><text x="645" y="515"  fill="rgb(250 201 2)">r</text><text x="648" y="515"  fill="rgb(253 199 0)">r</text><text x="651" y="515"  fill="rgb(254 198 0)">or</text><text x="657" y="515"  fill="rgb(255 199 0)">(</text><text x="660" y="515"  fill="rgb(255 198 0)">)</text><text x="663" y="515"  fill="rgb(255 199 0)">; } i</text><text x="678" y="515"  fill="rgb(255 198 0)">f</text><text x="681" y="515"  fill="rgb(255 199 0)"> </text><text x="684" y="515"  fill="rgb(255 198 0)">(</text><text x="687" y="515"  fill="rgb(253 199 1)">!</text><text x="690" y="515"  fill="rgb(254 202 2)">(</text><text x="693" y="515"  fill="rgb(253 198 0)">t</text><text x="696" y="515"  fill="rgb(254 198 0)">h</text><text x="699" y="515"  fill="rgb(253 197 0)">i</text><text x="702" y="515"  fill="rgb(254 202 1)">s</text><text x="705" y="515"  fill="rgb(254 199 0)">.</text><text x="708" y="515"  fill="rgb(255 188 0)">v</text><text x="711" y="515"  fill="rgb(250 189 0)">a</text><text x="714" y="515"  fill="rgb(249 211 35)">l</text><text x="717" y="515"  fill="rgb(248 229 175)">i</text><text x="720" y="515"  fill="rgb(247 249 255)">d</text><text x="723" y="515"  fill="rgb(246 253 255)">a</text><text x="726" y="515"  fill="rgb(245 248 255)">t</text><text x="729" y="515"  fill="rgb(245 247 252)">e</text><text x="732" y="515"  fill="rgb(246 246 247)">I</text><text x="735" y="515"  fill="rgb(245 245 246)">d</text><text x="738" y="515"  fill="rgb(246 245 245)">s</text><text x="741" y="515"  fill="rgb(246 246 245)">t</text><text x="744" y="515"  fill="rgb(246 246 246)">ring(splitt</text><text x="777" y="515"  fill="rgb(245 246 245)">e</text><text x="780" y="515"  fill="rgb(246 245 247)">d</text><text x="783" y="515"  fill="rgb(255 254 255)">K</text><text x="786" y="515"  fill="rgb(142 198 37)">e</text><text x="789" y="515"  fill="rgb(125 193 10)">y</text><text x="792" y="515"  fill="rgb(132 199 33)">[</text><text x="795" y="515"  fill="rgb(132 198 32)">0</text><text x="798" y="515"  fill="rgb(132 197 32)">]</text><text x="801" y="515"  fill="rgb(132 197 30)">)</text><text x="804" y="515"  fill="rgb(133 198 31)"> </text><text x="807" y="515"  fill="rgb(133 198 32)">&amp;</text><text x="810" y="515"  fill="rgb(133 198 31)">&amp;</text><text x="813" y="515"  fill="rgb(133 198 32)"> (</text><text x="819" y="515"  fill="rgb(133 197 32)">t</text><text x="822" y="515"  fill="rgb(133 198 32)">hi</text><text x="828" y="515"  fill="rgb(133 198 31)">s</text><text x="831" y="515"  fill="rgb(133 198 32)">.mfiel</text><text x="849" y="515"  fill="rgb(133 198 31)">d</text><text x="852" y="515"  fill="rgb(133 198 32)">s.</text><text x="858" y="515"  fill="rgb(132 198 32)">i</text><text x="861" y="515"  fill="rgb(132 197 31)">n</text><text x="864" y="515"  fill="rgb(132 198 32)">c</text><text x="867" y="515"  fill="rgb(133 198 31)">lu</text><text x="873" y="515"  fill="rgb(132 198 32)">d</text><text x="876" y="515"  fill="rgb(133 197 31)">e</text><text x="879" y="515"  fill="rgb(133 198 31)">s</text><text x="882" y="515"  fill="rgb(132 197 33)">(</text><text x="885" y="515"  fill="rgb(132 196 41)">s</text><text x="888" y="515"  fill="rgb(132 199 25)">p</text><text x="891" y="515"  fill="rgb(130 199 27)">l</text><text x="894" y="515"  fill="rgb(130 198 40)">i</text><text x="897" y="515"  fill="rgb(127 199 34)">t</text><text x="900" y="515"  fill="rgb(128 198 19)">t</text><text x="903" y="515"  fill="rgb(113 191 0)">e</text><text x="906" y="515"  fill="rgb(116 190 0)">d</text><text x="909" y="515"  fill="rgb(160 206 76)">K</text><text x="912" y="515"  fill="rgb(216 231 193)">e</text><text x="915" y="515"  fill="rgb(255 255 255)">y</text><text x="918" y="515"  fill="rgb(255 252 255)">[</text><text x="921" y="515"  fill="rgb(250 248 254)">1</text><text x="924" y="515"  fill="rgb(245 245 245)">]</text><text x="927" y="515"  fill="rgb(245 246 245)">)</text><text x="930" y="515"  fill="rgb(246 246 246)"> || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should </text><text x="0" y="520"  fill="rgb(246 246 246)">have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]</text><text x="600" y="520"  fill="rgb(246 246 245)">;</text><text x="603" y="520"  fill="rgb(245 245 245)"> </text><text x="606" y="520"  fill="rgb(245 246 249)">l</text><text x="609" y="520"  fill="rgb(245 249 255)">e</text><text x="612" y="520"  fill="rgb(246 254 255)">t</text><text x="615" y="520"  fill="rgb(244 241 219)"> </text><text x="618" y="520"  fill="rgb(251 215 85)">c</text><text x="621" y="520"  fill="rgb(248 188 0)">r</text><text x="624" y="520"  fill="rgb(249 193 0)">i</text><text x="627" y="520"  fill="rgb(254 192 0)">t</text><text x="630" y="520"  fill="rgb(252 200 2)">e</text><text x="633" y="520"  fill="rgb(253 201 2)">r</text><text x="636" y="520"  fill="rgb(253 199 4)">i</text><text x="639" y="520"  fill="rgb(253 199 2)">a</text><text x="642" y="520"  fill="rgb(254 199 1)"> </text><text x="645" y="520"  fill="rgb(253 203 0)">=</text><text x="648" y="520"  fill="rgb(254 199 3)"> </text><text x="651" y="520"  fill="rgb(255 199 3)">a</text><text x="654" y="520"  fill="rgb(255 199 0)">ppl</text><text x="663" y="520"  fill="rgb(255 199 1)">y</text><text x="666" y="520"  fill="rgb(255 197 0)">r</text><text x="669" y="520"  fill="rgb(255 199 0)">u</text><text x="672" y="520"  fill="rgb(254 199 0)">l</text><text x="675" y="520"  fill="rgb(255 198 0)">e</text><text x="678" y="520"  fill="rgb(255 199 0)">[</text><text x="681" y="520"  fill="rgb(254 198 0)">a</text><text x="684" y="520"  fill="rgb(255 198 0)">p</text><text x="687" y="520"  fill="rgb(255 199 0)">p</text><text x="690" y="520"  fill="rgb(254 197 0)">l</text><text x="693" y="520"  fill="rgb(254 198 1)">y</text><text x="696" y="520"  fill="rgb(255 198 0)">k</text><text x="699" y="520"  fill="rgb(255 202 0)">e</text><text x="702" y="520"  fill="rgb(249 193 0)">y</text><text x="705" y="520"  fill="rgb(251 200 21)">]</text><text x="708" y="520"  fill="rgb(250 225 127)">;</text><text x="711" y="520"  fill="rgb(247 251 255)"> </text><text x="714" y="520"  fill="rgb(245 255 255)">i</text><text x="717" y="520"  fill="rgb(245 250 255)">f</text><text x="720" y="520"  fill="rgb(245 246 250)"> </text><text x="723" y="520"  fill="rgb(245 245 246)">(</text><text x="726" y="520"  fill="rgb(246 246 245)">a</text><text x="729" y="520"  fill="rgb(246 246 246)">pplykey.length =</text><text x="777" y="520"  fill="rgb(245 245 246)">=</text><text x="780" y="520"  fill="rgb(255 252 255)">=</text><text x="783" y="520"  fill="rgb(143 202 71)"> </text><text x="786" y="520"  fill="rgb(119 193 0)">0</text><text x="789" y="520"  fill="rgb(133 197 43)"> </text><text x="792" y="520"  fill="rgb(133 197 26)">|</text><text x="795" y="520"  fill="rgb(133 197 31)">|</text><text x="798" y="520"  fill="rgb(132 198 30)"> </text><text x="801" y="520"  fill="rgb(133 198 31)">a</text><text x="804" y="520"  fill="rgb(131 196 31)">p</text><text x="807" y="520"  fill="rgb(133 198 32)">plykey.includes(&quot;_&quot;) || </text><text x="879" y="520"  fill="rgb(132 197 31)">t</text><text x="882" y="520"  fill="rgb(133 199 29)">h</text><text x="885" y="520"  fill="rgb(132 198 24)">i</text><text x="888" y="520"  fill="rgb(132 197 33)">s</text><text x="891" y="520"  fill="rgb(135 198 31)">.</text><text x="894" y="520"  fill="rgb(134 198 27)">t</text><text x="897" y="520"  fill="rgb(132 199 28)">r</text><text x="900" y="520"  fill="rgb(133 198 34)">a</text><text x="903" y="520"  fill="rgb(136 197 39)">n</text><text x="906" y="520"  fill="rgb(129 198 36)">s</text><text x="909" y="520"  fill="rgb(120 196 10)">f</text><text x="912" y="520"  fill="rgb(108 187 0)">o</text><text x="915" y="520"  fill="rgb(114 182 0)">r</text><text x="918" y="520"  fill="rgb(193 221 148)">m</text><text x="921" y="520"  fill="rgb(243 242 246)">a</text><text x="924" y="520"  fill="rgb(255 255 255)">t</text><text x="927" y="520"  fill="rgb(251 247 255)">i</text><text x="930" y="520"  fill="rgb(247 246 248)">o</text><text x="933" y="520"  fill="rgb(245 245 245)">n</text><text x="936" y="520"  fill="rgb(246 246 246)">Key.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytok</text><text x="0" y="525"  fill="rgb(246 246 246)">en: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); </text><text x="597" y="525"  fill="rgb(246 246 245)">i</text><text x="600" y="525"  fill="rgb(245 245 245)">f</text><text x="603" y="525"  fill="rgb(246 249 255)"> </text><text x="606" y="525"  fill="rgb(245 251 255)">(</text><text x="609" y="525"  fill="rgb(247 242 197)">k</text><text x="612" y="525"  fill="rgb(251 207 69)">e</text><text x="615" y="525"  fill="rgb(251 196 0)">y</text><text x="618" y="525"  fill="rgb(253 194 0)">.</text><text x="621" y="525"  fill="rgb(254 197 0)">l</text><text x="624" y="525"  fill="rgb(255 198 0)">e</text><text x="627" y="525"  fill="rgb(254 199 0)">n</text><text x="630" y="525"  fill="rgb(255 198 1)">g</text><text x="633" y="525"  fill="rgb(254 199 0)">th</text><text x="639" y="525"  fill="rgb(253 199 0)"> </text><text x="642" y="525"  fill="rgb(255 198 1)">!</text><text x="645" y="525"  fill="rgb(255 197 0)">=</text><text x="648" y="525"  fill="rgb(255 198 2)">=</text><text x="651" y="525"  fill="rgb(255 199 0)"> 2) {</text><text x="666" y="525"  fill="rgb(255 200 1)"> </text><text x="669" y="525"  fill="rgb(254 198 0)">t</text><text x="672" y="525"  fill="rgb(253 202 0)">h</text><text x="675" y="525"  fill="rgb(254 199 0)">r</text><text x="678" y="525"  fill="rgb(254 198 0)">o</text><text x="681" y="525"  fill="rgb(253 201 0)">w</text><text x="684" y="525"  fill="rgb(253 200 1)"> </text><text x="687" y="525"  fill="rgb(253 200 0)">n</text><text x="690" y="525"  fill="rgb(254 199 2)">e</text><text x="693" y="525"  fill="rgb(254 196 0)">w</text><text x="696" y="525"  fill="rgb(250 194 0)"> </text><text x="699" y="525"  fill="rgb(251 201 0)">I</text><text x="702" y="525"  fill="rgb(248 231 166)">n</text><text x="705" y="525"  fill="rgb(246 249 255)">s</text><text x="708" y="525"  fill="rgb(245 252 255)">i</text><text x="711" y="525"  fill="rgb(245 247 254)">g</text><text x="714" y="525"  fill="rgb(245 245 244)">h</text><text x="717" y="525"  fill="rgb(245 246 245)">t</text><text x="720" y="525"  fill="rgb(246 245 245)">E</text><text x="723" y="525"  fill="rgb(246 246 245)">r</text><text x="726" y="525"  fill="rgb(246 246 246)">ror(); } if (thi</text><text x="774" y="525"  fill="rgb(246 246 245)">s</text><text x="777" y="525"  fill="rgb(249 247 251)">.</text><text x="780" y="525"  fill="rgb(208 229 183)">m</text><text x="783" y="525"  fill="rgb(122 194 0)">t</text><text x="786" y="525"  fill="rgb(132 197 33)">o</text><text x="789" y="525"  fill="rgb(132 199 30)">k</text><text x="792" y="525"  fill="rgb(133 197 29)">e</text><text x="795" y="525"  fill="rgb(134 197 33)">n</text><text x="798" y="525"  fill="rgb(133 198 31)">.</text><text x="801" y="525"  fill="rgb(133 197 33)">i</text><text x="804" y="525"  fill="rgb(133 197 30)">n</text><text x="807" y="525"  fill="rgb(133 198 32)">cludes(applytoken)) { if </text><text x="882" y="525"  fill="rgb(132 196 31)">(</text><text x="885" y="525"  fill="rgb(132 197 34)">!</text><text x="888" y="525"  fill="rgb(133 197 33)">(</text><text x="891" y="525"  fill="rgb(132 196 33)">t</text><text x="894" y="525"  fill="rgb(132 197 30)">h</text><text x="897" y="525"  fill="rgb(133 197 33)">i</text><text x="900" y="525"  fill="rgb(132 196 33)">s</text><text x="903" y="525"  fill="rgb(131 198 31)">.</text><text x="906" y="525"  fill="rgb(133 197 31)">v</text><text x="909" y="525"  fill="rgb(133 198 31)">a</text><text x="912" y="525"  fill="rgb(134 198 39)">l</text><text x="915" y="525"  fill="rgb(130 198 25)">i</text><text x="918" y="525"  fill="rgb(117 192 0)">d</text><text x="921" y="525"  fill="rgb(124 190 0)">a</text><text x="924" y="525"  fill="rgb(183 214 133)">t</text><text x="927" y="525"  fill="rgb(245 247 238)">e</text><text x="930" y="525"  fill="rgb(255 252 255)">I</text><text x="933" y="525"  fill="rgb(250 248 254)">d</text><text x="936" y="525"  fill="rgb(245 245 244)">s</text><text x="939" y="525"  fill="rgb(246 246 246)">tring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) ||</text><text x="0" y="530"  fill="rgb(246 246 246)"> this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !</text><text x="591" y="530"  fill="rgb(246 245 245)">=</text><text x="594" y="530"  fill="rgb(245 246 249)">=</text><text x="597" y="530"  fill="rgb(245 248 255)"> </text><text x="600" y="530"  fill="rgb(246 255 255)">&quot;</text><text x="603" y="530"  fill="rgb(245 239 209)">O</text><text x="606" y="530"  fill="rgb(248 209 42)">R</text><text x="609" y="530"  fill="rgb(251 192 0)">D</text><text x="612" y="530"  fill="rgb(255 192 0)">E</text><text x="615" y="530"  fill="rgb(255 197 0)">R</text><text x="618" y="530"  fill="rgb(253 199 0)">&quot;</text><text x="621" y="530"  fill="rgb(255 198 0)">)</text><text x="624" y="530"  fill="rgb(254 199 1)"> </text><text x="627" y="530"  fill="rgb(255 198 0)">{</text><text x="630" y="530"  fill="rgb(255 199 0)"> </text><text x="633" y="530"  fill="rgb(255 198 0)">thr</text><text x="642" y="530"  fill="rgb(255 199 0)">ow n</text><text x="654" y="530"  fill="rgb(255 198 0)">e</text><text x="657" y="530"  fill="rgb(255 199 0)">w I</text><text x="666" y="530"  fill="rgb(255 198 0)">n</text><text x="669" y="530"  fill="rgb(254 197 1)">s</text><text x="672" y="530"  fill="rgb(255 198 2)">i</text><text x="675" y="530"  fill="rgb(255 198 1)">g</text><text x="678" y="530"  fill="rgb(253 201 0)">h</text><text x="681" y="530"  fill="rgb(253 199 2)">t</text><text x="684" y="530"  fill="rgb(254 199 1)">E</text><text x="687" y="530"  fill="rgb(255 194 0)">r</text><text x="690" y="530"  fill="rgb(252 187 0)">r</text><text x="693" y="530"  fill="rgb(250 202 20)">o</text><text x="696" y="530"  fill="rgb(250 231 196)">r</text><text x="699" y="530"  fill="rgb(246 252 255)">(</text><text x="702" y="530"  fill="rgb(245 251 255)">)</text><text x="705" y="530"  fill="rgb(245 247 252)">;</text><text x="708" y="530"  fill="rgb(245 245 247)"> </text><text x="711" y="530"  fill="rgb(246 245 245)">}</text><text x="714" y="530"  fill="rgb(246 246 246)"> } this.validateColu</text><text x="774" y="530"  fill="rgb(245 245 246)">m</text><text x="777" y="530"  fill="rgb(250 248 250)">n</text><text x="780" y="530"  fill="rgb(186 216 161)">s</text><text x="783" y="530"  fill="rgb(122 196 0)">(</text><text x="786" y="530"  fill="rgb(135 199 22)">q</text><text x="789" y="530"  fill="rgb(131 197 34)">.</text><text x="792" y="530"  fill="rgb(131 199 28)">C</text><text x="795" y="530"  fill="rgb(134 197 30)">O</text><text x="798" y="530"  fill="rgb(133 197 32)">L</text><text x="801" y="530"  fill="rgb(133 198 32)">U</text><text x="804" y="530"  fill="rgb(132 198 31)">M</text><text x="807" y="530"  fill="rgb(133 198 32)">NS); if (q.ORDER) { thi</text><text x="876" y="530"  fill="rgb(133 198 31)">s.</text><text x="882" y="530"  fill="rgb(133 198 32)">v</text><text x="885" y="530"  fill="rgb(133 198 31)">a</text><text x="888" y="530"  fill="rgb(132 198 31)">l</text><text x="891" y="530"  fill="rgb(133 198 31)">i</text><text x="894" y="530"  fill="rgb(133 198 32)">d</text><text x="897" y="530"  fill="rgb(133 198 31)">at</text><text x="903" y="530"  fill="rgb(133 197 31)">e</text><text x="906" y="530"  fill="rgb(133 198 32)">O</text><text x="909" y="530"  fill="rgb(132 197 32)">r</text><text x="912" y="530"  fill="rgb(132 197 31)">d</text><text x="915" y="530"  fill="rgb(132 197 33)">e</text><text x="918" y="530"  fill="rgb(131 199 33)">r</text><text x="921" y="530"  fill="rgb(125 201 31)">(</text><text x="924" y="530"  fill="rgb(114 192 0)">q</text><text x="927" y="530"  fill="rgb(121 188 0)">.</text><text x="930" y="530"  fill="rgb(168 207 68)">O</text><text x="933" y="530"  fill="rgb(252 249 255)">R</text><text x="936" y="530"  fill="rgb(255 255 255)">D</text><text x="939" y="530"  fill="rgb(250 247 252)">E</text><text x="942" y="530"  fill="rgb(245 245 245)">R</text><text x="945" y="530"  fill="rgb(246 246 245)">)</text><text x="948" y="530"  fill="rgb(246 246 246)">; } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.incl</text><text x="0" y="535"  fill="rgb(246 246 246)">udes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightErr</text><text x="585" y="535"  fill="rgb(246 245 245)">o</text><text x="588" y="535"  fill="rgb(245 246 247)">r</text><text x="591" y="535"  fill="rgb(245 248 255)">(</text><text x="594" y="535"  fill="rgb(246 252 255)">)</text><text x="597" y="535"  fill="rgb(246 239 208)">;</text><text x="600" y="535"  fill="rgb(249 201 58)"> </text><text x="603" y="535"  fill="rgb(254 187 0)">}</text><text x="606" y="535"  fill="rgb(255 193 0)"> </text><text x="609" y="535"  fill="rgb(254 195 2)">e</text><text x="612" y="535"  fill="rgb(246 205 2)">l</text><text x="615" y="535"  fill="rgb(249 203 1)">s</text><text x="618" y="535"  fill="rgb(255 196 0)">e</text><text x="621" y="535"  fill="rgb(254 199 0)"> </text><text x="624" y="535"  fill="rgb(255 198 0)">i</text><text x="627" y="535"  fill="rgb(254 198 0)">f</text><text x="630" y="535"  fill="rgb(255 198 0)"> </text><text x="633" y="535"  fill="rgb(255 199 0)">(typeof q =</text><text x="666" y="535"  fill="rgb(254 199 1)">=</text><text x="669" y="535"  fill="rgb(255 198 0)">=</text><text x="672" y="535"  fill="rgb(254 199 3)"> </text><text x="675" y="535"  fill="rgb(252 206 0)">&quot;</text><text x="678" y="535"  fill="rgb(253 199 2)">s</text><text x="681" y="535"  fill="rgb(255 193 0)">t</text><text x="684" y="535"  fill="rgb(252 191 0)">r</text><text x="687" y="535"  fill="rgb(244 204 20)">i</text><text x="690" y="535"  fill="rgb(245 233 162)">n</text><text x="693" y="535"  fill="rgb(245 254 255)">g</text><text x="696" y="535"  fill="rgb(245 251 255)">&quot;</text><text x="699" y="535"  fill="rgb(245 246 249)">)</text><text x="702" y="535"  fill="rgb(246 245 245)"> </text><text x="705" y="535"  fill="rgb(246 246 245)">{</text><text x="708" y="535"  fill="rgb(246 246 246)"> if (!this.keysInQuery</text><text x="774" y="535"  fill="rgb(247 247 248)">.</text><text x="777" y="535"  fill="rgb(229 237 215)">i</text><text x="780" y="535"  fill="rgb(144 199 52)">n</text><text x="783" y="535"  fill="rgb(124 201 24)">c</text><text x="786" y="535"  fill="rgb(134 196 31)">l</text><text x="789" y="535"  fill="rgb(131 198 33)">u</text><text x="792" y="535"  fill="rgb(131 200 28)">d</text><text x="795" y="535"  fill="rgb(133 197 33)">e</text><text x="798" y="535"  fill="rgb(132 198 30)">s</text><text x="801" y="535"  fill="rgb(132 197 31)">(</text><text x="804" y="535"  fill="rgb(133 198 31)">q</text><text x="807" y="535"  fill="rgb(133 198 32)">)) { throw new InsightError(); } } </text><text x="912" y="535"  fill="rgb(132 198 30)">e</text><text x="915" y="535"  fill="rgb(132 198 33)">l</text><text x="918" y="535"  fill="rgb(136 197 26)">s</text><text x="921" y="535"  fill="rgb(140 195 25)">e</text><text x="924" y="535"  fill="rgb(132 198 44)"> </text><text x="927" y="535"  fill="rgb(126 200 35)">{</text><text x="930" y="535"  fill="rgb(117 198 0)"> </text><text x="933" y="535"  fill="rgb(110 185 0)">i</text><text x="936" y="535"  fill="rgb(169 211 104)">f</text><text x="939" y="535"  fill="rgb(247 246 255)"> </text><text x="942" y="535"  fill="rgb(255 253 255)">(</text><text x="945" y="535"  fill="rgb(248 247 251)">!</text><text x="948" y="535"  fill="rgb(245 246 245)">q.</text><text x="954" y="535"  fill="rgb(246 246 246)">dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys</text><text x="0" y="540"  fill="rgb(246 246 246)">) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if</text><text x="582" y="540"  fill="rgb(246 245 245)"> </text><text x="585" y="540"  fill="rgb(245 247 253)">(</text><text x="588" y="540"  fill="rgb(245 251 255)">A</text><text x="591" y="540"  fill="rgb(246 245 220)">r</text><text x="594" y="540"  fill="rgb(246 213 59)">r</text><text x="597" y="540"  fill="rgb(252 194 0)">a</text><text x="600" y="540"  fill="rgb(254 196 0)">y</text><text x="603" y="540"  fill="rgb(254 200 0)">.</text><text x="606" y="540"  fill="rgb(253 200 2)">i</text><text x="609" y="540"  fill="rgb(252 200 0)">s</text><text x="612" y="540"  fill="rgb(252 198 0)">A</text><text x="615" y="540"  fill="rgb(251 200 0)">rr</text><text x="621" y="540"  fill="rgb(255 197 0)">a</text><text x="624" y="540"  fill="rgb(255 198 2)">y</text><text x="627" y="540"  fill="rgb(254 198 0)">(</text><text x="630" y="540"  fill="rgb(254 199 0)">q</text><text x="633" y="540"  fill="rgb(255 199 0)">)) { thr</text><text x="657" y="540"  fill="rgb(255 198 0)">ow </text><text x="666" y="540"  fill="rgb(254 198 0)">n</text><text x="669" y="540"  fill="rgb(254 198 1)">e</text><text x="672" y="540"  fill="rgb(253 199 1)">w</text><text x="675" y="540"  fill="rgb(254 199 0)"> </text><text x="678" y="540"  fill="rgb(254 193 0)">I</text><text x="681" y="540"  fill="rgb(249 194 0)">n</text><text x="684" y="540"  fill="rgb(244 225 110)">s</text><text x="687" y="540"  fill="rgb(244 248 251)">i</text><text x="690" y="540"  fill="rgb(245 250 255)">g</text><text x="693" y="540"  fill="rgb(245 246 247)">h</text><text x="696" y="540"  fill="rgb(245 245 245)">t</text><text x="699" y="540"  fill="rgb(246 245 245)">E</text><text x="702" y="540"  fill="rgb(246 246 246)">rror(); } else { if (Obj</text><text x="774" y="540"  fill="rgb(247 247 248)">e</text><text x="777" y="540"  fill="rgb(227 236 214)">c</text><text x="780" y="540"  fill="rgb(139 196 41)">t</text><text x="783" y="540"  fill="rgb(123 203 10)">.</text><text x="786" y="540"  fill="rgb(133 195 42)">k</text><text x="789" y="540"  fill="rgb(132 199 29)">e</text><text x="792" y="540"  fill="rgb(132 199 25)">y</text><text x="795" y="540"  fill="rgb(133 196 35)">s</text><text x="798" y="540"  fill="rgb(132 198 29)">(</text><text x="801" y="540"  fill="rgb(132 197 31)">q</text><text x="804" y="540"  fill="rgb(133 198 31)">)</text><text x="807" y="540"  fill="rgb(133 198 32)">.length !== 0) { this.validateFilte</text><text x="912" y="540"  fill="rgb(132 197 31)">r</text><text x="915" y="540"  fill="rgb(131 198 30)">(</text><text x="918" y="540"  fill="rgb(132 198 31)">q</text><text x="921" y="540"  fill="rgb(130 197 34)">)</text><text x="924" y="540"  fill="rgb(132 200 29)">;</text><text x="927" y="540"  fill="rgb(132 198 27)"> </text><text x="930" y="540"  fill="rgb(134 197 38)">}</text><text x="933" y="540"  fill="rgb(130 198 33)"> </text><text x="936" y="540"  fill="rgb(117 191 0)">}</text><text x="939" y="540"  fill="rgb(124 193 0)"> </text><text x="942" y="540"  fill="rgb(203 224 162)">}</text><text x="945" y="540"  fill="rgb(255 250 255)"> </text><text x="948" y="540"  fill="rgb(254 250 255)">p</text><text x="951" y="540"  fill="rgb(246 245 247)">r</text><text x="954" y="540"  fill="rgb(245 246 245)">i</text><text x="957" y="540"  fill="rgb(246 246 246)">vate validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key)</text><text x="0" y="545"  fill="rgb(246 246 246)"> { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.vali</text><text x="576" y="545"  fill="rgb(246 245 245)">d</text><text x="579" y="545"  fill="rgb(245 246 249)">a</text><text x="582" y="545"  fill="rgb(244 251 255)">t</text><text x="585" y="545"  fill="rgb(245 250 255)">e</text><text x="588" y="545"  fill="rgb(248 218 82)">I</text><text x="591" y="545"  fill="rgb(250 188 0)">S</text><text x="594" y="545"  fill="rgb(255 192 0)">(</text><text x="597" y="545"  fill="rgb(252 201 0)">v</text><text x="600" y="545"  fill="rgb(253 199 1)">a</text><text x="603" y="545"  fill="rgb(255 197 1)">l</text><text x="606" y="545"  fill="rgb(253 200 0)">u</text><text x="609" y="545"  fill="rgb(254 197 1)">e</text><text x="612" y="545"  fill="rgb(255 199 0)">)</text><text x="615" y="545"  fill="rgb(255 198 0)">;</text><text x="618" y="545"  fill="rgb(255 198 1)"> </text><text x="621" y="545"  fill="rgb(255 198 0)">b</text><text x="624" y="545"  fill="rgb(255 199 0)">r</text><text x="627" y="545"  fill="rgb(255 198 0)">e</text><text x="630" y="545"  fill="rgb(254 199 0)">a</text><text x="633" y="545"  fill="rgb(255 199 0)">k; defa</text><text x="654" y="545"  fill="rgb(254 198 1)">u</text><text x="657" y="545"  fill="rgb(253 201 1)">l</text><text x="660" y="545"  fill="rgb(251 198 3)">t</text><text x="663" y="545"  fill="rgb(252 202 2)">:</text><text x="666" y="545"  fill="rgb(252 205 0)"> </text><text x="669" y="545"  fill="rgb(254 198 0)">th</text><text x="675" y="545"  fill="rgb(253 188 0)">r</text><text x="678" y="545"  fill="rgb(252 204 45)">o</text><text x="681" y="545"  fill="rgb(245 243 216)">w</text><text x="684" y="545"  fill="rgb(246 252 255)"> </text><text x="687" y="545"  fill="rgb(246 247 254)">n</text><text x="690" y="545"  fill="rgb(246 246 246)">e</text><text x="693" y="545"  fill="rgb(246 246 245)">w</text><text x="696" y="545"  fill="rgb(246 246 246)"> InsightError(); } } } pri</text><text x="774" y="545"  fill="rgb(247 247 248)">v</text><text x="777" y="545"  fill="rgb(227 235 213)">a</text><text x="780" y="545"  fill="rgb(138 196 41)">t</text><text x="783" y="545"  fill="rgb(124 201 16)">e</text><text x="786" y="545"  fill="rgb(134 196 34)"> </text><text x="789" y="545"  fill="rgb(132 198 32)">v</text><text x="792" y="545"  fill="rgb(132 199 26)">a</text><text x="795" y="545"  fill="rgb(134 197 32)">l</text><text x="798" y="545"  fill="rgb(133 198 31)">i</text><text x="801" y="545"  fill="rgb(133 198 32)">d</text><text x="804" y="545"  fill="rgb(132 198 31)">a</text><text x="807" y="545"  fill="rgb(133 198 32)">teNOT(value: any): void { if (typeo</text><text x="912" y="545"  fill="rgb(132 197 31)">f</text><text x="915" y="545"  fill="rgb(133 197 32)"> v</text><text x="921" y="545"  fill="rgb(132 198 31)">a</text><text x="924" y="545"  fill="rgb(132 198 32)">l</text><text x="927" y="545"  fill="rgb(133 197 32)">u</text><text x="930" y="545"  fill="rgb(134 197 31)">e</text><text x="933" y="545"  fill="rgb(132 197 30)"> </text><text x="936" y="545"  fill="rgb(134 197 36)">!</text><text x="939" y="545"  fill="rgb(127 197 21)">=</text><text x="942" y="545"  fill="rgb(113 187 0)">=</text><text x="945" y="545"  fill="rgb(140 192 37)"> </text><text x="948" y="545"  fill="rgb(226 234 213)">&quot;</text><text x="951" y="545"  fill="rgb(255 255 255)">o</text><text x="954" y="545"  fill="rgb(251 247 255)">b</text><text x="957" y="545"  fill="rgb(245 245 245)">j</text><text x="960" y="545"  fill="rgb(246 246 246)">ect&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).len</text><text x="0" y="550"  fill="rgb(246 246 246)">gth !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; le</text><text x="570" y="550"  fill="rgb(246 246 245)">t</text><text x="573" y="550"  fill="rgb(245 245 246)"> </text><text x="576" y="550"  fill="rgb(245 248 255)">s</text><text x="579" y="550"  fill="rgb(246 251 255)">f</text><text x="582" y="550"  fill="rgb(250 230 151)">i</text><text x="585" y="550"  fill="rgb(251 195 0)">e</text><text x="588" y="550"  fill="rgb(254 192 0)">l</text><text x="591" y="550"  fill="rgb(253 199 0)">d</text><text x="594" y="550"  fill="rgb(249 202 4)">:</text><text x="597" y="550"  fill="rgb(253 198 0)"> </text><text x="600" y="550"  fill="rgb(254 196 0)">s</text><text x="603" y="550"  fill="rgb(254 199 0)">t</text><text x="606" y="550"  fill="rgb(255 197 0)">r</text><text x="609" y="550"  fill="rgb(255 199 0)">i</text><text x="612" y="550"  fill="rgb(255 198 0)">n</text><text x="615" y="550"  fill="rgb(255 199 0)">g = s</text><text x="630" y="550"  fill="rgb(255 198 0)">k</text><text x="633" y="550"  fill="rgb(255 199 0)">ey[1]</text><text x="648" y="550"  fill="rgb(255 198 1)">;</text><text x="651" y="550"  fill="rgb(254 199 0)"> </text><text x="654" y="550"  fill="rgb(255 198 1)">l</text><text x="657" y="550"  fill="rgb(253 201 0)">e</text><text x="660" y="550"  fill="rgb(250 203 0)">t</text><text x="663" y="550"  fill="rgb(252 201 2)"> </text><text x="666" y="550"  fill="rgb(254 195 3)">s</text><text x="669" y="550"  fill="rgb(254 196 0)">t</text><text x="672" y="550"  fill="rgb(253 196 2)">r</text><text x="675" y="550"  fill="rgb(247 226 127)">:</text><text x="678" y="550"  fill="rgb(246 254 255)"> </text><text x="681" y="550"  fill="rgb(245 248 255)">a</text><text x="684" y="550"  fill="rgb(246 245 245)">n</text><text x="687" y="550"  fill="rgb(246 246 245)">y</text><text x="690" y="550"  fill="rgb(246 246 246)"> = Object.values(value)[0]; </text><text x="774" y="550"  fill="rgb(246 245 246)">i</text><text x="777" y="550"  fill="rgb(245 247 239)">f</text><text x="780" y="550"  fill="rgb(177 212 134)"> </text><text x="783" y="550"  fill="rgb(125 196 1)">(</text><text x="786" y="550"  fill="rgb(133 198 20)">t</text><text x="789" y="550"  fill="rgb(131 198 37)">y</text><text x="792" y="550"  fill="rgb(133 199 32)">p</text><text x="795" y="550"  fill="rgb(135 196 32)">e</text><text x="798" y="550"  fill="rgb(133 197 31)">o</text><text x="801" y="550"  fill="rgb(133 198 31)">f</text><text x="804" y="550"  fill="rgb(133 196 33)"> </text><text x="807" y="550"  fill="rgb(133 198 32)">str !== &quot;string&quot;) { throw new Insigh</text><text x="915" y="550"  fill="rgb(132 198 32)">tE</text><text x="921" y="550"  fill="rgb(133 197 32)">r</text><text x="924" y="550"  fill="rgb(133 197 31)">r</text><text x="927" y="550"  fill="rgb(133 198 32)">o</text><text x="930" y="550"  fill="rgb(132 198 32)">r</text><text x="933" y="550"  fill="rgb(131 199 31)">(</text><text x="936" y="550"  fill="rgb(135 198 26)">)</text><text x="939" y="550"  fill="rgb(136 198 34)">;</text><text x="942" y="550"  fill="rgb(127 202 33)"> </text><text x="945" y="550"  fill="rgb(120 201 6)">}</text><text x="948" y="550"  fill="rgb(110 187 0)"> </text><text x="951" y="550"  fill="rgb(164 203 92)">e</text><text x="954" y="550"  fill="rgb(245 245 244)">l</text><text x="957" y="550"  fill="rgb(255 252 255)">s</text><text x="960" y="550"  fill="rgb(246 246 247)">e</text><text x="963" y="550"  fill="rgb(245 245 245)"> </text><text x="966" y="550"  fill="rgb(246 246 246)">{ if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { i</text><text x="0" y="555"  fill="rgb(246 246 246)">f (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new Insi</text><text x="567" y="555"  fill="rgb(246 246 245)">g</text><text x="570" y="555"  fill="rgb(245 245 247)">h</text><text x="573" y="555"  fill="rgb(245 251 255)">t</text><text x="576" y="555"  fill="rgb(247 246 238)">E</text><text x="579" y="555"  fill="rgb(246 209 45)">r</text><text x="582" y="555"  fill="rgb(253 194 0)">r</text><text x="585" y="555"  fill="rgb(253 199 0)">o</text><text x="588" y="555"  fill="rgb(254 198 0)">r</text><text x="591" y="555"  fill="rgb(254 199 0)">(</text><text x="594" y="555"  fill="rgb(254 197 0)">)</text><text x="597" y="555"  fill="rgb(253 201 0)">;</text><text x="600" y="555"  fill="rgb(252 202 0)"> </text><text x="603" y="555"  fill="rgb(254 199 0)">}</text><text x="606" y="555"  fill="rgb(254 200 0)"> </text><text x="609" y="555"  fill="rgb(255 199 0)">else { let id</text><text x="648" y="555"  fill="rgb(255 198 0)">s</text><text x="651" y="555"  fill="rgb(253 198 0)">t</text><text x="654" y="555"  fill="rgb(255 196 0)">r</text><text x="657" y="555"  fill="rgb(254 200 1)">i</text><text x="660" y="555"  fill="rgb(255 201 1)">n</text><text x="663" y="555"  fill="rgb(255 193 4)">g</text><text x="666" y="555"  fill="rgb(253 195 0)">:</text><text x="669" y="555"  fill="rgb(243 205 36)"> </text><text x="672" y="555"  fill="rgb(247 238 213)">s</text><text x="675" y="555"  fill="rgb(246 252 255)">t</text><text x="678" y="555"  fill="rgb(245 245 248)">r</text><text x="681" y="555"  fill="rgb(245 246 245)">i</text><text x="684" y="555"  fill="rgb(246 246 245)">n</text><text x="687" y="555"  fill="rgb(246 246 246)">g = mkey[0]; let mfield: stri</text><text x="774" y="555"  fill="rgb(245 245 245)">n</text><text x="777" y="555"  fill="rgb(250 248 253)">g</text><text x="780" y="555"  fill="rgb(199 223 174)"> </text><text x="783" y="555"  fill="rgb(119 196 0)">=</text><text x="786" y="555"  fill="rgb(136 198 31)"> </text><text x="789" y="555"  fill="rgb(133 199 29)">m</text><text x="792" y="555"  fill="rgb(132 200 25)">k</text><text x="795" y="555"  fill="rgb(134 197 31)">e</text><text x="798" y="555"  fill="rgb(133 198 33)">y</text><text x="801" y="555"  fill="rgb(132 198 33)">[</text><text x="804" y="555"  fill="rgb(132 196 30)">1</text><text x="807" y="555"  fill="rgb(133 198 32)">]; let</text><text x="825" y="555"  fill="rgb(133 198 31)"> </text><text x="828" y="555"  fill="rgb(133 198 32)">num: any = Object.values(value)[0]</text><text x="930" y="555"  fill="rgb(132 197 31)">;</text><text x="933" y="555"  fill="rgb(133 196 30)"> </text><text x="936" y="555"  fill="rgb(131 198 31)">i</text><text x="939" y="555"  fill="rgb(130 200 29)">f</text><text x="942" y="555"  fill="rgb(132 198 27)"> </text><text x="945" y="555"  fill="rgb(134 198 33)">(</text><text x="948" y="555"  fill="rgb(132 198 37)">(</text><text x="951" y="555"  fill="rgb(120 193 0)">t</text><text x="954" y="555"  fill="rgb(117 192 0)">y</text><text x="957" y="555"  fill="rgb(211 228 185)">p</text><text x="960" y="555"  fill="rgb(255 252 255)">e</text><text x="963" y="555"  fill="rgb(251 248 254)">o</text><text x="966" y="555"  fill="rgb(245 245 245)">f</text><text x="969" y="555"  fill="rgb(246 246 246)"> num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(valu</text><text x="0" y="560"  fill="rgb(246 246 246)">e) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this</text><text x="561" y="560"  fill="rgb(246 246 245)">.</text><text x="564" y="560"  fill="rgb(246 245 245)">i</text><text x="567" y="560"  fill="rgb(245 247 253)">d</text><text x="570" y="560"  fill="rgb(246 255 255)">I</text><text x="573" y="560"  fill="rgb(248 232 190)">n</text><text x="576" y="560"  fill="rgb(251 193 11)">Q</text><text x="579" y="560"  fill="rgb(255 192 0)">u</text><text x="582" y="560"  fill="rgb(254 198 0)">e</text><text x="585" y="560"  fill="rgb(254 198 1)">r</text><text x="588" y="560"  fill="rgb(254 198 0)">y.</text><text x="594" y="560"  fill="rgb(254 200 1)">l</text><text x="597" y="560"  fill="rgb(254 199 0)">e</text><text x="600" y="560"  fill="rgb(255 198 0)">n</text><text x="603" y="560"  fill="rgb(254 199 0)">g</text><text x="606" y="560"  fill="rgb(255 198 0)">t</text><text x="609" y="560"  fill="rgb(255 199 0)">h</text><text x="612" y="560"  fill="rgb(254 199 0)"> </text><text x="615" y="560"  fill="rgb(255 199 0)">=== 0) { </text><text x="642" y="560"  fill="rgb(254 199 0)">f</text><text x="645" y="560"  fill="rgb(255 199 0)">o</text><text x="648" y="560"  fill="rgb(255 198 0)">r</text><text x="651" y="560"  fill="rgb(254 198 0)"> </text><text x="654" y="560"  fill="rgb(252 200 0)">(</text><text x="657" y="560"  fill="rgb(251 201 0)">l</text><text x="660" y="560"  fill="rgb(253 201 0)">e</text><text x="663" y="560"  fill="rgb(253 194 0)">t</text><text x="666" y="560"  fill="rgb(250 203 59)"> </text><text x="669" y="560"  fill="rgb(246 248 252)">i</text><text x="672" y="560"  fill="rgb(245 249 255)">n</text><text x="675" y="560"  fill="rgb(245 245 246)">s</text><text x="678" y="560"  fill="rgb(246 246 245)">i</text><text x="681" y="560"  fill="rgb(246 246 246)">ghtDataset of this.allInsightData</text><text x="780" y="560"  fill="rgb(249 250 246)">s</text><text x="783" y="560"  fill="rgb(139 197 66)">e</text><text x="786" y="560"  fill="rgb(122 196 0)">t</text><text x="789" y="560"  fill="rgb(136 198 30)">)</text><text x="792" y="560"  fill="rgb(133 198 31)"> </text><text x="795" y="560"  fill="rgb(133 197 36)">{</text><text x="798" y="560"  fill="rgb(132 197 31)"> </text><text x="801" y="560"  fill="rgb(134 198 31)">i</text><text x="804" y="560"  fill="rgb(133 199 31)">f</text><text x="807" y="560"  fill="rgb(133 197 32)"> </text><text x="810" y="560"  fill="rgb(133 198 32)">(</text><text x="813" y="560"  fill="rgb(133 197 32)">in</text><text x="819" y="560"  fill="rgb(133 198 31)">si</text><text x="825" y="560"  fill="rgb(133 197 32)">gh</text><text x="831" y="560"  fill="rgb(133 198 31)">t</text><text x="834" y="560"  fill="rgb(133 198 32)">D</text><text x="837" y="560"  fill="rgb(133 198 31)">a</text><text x="840" y="560"  fill="rgb(133 198 30)">t</text><text x="843" y="560"  fill="rgb(133 198 32)">aset.id === idstring) { this.</text><text x="930" y="560"  fill="rgb(132 197 31)">i</text><text x="933" y="560"  fill="rgb(132 198 32)">d</text><text x="936" y="560"  fill="rgb(132 198 31)">I</text><text x="939" y="560"  fill="rgb(133 196 34)">n</text><text x="942" y="560"  fill="rgb(133 198 29)">Q</text><text x="945" y="560"  fill="rgb(133 197 30)">u</text><text x="948" y="560"  fill="rgb(133 197 31)">e</text><text x="951" y="560"  fill="rgb(132 198 35)">r</text><text x="954" y="560"  fill="rgb(128 198 21)">y</text><text x="957" y="560"  fill="rgb(112 188 0)">.</text><text x="960" y="560"  fill="rgb(155 203 59)">p</text><text x="963" y="560"  fill="rgb(247 245 255)">u</text><text x="966" y="560"  fill="rgb(255 250 255)">s</text><text x="969" y="560"  fill="rgb(245 245 245)">h</text><text x="972" y="560"  fill="rgb(245 246 245)">(</text><text x="975" y="560"  fill="rgb(246 246 246)">idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.s</text><text x="0" y="565"  fill="rgb(246 246 246)">fields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {In</text><text x="558" y="565"  fill="rgb(246 246 245)">s</text><text x="561" y="565"  fill="rgb(245 245 246)">i</text><text x="564" y="565"  fill="rgb(245 249 255)">g</text><text x="567" y="565"  fill="rgb(247 248 255)">h</text><text x="570" y="565"  fill="rgb(249 204 70)">t</text><text x="573" y="565"  fill="rgb(253 193 0)">D</text><text x="576" y="565"  fill="rgb(251 198 0)">a</text><text x="579" y="565"  fill="rgb(253 199 3)">t</text><text x="582" y="565"  fill="rgb(252 200 0)">a</text><text x="585" y="565"  fill="rgb(255 198 0)">se</text><text x="591" y="565"  fill="rgb(254 199 0)">t</text><text x="594" y="565"  fill="rgb(255 198 0)">, </text><text x="600" y="565"  fill="rgb(255 199 0)">I</text><text x="603" y="565"  fill="rgb(255 198 0)">n</text><text x="606" y="565"  fill="rgb(255 199 0)">si</text><text x="612" y="565"  fill="rgb(255 198 0)">g</text><text x="615" y="565"  fill="rgb(255 199 0)">htDat</text><text x="630" y="565"  fill="rgb(255 198 0)">a</text><text x="633" y="565"  fill="rgb(255 199 0)">se</text><text x="639" y="565"  fill="rgb(255 197 0)">t</text><text x="642" y="565"  fill="rgb(254 199 0)">K</text><text x="645" y="565"  fill="rgb(255 199 0)">i</text><text x="648" y="565"  fill="rgb(254 199 0)">n</text><text x="651" y="565"  fill="rgb(255 198 0)">d</text><text x="654" y="565"  fill="rgb(252 201 2)">,</text><text x="657" y="565"  fill="rgb(254 198 1)"> </text><text x="660" y="565"  fill="rgb(252 194 0)">I</text><text x="663" y="565"  fill="rgb(250 218 93)">n</text><text x="666" y="565"  fill="rgb(246 253 255)">s</text><text x="669" y="565"  fill="rgb(246 247 254)">i</text><text x="672" y="565"  fill="rgb(246 245 245)">g</text><text x="675" y="565"  fill="rgb(246 246 246)">htError} from &quot;./IInsightFacade&quot;; </text><text x="777" y="565"  fill="rgb(245 245 245)">e</text><text x="780" y="565"  fill="rgb(249 247 252)">x</text><text x="783" y="565"  fill="rgb(246 244 246)">p</text><text x="786" y="565"  fill="rgb(125 189 7)">o</text><text x="789" y="565"  fill="rgb(117 196 11)">r</text><text x="792" y="565"  fill="rgb(133 200 23)">t</text><text x="795" y="565"  fill="rgb(134 197 29)"> </text><text x="798" y="565"  fill="rgb(132 198 31)">d</text><text x="801" y="565"  fill="rgb(132 198 29)">e</text><text x="804" y="565"  fill="rgb(132 197 32)">f</text><text x="807" y="565"  fill="rgb(133 198 31)">a</text><text x="810" y="565"  fill="rgb(133 197 32)">u</text><text x="813" y="565"  fill="rgb(133 198 31)">lt</text><text x="819" y="565"  fill="rgb(133 197 32)"> </text><text x="822" y="565"  fill="rgb(133 198 32)">cl</text><text x="828" y="565"  fill="rgb(133 198 31)">a</text><text x="831" y="565"  fill="rgb(133 198 32)">s</text><text x="834" y="565"  fill="rgb(133 197 32)">s Q</text><text x="843" y="565"  fill="rgb(133 198 32)">ueryValidator { private readonl</text><text x="936" y="565"  fill="rgb(133 197 32)">y</text><text x="939" y="565"  fill="rgb(133 198 31)"> </text><text x="942" y="565"  fill="rgb(133 197 32)">c</text><text x="945" y="565"  fill="rgb(132 198 32)">o</text><text x="948" y="565"  fill="rgb(135 198 32)">u</text><text x="951" y="565"  fill="rgb(132 197 32)">r</text><text x="954" y="565"  fill="rgb(132 196 39)">s</text><text x="957" y="565"  fill="rgb(129 202 23)">e</text><text x="960" y="565"  fill="rgb(120 198 0)">m</text><text x="963" y="565"  fill="rgb(117 188 0)">f</text><text x="966" y="565"  fill="rgb(223 233 204)">i</text><text x="969" y="565"  fill="rgb(255 253 255)">e</text><text x="972" y="565"  fill="rgb(248 246 249)">l</text><text x="975" y="565"  fill="rgb(245 245 245)">d</text><text x="978" y="565"  fill="rgb(246 246 246)">s: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] =</text><text x="0" y="570"  fill="rgb(246 246 246)"> [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[</text><text x="555" y="570"  fill="rgb(246 246 245)">]</text><text x="558" y="570"  fill="rgb(246 245 246)"> </text><text x="561" y="570"  fill="rgb(245 251 255)">=</text><text x="564" y="570"  fill="rgb(248 241 206)"> </text><text x="567" y="570"  fill="rgb(250 202 0)">[</text><text x="570" y="570"  fill="rgb(248 197 0)">&quot;</text><text x="573" y="570"  fill="rgb(252 199 2)">M</text><text x="576" y="570"  fill="rgb(252 202 1)">A</text><text x="579" y="570"  fill="rgb(254 197 0)">X</text><text x="582" y="570"  fill="rgb(254 199 0)">&quot;</text><text x="585" y="570"  fill="rgb(255 199 2)">,</text><text x="588" y="570"  fill="rgb(255 198 1)"> </text><text x="591" y="570"  fill="rgb(254 199 0)">&quot;</text><text x="594" y="570"  fill="rgb(255 199 0)">MIN&quot;, </text><text x="612" y="570"  fill="rgb(255 198 0)">&quot;</text><text x="615" y="570"  fill="rgb(255 199 0)">AVG&quot;,</text><text x="630" y="570"  fill="rgb(255 197 0)"> </text><text x="633" y="570"  fill="rgb(255 199 0)">&quot;S</text><text x="639" y="570"  fill="rgb(255 197 0)">UM</text><text x="645" y="570"  fill="rgb(255 199 0)">&quot;</text><text x="648" y="570"  fill="rgb(254 198 0)">];</text><text x="654" y="570"  fill="rgb(254 199 1)"> </text><text x="657" y="570"  fill="rgb(251 194 0)">p</text><text x="660" y="570"  fill="rgb(251 217 129)">r</text><text x="663" y="570"  fill="rgb(245 252 255)">i</text><text x="666" y="570"  fill="rgb(245 246 250)">v</text><text x="669" y="570"  fill="rgb(246 245 245)">a</text><text x="672" y="570"  fill="rgb(246 246 246)">te readonly mstoken: string[] = [&quot;CO</text><text x="780" y="570"  fill="rgb(245 245 245)">U</text><text x="783" y="570"  fill="rgb(251 248 254)">N</text><text x="786" y="570"  fill="rgb(234 238 230)">T</text><text x="789" y="570"  fill="rgb(139 195 52)">&quot;</text><text x="792" y="570"  fill="rgb(122 194 5)">]</text><text x="795" y="570"  fill="rgb(133 200 35)">;</text><text x="798" y="570"  fill="rgb(134 197 33)"> </text><text x="801" y="570"  fill="rgb(131 198 30)">p</text><text x="804" y="570"  fill="rgb(133 198 31)">r</text><text x="807" y="570"  fill="rgb(132 197 34)">i</text><text x="810" y="570"  fill="rgb(132 198 32)">v</text><text x="813" y="570"  fill="rgb(132 198 31)">a</text><text x="816" y="570"  fill="rgb(132 198 32)">t</text><text x="819" y="570"  fill="rgb(133 198 32)">e </text><text x="825" y="570"  fill="rgb(133 198 30)">i</text><text x="828" y="570"  fill="rgb(133 197 33)">d</text><text x="831" y="570"  fill="rgb(133 197 32)">I</text><text x="834" y="570"  fill="rgb(133 198 30)">n</text><text x="837" y="570"  fill="rgb(133 198 31)">Q</text><text x="840" y="570"  fill="rgb(133 198 32)">uery: string[]; // make sure the</text><text x="936" y="570"  fill="rgb(133 198 31)"> </text><text x="939" y="570"  fill="rgb(132 198 32)">q</text><text x="942" y="570"  fill="rgb(133 198 32)">u</text><text x="945" y="570"  fill="rgb(133 197 32)">e</text><text x="948" y="570"  fill="rgb(131 198 31)">r</text><text x="951" y="570"  fill="rgb(132 197 31)">y</text><text x="954" y="570"  fill="rgb(132 199 30)"> </text><text x="957" y="570"  fill="rgb(132 196 42)">o</text><text x="960" y="570"  fill="rgb(132 199 35)">n</text><text x="963" y="570"  fill="rgb(126 200 28)">l</text><text x="966" y="570"  fill="rgb(121 188 0)">y</text><text x="969" y="570"  fill="rgb(191 219 149)"> </text><text x="972" y="570"  fill="rgb(255 251 255)">h</text><text x="975" y="570"  fill="rgb(248 246 251)">a</text><text x="978" y="570"  fill="rgb(245 245 245)">s</text><text x="981" y="570"  fill="rgb(246 246 246)"> one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a trans</text><text x="0" y="575"  fill="rgb(246 246 246)">formation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.</text><text x="552" y="575"  fill="rgb(246 245 245)">k</text><text x="555" y="575"  fill="rgb(245 246 249)">e</text><text x="558" y="575"  fill="rgb(245 252 255)">y</text><text x="561" y="575"  fill="rgb(250 229 136)">s</text><text x="564" y="575"  fill="rgb(251 194 1)">I</text><text x="567" y="575"  fill="rgb(252 198 0)">n</text><text x="570" y="575"  fill="rgb(253 199 1)">Q</text><text x="573" y="575"  fill="rgb(254 195 0)">u</text><text x="576" y="575"  fill="rgb(253 200 0)">e</text><text x="579" y="575"  fill="rgb(248 205 1)">r</text><text x="582" y="575"  fill="rgb(253 198 2)">y</text><text x="585" y="575"  fill="rgb(255 198 0)"> </text><text x="588" y="575"  fill="rgb(255 199 0)">=</text><text x="591" y="575"  fill="rgb(255 198 0)"> </text><text x="594" y="575"  fill="rgb(253 199 0)">[</text><text x="597" y="575"  fill="rgb(255 199 0)">]; this.trans</text><text x="636" y="575"  fill="rgb(255 197 1)">f</text><text x="639" y="575"  fill="rgb(254 199 0)">o</text><text x="642" y="575"  fill="rgb(253 201 0)">r</text><text x="645" y="575"  fill="rgb(254 198 0)">m</text><text x="648" y="575"  fill="rgb(252 200 0)">at</text><text x="654" y="575"  fill="rgb(253 189 0)">i</text><text x="657" y="575"  fill="rgb(245 223 112)">o</text><text x="660" y="575"  fill="rgb(244 252 255)">n</text><text x="663" y="575"  fill="rgb(245 246 248)">K</text><text x="666" y="575"  fill="rgb(246 245 245)">e</text><text x="669" y="575"  fill="rgb(246 246 246)">y = []; this.allInsightDataset = insi</text><text x="780" y="575"  fill="rgb(246 246 245)">g</text><text x="783" y="575"  fill="rgb(245 245 245)">h</text><text x="786" y="575"  fill="rgb(254 250 255)">t</text><text x="789" y="575"  fill="rgb(244 243 240)">D</text><text x="792" y="575"  fill="rgb(138 199 42)">a</text><text x="795" y="575"  fill="rgb(103 188 0)">t</text><text x="798" y="575"  fill="rgb(122 197 21)">a</text><text x="801" y="575"  fill="rgb(133 198 37)">s</text><text x="804" y="575"  fill="rgb(135 196 33)">e</text><text x="807" y="575"  fill="rgb(135 198 24)">t</text><text x="810" y="575"  fill="rgb(133 199 28)">s</text><text x="813" y="575"  fill="rgb(134 196 36)">;</text><text x="816" y="575"  fill="rgb(133 197 35)"> </text><text x="819" y="575"  fill="rgb(133 199 31)">}</text><text x="822" y="575"  fill="rgb(133 197 34)"> </text><text x="825" y="575"  fill="rgb(132 196 37)">p</text><text x="828" y="575"  fill="rgb(133 198 30)">ub</text><text x="834" y="575"  fill="rgb(133 197 34)">l</text><text x="837" y="575"  fill="rgb(133 198 31)">i</text><text x="840" y="575"  fill="rgb(133 198 33)">c</text><text x="843" y="575"  fill="rgb(133 198 32)"> validate(q: any): void { if (!q ||</text><text x="948" y="575"  fill="rgb(131 197 31)"> </text><text x="951" y="575"  fill="rgb(133 198 32)">!</text><text x="954" y="575"  fill="rgb(131 197 31)">q</text><text x="957" y="575"  fill="rgb(133 195 27)">.</text><text x="960" y="575"  fill="rgb(135 195 31)">W</text><text x="963" y="575"  fill="rgb(131 199 22)">H</text><text x="966" y="575"  fill="rgb(128 201 28)">E</text><text x="969" y="575"  fill="rgb(115 188 0)">R</text><text x="972" y="575"  fill="rgb(155 200 53)">E</text><text x="975" y="575"  fill="rgb(255 255 255)"> </text><text x="978" y="575"  fill="rgb(252 248 255)">|</text><text x="981" y="575"  fill="rgb(245 245 245)">|</text><text x="984" y="575"  fill="rgb(246 246 246)"> !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this</text><text x="0" y="580"  fill="rgb(246 246 246)">.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { </text><text x="549" y="580"  fill="rgb(246 245 245)">i</text><text x="552" y="580"  fill="rgb(245 246 254)">f</text><text x="555" y="580"  fill="rgb(247 251 255)"> </text><text x="558" y="580"  fill="rgb(250 221 108)">(</text><text x="561" y="580"  fill="rgb(251 189 0)">t</text><text x="564" y="580"  fill="rgb(255 197 0)">y</text><text x="567" y="580"  fill="rgb(255 198 0)">p</text><text x="570" y="580"  fill="rgb(254 198 0)">e</text><text x="573" y="580"  fill="rgb(255 199 0)">o</text><text x="576" y="580"  fill="rgb(255 197 0)">f </text><text x="582" y="580"  fill="rgb(255 199 1)">q</text><text x="585" y="580"  fill="rgb(255 199 0)">.GROUP === &quot;und</text><text x="630" y="580"  fill="rgb(255 199 1)">e</text><text x="633" y="580"  fill="rgb(255 198 0)">f</text><text x="636" y="580"  fill="rgb(253 200 0)">i</text><text x="639" y="580"  fill="rgb(253 200 1)">n</text><text x="642" y="580"  fill="rgb(253 201 1)">e</text><text x="645" y="580"  fill="rgb(253 199 0)">d</text><text x="648" y="580"  fill="rgb(252 199 0)">&quot;</text><text x="651" y="580"  fill="rgb(251 196 0)"> </text><text x="654" y="580"  fill="rgb(249 223 142)">|</text><text x="657" y="580"  fill="rgb(246 251 255)">|</text><text x="660" y="580"  fill="rgb(246 246 248)"> </text><text x="663" y="580"  fill="rgb(246 246 245)">t</text><text x="666" y="580"  fill="rgb(246 246 246)">ypeof q.APPLY === &quot;undefined&quot; || Object.</text><text x="786" y="580"  fill="rgb(245 245 245)">k</text><text x="789" y="580"  fill="rgb(251 248 255)">e</text><text x="792" y="580"  fill="rgb(255 254 255)">y</text><text x="795" y="580"  fill="rgb(214 226 191)">s</text><text x="798" y="580"  fill="rgb(144 196 24)">(</text><text x="801" y="580"  fill="rgb(108 186 0)">q</text><text x="804" y="580"  fill="rgb(112 196 0)">)</text><text x="807" y="580"  fill="rgb(124 198 34)">.</text><text x="810" y="580"  fill="rgb(137 195 38)">l</text><text x="813" y="580"  fill="rgb(133 199 27)">e</text><text x="816" y="580"  fill="rgb(133 200 27)">n</text><text x="819" y="580"  fill="rgb(131 199 28)">g</text><text x="822" y="580"  fill="rgb(132 199 29)">t</text><text x="825" y="580"  fill="rgb(134 198 28)">h</text><text x="828" y="580"  fill="rgb(131 197 29)"> </text><text x="831" y="580"  fill="rgb(132 198 33)">!</text><text x="834" y="580"  fill="rgb(132 197 31)">=</text><text x="837" y="580"  fill="rgb(133 198 30)">=</text><text x="840" y="580"  fill="rgb(133 196 30)"> </text><text x="843" y="580"  fill="rgb(133 198 32)">2) { throw new InsightError(); } th</text><text x="948" y="580"  fill="rgb(133 197 31)">i</text><text x="951" y="580"  fill="rgb(132 197 32)">s</text><text x="954" y="580"  fill="rgb(132 198 32)">.v</text><text x="960" y="580"  fill="rgb(133 198 32)">a</text><text x="963" y="580"  fill="rgb(133 198 34)">l</text><text x="966" y="580"  fill="rgb(134 197 34)">i</text><text x="969" y="580"  fill="rgb(133 199 36)">d</text><text x="972" y="580"  fill="rgb(116 192 0)">a</text><text x="975" y="580"  fill="rgb(142 196 46)">t</text><text x="978" y="580"  fill="rgb(242 244 244)">e</text><text x="981" y="580"  fill="rgb(254 250 255)">G</text><text x="984" y="580"  fill="rgb(245 245 245)">R</text><text x="987" y="580"  fill="rgb(246 246 245)">O</text><text x="990" y="580"  fill="rgb(246 246 246)">UP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and sho</text><text x="0" y="585"  fill="rgb(246 246 246)">uld has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validate</text><text x="546" y="585"  fill="rgb(246 245 245)">K</text><text x="549" y="585"  fill="rgb(245 247 255)">e</text><text x="552" y="585"  fill="rgb(247 251 254)">y</text><text x="555" y="585"  fill="rgb(247 214 39)">(</text><text x="558" y="585"  fill="rgb(252 193 0)">k</text><text x="561" y="585"  fill="rgb(252 199 2)">e</text><text x="564" y="585"  fill="rgb(254 197 2)">y</text><text x="567" y="585"  fill="rgb(255 198 1)">:</text><text x="570" y="585"  fill="rgb(255 199 0)"> string): void { let</text><text x="630" y="585"  fill="rgb(254 199 0)"> </text><text x="633" y="585"  fill="rgb(255 199 0)">s</text><text x="636" y="585"  fill="rgb(252 198 1)">p</text><text x="639" y="585"  fill="rgb(254 201 1)">l</text><text x="642" y="585"  fill="rgb(253 194 0)">i</text><text x="645" y="585"  fill="rgb(251 202 1)">t</text><text x="648" y="585"  fill="rgb(252 194 0)">t</text><text x="651" y="585"  fill="rgb(251 210 82)">e</text><text x="654" y="585"  fill="rgb(246 252 255)">d</text><text x="657" y="585"  fill="rgb(245 246 249)">K</text><text x="660" y="585"  fill="rgb(246 245 245)">e</text><text x="663" y="585"  fill="rgb(246 246 246)">y: string[] = key.split(&quot;_&quot;); if (splitted</text><text x="789" y="585"  fill="rgb(245 245 245)">K</text><text x="792" y="585"  fill="rgb(246 246 247)">e</text><text x="795" y="585"  fill="rgb(255 251 255)">y.</text><text x="801" y="585"  fill="rgb(229 239 200)">l</text><text x="804" y="585"  fill="rgb(173 211 109)">e</text><text x="807" y="585"  fill="rgb(130 194 5)">n</text><text x="810" y="585"  fill="rgb(111 192 0)">g</text><text x="813" y="585"  fill="rgb(117 193 8)">t</text><text x="816" y="585"  fill="rgb(128 196 30)">h</text><text x="819" y="585"  fill="rgb(131 198 40)"> </text><text x="822" y="585"  fill="rgb(131 200 30)">!</text><text x="825" y="585"  fill="rgb(130 200 23)">=</text><text x="828" y="585"  fill="rgb(134 196 39)">=</text><text x="831" y="585"  fill="rgb(135 196 35)"> </text><text x="834" y="585"  fill="rgb(132 199 31)">2</text><text x="837" y="585"  fill="rgb(133 197 31)">)</text><text x="840" y="585"  fill="rgb(133 199 31)"> </text><text x="843" y="585"  fill="rgb(133 198 32)">{</text><text x="846" y="585"  fill="rgb(133 197 32)"> t</text><text x="852" y="585"  fill="rgb(133 198 32)">hrow new InsightError(); } if (!(</text><text x="951" y="585"  fill="rgb(133 197 32)">t</text><text x="954" y="585"  fill="rgb(133 198 32)">hi</text><text x="960" y="585"  fill="rgb(132 198 32)">s</text><text x="963" y="585"  fill="rgb(133 197 31)">.</text><text x="966" y="585"  fill="rgb(131 197 30)">v</text><text x="969" y="585"  fill="rgb(132 197 31)">a</text><text x="972" y="585"  fill="rgb(136 198 32)">l</text><text x="975" y="585"  fill="rgb(121 194 4)">i</text><text x="978" y="585"  fill="rgb(123 198 4)">d</text><text x="981" y="585"  fill="rgb(232 239 227)">a</text><text x="984" y="585"  fill="rgb(254 250 255)">t</text><text x="987" y="585"  fill="rgb(245 245 245)">e</text><text x="990" y="585"  fill="rgb(246 246 246)">Idstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { i</text><text x="0" y="590"  fill="rgb(246 246 246)">f (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.k</text><text x="543" y="590"  fill="rgb(246 245 245)">e</text><text x="546" y="590"  fill="rgb(245 248 255)">y</text><text x="549" y="590"  fill="rgb(245 251 253)">s</text><text x="552" y="590"  fill="rgb(245 211 42)">(</text><text x="555" y="590"  fill="rgb(253 189 0)">a</text><text x="558" y="590"  fill="rgb(251 201 1)">p</text><text x="561" y="590"  fill="rgb(253 204 2)">p</text><text x="564" y="590"  fill="rgb(253 199 0)">l</text><text x="567" y="590"  fill="rgb(255 199 0)">yr</text><text x="573" y="590"  fill="rgb(255 197 0)">u</text><text x="576" y="590"  fill="rgb(255 199 0)">le).length &gt; 1) { </text><text x="630" y="590"  fill="rgb(255 198 0)">t</text><text x="633" y="590"  fill="rgb(255 197 2)">h</text><text x="636" y="590"  fill="rgb(255 199 0)">r</text><text x="639" y="590"  fill="rgb(252 200 6)">o</text><text x="642" y="590"  fill="rgb(252 202 1)">w</text><text x="645" y="590"  fill="rgb(254 193 0)"> </text><text x="648" y="590"  fill="rgb(246 206 13)">n</text><text x="651" y="590"  fill="rgb(246 249 254)">e</text><text x="654" y="590"  fill="rgb(245 246 251)">w</text><text x="657" y="590"  fill="rgb(246 245 245)"> </text><text x="660" y="590"  fill="rgb(246 246 246)">InsightError(); } let applykey: string = Obj</text><text x="792" y="590"  fill="rgb(245 245 245)">e</text><text x="795" y="590"  fill="rgb(246 246 246)">c</text><text x="798" y="590"  fill="rgb(247 246 250)">t</text><text x="801" y="590"  fill="rgb(254 249 255)">.</text><text x="804" y="590"  fill="rgb(255 254 255)">k</text><text x="807" y="590"  fill="rgb(255 248 255)">e</text><text x="810" y="590"  fill="rgb(210 230 175)">y</text><text x="813" y="590"  fill="rgb(164 209 83)">s</text><text x="816" y="590"  fill="rgb(119 185 0)">(</text><text x="819" y="590"  fill="rgb(108 188 0)">a</text><text x="822" y="590"  fill="rgb(114 193 0)">p</text><text x="825" y="590"  fill="rgb(128 197 40)">p</text><text x="828" y="590"  fill="rgb(134 198 28)">l</text><text x="831" y="590"  fill="rgb(133 198 32)">y</text><text x="834" y="590"  fill="rgb(133 198 34)">r</text><text x="837" y="590"  fill="rgb(133 198 31)">u</text><text x="840" y="590"  fill="rgb(132 197 31)">l</text><text x="843" y="590"  fill="rgb(133 198 31)">e</text><text x="846" y="590"  fill="rgb(132 198 31)">)</text><text x="849" y="590"  fill="rgb(133 198 31)">[</text><text x="852" y="590"  fill="rgb(133 198 32)">0</text><text x="855" y="590"  fill="rgb(133 198 31)">]</text><text x="858" y="590"  fill="rgb(132 198 31)">;</text><text x="861" y="590"  fill="rgb(133 198 32)"> let criteria = applyrule[applykey]</text><text x="966" y="590"  fill="rgb(133 199 30)">;</text><text x="969" y="590"  fill="rgb(132 197 32)"> </text><text x="972" y="590"  fill="rgb(133 197 31)">i</text><text x="975" y="590"  fill="rgb(132 199 37)">f</text><text x="978" y="590"  fill="rgb(125 195 6)"> </text><text x="981" y="590"  fill="rgb(124 193 0)">(</text><text x="984" y="590"  fill="rgb(236 243 243)">a</text><text x="987" y="590"  fill="rgb(255 250 255)">p</text><text x="990" y="590"  fill="rgb(245 245 245)">p</text><text x="993" y="590"  fill="rgb(246 246 246)">lykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(cri</text><text x="0" y="595"  fill="rgb(246 246 246)">teria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.</text><text x="540" y="595"  fill="rgb(246 245 245)">i</text><text x="543" y="595"  fill="rgb(245 247 254)">n</text><text x="546" y="595"  fill="rgb(248 245 242)">c</text><text x="549" y="595"  fill="rgb(250 202 56)">l</text><text x="552" y="595"  fill="rgb(255 191 0)">u</text><text x="555" y="595"  fill="rgb(255 200 1)">d</text><text x="558" y="595"  fill="rgb(255 199 0)">e</text><text x="561" y="595"  fill="rgb(254 199 0)">s</text><text x="564" y="595"  fill="rgb(255 198 1)">(</text><text x="567" y="595"  fill="rgb(255 199 0)">applytoken)) { throw n</text><text x="633" y="595"  fill="rgb(254 199 1)">e</text><text x="636" y="595"  fill="rgb(252 201 0)">w</text><text x="639" y="595"  fill="rgb(254 198 0)"> </text><text x="642" y="595"  fill="rgb(251 198 0)">I</text><text x="645" y="595"  fill="rgb(250 202 9)">n</text><text x="648" y="595"  fill="rgb(249 243 238)">s</text><text x="651" y="595"  fill="rgb(245 247 255)">i</text><text x="654" y="595"  fill="rgb(246 245 245)">g</text><text x="657" y="595"  fill="rgb(246 246 246)">htError(); } let key: string[] = criteria[applyt</text><text x="801" y="595"  fill="rgb(245 246 245)">o</text><text x="804" y="595"  fill="rgb(246 245 246)">k</text><text x="807" y="595"  fill="rgb(248 247 250)">e</text><text x="810" y="595"  fill="rgb(255 250 255)">n</text><text x="813" y="595"  fill="rgb(255 253 255)">]</text><text x="816" y="595"  fill="rgb(255 255 255)">.</text><text x="819" y="595"  fill="rgb(223 232 215)">s</text><text x="822" y="595"  fill="rgb(179 211 131)">p</text><text x="825" y="595"  fill="rgb(124 194 0)">l</text><text x="828" y="595"  fill="rgb(107 190 0)">i</text><text x="831" y="595"  fill="rgb(116 195 0)">t</text><text x="834" y="595"  fill="rgb(129 197 26)">(</text><text x="837" y="595"  fill="rgb(130 197 36)">&quot;</text><text x="840" y="595"  fill="rgb(134 197 36)">_</text><text x="843" y="595"  fill="rgb(133 197 34)">&quot;</text><text x="846" y="595"  fill="rgb(133 198 30)">)</text><text x="849" y="595"  fill="rgb(132 198 30)">;</text><text x="852" y="595"  fill="rgb(132 198 32)"> </text><text x="855" y="595"  fill="rgb(133 198 32)">i</text><text x="858" y="595"  fill="rgb(133 197 32)">f</text><text x="861" y="595"  fill="rgb(133 198 32)"> (</text><text x="867" y="595"  fill="rgb(132 197 31)">k</text><text x="870" y="595"  fill="rgb(133 198 32)">e</text><text x="873" y="595"  fill="rgb(133 198 31)">y</text><text x="876" y="595"  fill="rgb(133 197 32)">.</text><text x="879" y="595"  fill="rgb(133 198 32)">l</text><text x="882" y="595"  fill="rgb(133 197 32)">eng</text><text x="891" y="595"  fill="rgb(133 198 32)">t</text><text x="894" y="595"  fill="rgb(133 197 32)">h</text><text x="897" y="595"  fill="rgb(133 198 32)"> !== 2) { throw new Ins</text><text x="966" y="595"  fill="rgb(132 196 31)">i</text><text x="969" y="595"  fill="rgb(133 199 30)">g</text><text x="972" y="595"  fill="rgb(131 198 27)">h</text><text x="975" y="595"  fill="rgb(133 196 31)">t</text><text x="978" y="595"  fill="rgb(137 197 33)">E</text><text x="981" y="595"  fill="rgb(128 196 14)">r</text><text x="984" y="595"  fill="rgb(122 188 0)">r</text><text x="987" y="595"  fill="rgb(224 235 215)">o</text><text x="990" y="595"  fill="rgb(253 249 255)">r</text><text x="993" y="595"  fill="rgb(245 245 245)">(</text><text x="996" y="595"  fill="rgb(246 246 245)">)</text><text x="999" y="595"  fill="rgb(246 246 246)">; } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(a</text><text x="0" y="600"  fill="rgb(246 246 246)">pplytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(</text><text x="537" y="600"  fill="rgb(246 245 245)">q</text><text x="540" y="600"  fill="rgb(245 246 252)">:</text><text x="543" y="600"  fill="rgb(246 248 250)"> </text><text x="546" y="600"  fill="rgb(251 207 7)">a</text><text x="549" y="600"  fill="rgb(255 193 0)">n</text><text x="552" y="600"  fill="rgb(253 198 1)">y</text><text x="555" y="600"  fill="rgb(255 198 1)">)</text><text x="558" y="600"  fill="rgb(255 198 0)">: </text><text x="564" y="600"  fill="rgb(255 199 0)">void { let keys: any[] </text><text x="633" y="600"  fill="rgb(255 198 0)">=</text><text x="636" y="600"  fill="rgb(254 202 1)"> </text><text x="639" y="600"  fill="rgb(254 197 1)">O</text><text x="642" y="600"  fill="rgb(253 190 0)">b</text><text x="645" y="600"  fill="rgb(252 226 158)">j</text><text x="648" y="600"  fill="rgb(246 249 252)">e</text><text x="651" y="600"  fill="rgb(246 245 245)">c</text><text x="654" y="600"  fill="rgb(246 246 245)">t</text><text x="657" y="600"  fill="rgb(246 246 246)">.keys(q); for (let key of keys) { if (key !== &quot;CO</text><text x="804" y="600"  fill="rgb(246 246 245)">L</text><text x="807" y="600"  fill="rgb(245 245 245)">U</text><text x="810" y="600"  fill="rgb(245 246 245)">MN</text><text x="816" y="600"  fill="rgb(246 246 248)">S</text><text x="819" y="600"  fill="rgb(255 250 255)">&quot;</text><text x="822" y="600"  fill="rgb(255 252 255)"> </text><text x="825" y="600"  fill="rgb(246 247 246)">&amp;</text><text x="828" y="600"  fill="rgb(217 233 182)">&amp;</text><text x="831" y="600"  fill="rgb(167 207 103)"> </text><text x="834" y="600"  fill="rgb(121 190 0)">k</text><text x="837" y="600"  fill="rgb(118 193 0)">e</text><text x="840" y="600"  fill="rgb(117 194 1)">y</text><text x="843" y="600"  fill="rgb(131 199 34)"> </text><text x="846" y="600"  fill="rgb(134 198 36)">!</text><text x="849" y="600"  fill="rgb(133 196 34)">=</text><text x="852" y="600"  fill="rgb(131 197 31)">=</text><text x="855" y="600"  fill="rgb(132 198 31)"> </text><text x="858" y="600"  fill="rgb(133 197 32)">&quot;</text><text x="861" y="600"  fill="rgb(133 198 32)">O</text><text x="864" y="600"  fill="rgb(133 198 31)">R</text><text x="867" y="600"  fill="rgb(132 197 31)">D</text><text x="870" y="600"  fill="rgb(133 198 31)">E</text><text x="873" y="600"  fill="rgb(133 197 32)">R</text><text x="876" y="600"  fill="rgb(133 199 30)">&quot;</text><text x="879" y="600"  fill="rgb(133 198 32)">) </text><text x="885" y="600"  fill="rgb(133 198 31)">{</text><text x="888" y="600"  fill="rgb(133 198 32)"> t</text><text x="894" y="600"  fill="rgb(133 198 31)">h</text><text x="897" y="600"  fill="rgb(133 198 32)">row new InsightError();</text><text x="966" y="600"  fill="rgb(132 198 33)"> </text><text x="969" y="600"  fill="rgb(133 196 31)">}</text><text x="972" y="600"  fill="rgb(130 198 31)"> </text><text x="975" y="600"  fill="rgb(132 199 26)">}</text><text x="978" y="600"  fill="rgb(132 196 37)"> </text><text x="981" y="600"  fill="rgb(132 197 44)">t</text><text x="984" y="600"  fill="rgb(129 198 9)">h</text><text x="987" y="600"  fill="rgb(123 189 0)">i</text><text x="990" y="600"  fill="rgb(241 242 242)">s</text><text x="993" y="600"  fill="rgb(252 249 255)">.</text><text x="996" y="600"  fill="rgb(245 245 245)">v</text><text x="999" y="600"  fill="rgb(246 246 246)">alidateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let m</text><text x="0" y="605"  fill="rgb(246 246 246)">skey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQu</text><text x="534" y="605"  fill="rgb(246 245 245)">e</text><text x="537" y="605"  fill="rgb(245 247 253)">r</text><text x="540" y="605"  fill="rgb(245 252 255)">y</text><text x="543" y="605"  fill="rgb(253 202 71)">.</text><text x="546" y="605"  fill="rgb(254 193 0)">p</text><text x="549" y="605"  fill="rgb(253 202 1)">u</text><text x="552" y="605"  fill="rgb(254 201 1)">s</text><text x="555" y="605"  fill="rgb(255 198 0)">h</text><text x="558" y="605"  fill="rgb(252 199 0)">(</text><text x="561" y="605"  fill="rgb(255 199 0)">mskey); } } private val</text><text x="630" y="605"  fill="rgb(255 198 0)">i</text><text x="633" y="605"  fill="rgb(253 199 0)">d</text><text x="636" y="605"  fill="rgb(254 198 0)">a</text><text x="639" y="605"  fill="rgb(250 200 0)">t</text><text x="642" y="605"  fill="rgb(250 206 22)">e</text><text x="645" y="605"  fill="rgb(247 251 255)">O</text><text x="648" y="605"  fill="rgb(245 245 247)">r</text><text x="651" y="605"  fill="rgb(246 246 245)">d</text><text x="654" y="605"  fill="rgb(246 246 246)">er(q: any): void { if (Array.isA</text><text x="750" y="605"  fill="rgb(245 245 246)">r</text><text x="753" y="605"  fill="rgb(245 245 245)">ra</text><text x="759" y="605"  fill="rgb(247 246 245)">y</text><text x="762" y="605"  fill="rgb(249 247 246)">(</text><text x="765" y="605"  fill="rgb(250 248 246)">q</text><text x="768" y="605"  fill="rgb(250 248 247)">))</text><text x="774" y="605"  fill="rgb(250 248 246)"> </text><text x="777" y="605"  fill="rgb(249 247 246)">{</text><text x="780" y="605"  fill="rgb(247 246 246)"> </text><text x="783" y="605"  fill="rgb(245 245 245)">thr</text><text x="792" y="605"  fill="rgb(245 246 246)">o</text><text x="795" y="605"  fill="rgb(246 246 246)">w new I</text><text x="816" y="605"  fill="rgb(246 246 245)">n</text><text x="819" y="605"  fill="rgb(245 245 245)">s</text><text x="822" y="605"  fill="rgb(246 246 246)">i</text><text x="825" y="605"  fill="rgb(250 247 255)">g</text><text x="828" y="605"  fill="rgb(255 250 255)">h</text><text x="831" y="605"  fill="rgb(255 255 255)">t</text><text x="834" y="605"  fill="rgb(250 247 255)">E</text><text x="837" y="605"  fill="rgb(215 230 200)">r</text><text x="840" y="605"  fill="rgb(162 209 72)">r</text><text x="843" y="605"  fill="rgb(101 183 0)">o</text><text x="846" y="605"  fill="rgb(106 187 0)">r</text><text x="849" y="605"  fill="rgb(124 195 10)">(</text><text x="852" y="605"  fill="rgb(129 197 27)">)</text><text x="855" y="605"  fill="rgb(132 197 34)">;</text><text x="858" y="605"  fill="rgb(132 197 31)"> </text><text x="861" y="605"  fill="rgb(133 197 32)">}</text><text x="864" y="605"  fill="rgb(133 197 34)"> </text><text x="867" y="605"  fill="rgb(133 199 32)">e</text><text x="870" y="605"  fill="rgb(133 198 32)">l</text><text x="873" y="605"  fill="rgb(133 198 31)">s</text><text x="876" y="605"  fill="rgb(133 198 32)">e</text><text x="879" y="605"  fill="rgb(133 197 32)"> </text><text x="882" y="605"  fill="rgb(133 198 31)">if </text><text x="891" y="605"  fill="rgb(133 198 32)">(</text><text x="894" y="605"  fill="rgb(133 197 32)">t</text><text x="897" y="605"  fill="rgb(133 198 32)">ypeof q === &quot;string&quot;) {</text><text x="966" y="605"  fill="rgb(132 196 31)"> </text><text x="969" y="605"  fill="rgb(133 196 30)">i</text><text x="972" y="605"  fill="rgb(132 196 41)">f</text><text x="975" y="605"  fill="rgb(131 200 27)"> </text><text x="978" y="605"  fill="rgb(131 200 25)">(</text><text x="981" y="605"  fill="rgb(130 198 30)">!</text><text x="984" y="605"  fill="rgb(130 199 36)">t</text><text x="987" y="605"  fill="rgb(127 197 11)">h</text><text x="990" y="605"  fill="rgb(131 192 18)">i</text><text x="993" y="605"  fill="rgb(244 245 248)">s</text><text x="996" y="605"  fill="rgb(252 248 255)">.</text><text x="999" y="605"  fill="rgb(245 245 245)">k</text><text x="1002" y="605"  fill="rgb(246 246 246)">eysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !==</text><text x="0" y="610"  fill="rgb(246 246 246)"> &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.ke</text><text x="531" y="610"  fill="rgb(246 246 245)">y</text><text x="534" y="610"  fill="rgb(245 246 248)">s</text><text x="537" y="610"  fill="rgb(247 249 252)">I</text><text x="540" y="610"  fill="rgb(252 210 80)">n</text><text x="543" y="610"  fill="rgb(250 197 0)">Q</text><text x="546" y="610"  fill="rgb(254 200 0)">u</text><text x="549" y="610"  fill="rgb(255 200 0)">e</text><text x="552" y="610"  fill="rgb(254 198 1)">r</text><text x="555" y="610"  fill="rgb(254 198 0)">y</text><text x="558" y="610"  fill="rgb(254 197 2)">.</text><text x="561" y="610"  fill="rgb(255 199 0)">includes(anykey)) { thr</text><text x="630" y="610"  fill="rgb(254 199 0)">o</text><text x="633" y="610"  fill="rgb(254 198 0)">w</text><text x="636" y="610"  fill="rgb(254 199 0)"> </text><text x="639" y="610"  fill="rgb(251 195 0)">n</text><text x="642" y="610"  fill="rgb(248 246 234)">e</text><text x="645" y="610"  fill="rgb(245 246 251)">w</text><text x="648" y="610"  fill="rgb(246 246 245)"> </text><text x="651" y="610"  fill="rgb(246 246 246)">InsightError(); } } } } publ</text><text x="735" y="610"  fill="rgb(245 246 246)">i</text><text x="738" y="610"  fill="rgb(245 245 245)">c</text><text x="741" y="610"  fill="rgb(246 246 246)"> </text><text x="744" y="610"  fill="rgb(248 247 246)">v</text><text x="747" y="610"  fill="rgb(254 249 247)">a</text><text x="750" y="610"  fill="rgb(255 253 247)">l</text><text x="753" y="610"  fill="rgb(255 255 250)">i</text><text x="756" y="610"  fill="rgb(255 255 251)">d</text><text x="759" y="610"  fill="rgb(255 255 250)">a</text><text x="762" y="610"  fill="rgb(255 255 247)">t</text><text x="765" y="610"  fill="rgb(255 253 245)">e</text><text x="768" y="610"  fill="rgb(255 251 243)">W</text><text x="771" y="610"  fill="rgb(255 250 242)">h</text><text x="774" y="610"  fill="rgb(255 251 244)">e</text><text x="777" y="610"  fill="rgb(255 255 247)">r</text><text x="780" y="610"  fill="rgb(255 255 250)">e(</text><text x="786" y="610"  fill="rgb(255 255 251)">q</text><text x="789" y="610"  fill="rgb(255 255 249)">:</text><text x="792" y="610"  fill="rgb(255 250 247)"> </text><text x="795" y="610"  fill="rgb(251 248 246)">a</text><text x="798" y="610"  fill="rgb(247 246 246)">n</text><text x="801" y="610"  fill="rgb(246 246 245)">y</text><text x="804" y="610"  fill="rgb(245 245 245)">)</text><text x="807" y="610"  fill="rgb(246 246 246)">: void</text><text x="825" y="610"  fill="rgb(246 246 245)"> </text><text x="828" y="610"  fill="rgb(245 245 245)">{</text><text x="831" y="610"  fill="rgb(245 245 244)"> </text><text x="834" y="610"  fill="rgb(249 247 253)">i</text><text x="837" y="610"  fill="rgb(255 250 255)">f</text><text x="840" y="610"  fill="rgb(255 253 255)"> </text><text x="843" y="610"  fill="rgb(255 254 255)">(</text><text x="846" y="610"  fill="rgb(219 231 201)">A</text><text x="849" y="610"  fill="rgb(153 205 75)">r</text><text x="852" y="610"  fill="rgb(124 190 8)">r</text><text x="855" y="610"  fill="rgb(114 187 0)">a</text><text x="858" y="610"  fill="rgb(126 196 23)">y</text><text x="861" y="610"  fill="rgb(132 199 30)">.</text><text x="864" y="610"  fill="rgb(132 198 30)">i</text><text x="867" y="610"  fill="rgb(131 196 31)">sA</text><text x="873" y="610"  fill="rgb(132 198 33)">r</text><text x="876" y="610"  fill="rgb(132 198 29)">r</text><text x="879" y="610"  fill="rgb(132 198 31)">a</text><text x="882" y="610"  fill="rgb(132 198 34)">y</text><text x="885" y="610"  fill="rgb(133 198 33)">(</text><text x="888" y="610"  fill="rgb(132 198 33)">q</text><text x="891" y="610"  fill="rgb(133 197 32)">))</text><text x="897" y="610"  fill="rgb(133 198 32)"> { throw new InsightErr</text><text x="966" y="610"  fill="rgb(132 199 31)">o</text><text x="969" y="610"  fill="rgb(133 198 32)">r</text><text x="972" y="610"  fill="rgb(131 199 28)">(</text><text x="975" y="610"  fill="rgb(132 199 26)">)</text><text x="978" y="610"  fill="rgb(135 195 40)">;</text><text x="981" y="610"  fill="rgb(133 199 27)"> </text><text x="984" y="610"  fill="rgb(130 198 31)">}</text><text x="987" y="610"  fill="rgb(136 198 31)"> </text><text x="990" y="610"  fill="rgb(122 199 0)">e</text><text x="993" y="610"  fill="rgb(140 197 44)">l</text><text x="996" y="610"  fill="rgb(242 245 243)">s</text><text x="999" y="610"  fill="rgb(248 246 249)">e</text><text x="1002" y="610"  fill="rgb(245 245 245)"> </text><text x="1005" y="610"  fill="rgb(246 246 246)">{ if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { l</text><text x="0" y="615"  fill="rgb(246 246 246)">et key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(va</text><text x="531" y="615"  fill="rgb(246 245 245)">l</text><text x="534" y="615"  fill="rgb(245 251 255)">u</text><text x="537" y="615"  fill="rgb(250 222 94)">e</text><text x="540" y="615"  fill="rgb(253 193 0)">)</text><text x="543" y="615"  fill="rgb(255 196 1)">;</text><text x="546" y="615"  fill="rgb(254 198 2)"> </text><text x="549" y="615"  fill="rgb(254 199 0)">b</text><text x="552" y="615"  fill="rgb(255 198 0)">r</text><text x="555" y="615"  fill="rgb(253 199 0)">ea</text><text x="561" y="615"  fill="rgb(255 199 0)">k; case &quot;GT&quot;: case</text><text x="615" y="615"  fill="rgb(255 198 0)"> </text><text x="618" y="615"  fill="rgb(255 197 0)">&quot;</text><text x="621" y="615"  fill="rgb(255 199 0)">LT&quot;</text><text x="630" y="615"  fill="rgb(254 198 1)">:</text><text x="633" y="615"  fill="rgb(255 199 1)"> </text><text x="636" y="615"  fill="rgb(253 194 0)">c</text><text x="639" y="615"  fill="rgb(250 222 103)">a</text><text x="642" y="615"  fill="rgb(245 247 245)">s</text><text x="645" y="615"  fill="rgb(246 245 246)">e</text><text x="648" y="615"  fill="rgb(246 246 246)"> &quot;EQ&quot;: this.validateGTLTEQ(v</text><text x="732" y="615"  fill="rgb(245 245 246)">a</text><text x="735" y="615"  fill="rgb(246 246 246)">l</text><text x="738" y="615"  fill="rgb(255 251 248)">u</text><text x="741" y="615"  fill="rgb(255 255 249)">e</text><text x="744" y="615"  fill="rgb(255 255 248)">)</text><text x="747" y="615"  fill="rgb(255 251 245)">;</text><text x="750" y="615"  fill="rgb(212 230 243)"> </text><text x="753" y="615"  fill="rgb(142 189 228)">b</text><text x="756" y="615"  fill="rgb(133 179 226)">r</text><text x="759" y="615"  fill="rgb(91 166 230)">e</text><text x="762" y="615"  fill="rgb(56 156 225)">a</text><text x="765" y="615"  fill="rgb(13 151 223)">k</text><text x="768" y="615"  fill="rgb(12 149 227)">;</text><text x="771" y="615"  fill="rgb(12 150 225)"> </text><text x="774" y="615"  fill="rgb(13 148 226)">c</text><text x="777" y="615"  fill="rgb(46 160 221)">a</text><text x="780" y="615"  fill="rgb(91 169 219)">s</text><text x="783" y="615"  fill="rgb(124 180 230)">e</text><text x="786" y="615"  fill="rgb(134 184 226)"> </text><text x="789" y="615"  fill="rgb(176 211 232)">&quot;</text><text x="792" y="615"  fill="rgb(248 247 244)">I</text><text x="795" y="615"  fill="rgb(255 253 246)">S</text><text x="798" y="615"  fill="rgb(255 255 248)">&quot;</text><text x="801" y="615"  fill="rgb(255 254 248)">:</text><text x="804" y="615"  fill="rgb(250 248 247)"> </text><text x="807" y="615"  fill="rgb(245 245 245)">t</text><text x="810" y="615"  fill="rgb(245 246 246)">h</text><text x="813" y="615"  fill="rgb(246 246 246)">is.vali</text><text x="834" y="615"  fill="rgb(245 245 245)">d</text><text x="837" y="615"  fill="rgb(245 246 245)">a</text><text x="840" y="615"  fill="rgb(246 246 246)">t</text><text x="843" y="615"  fill="rgb(248 246 251)">e</text><text x="846" y="615"  fill="rgb(255 251 255)">IS</text><text x="852" y="615"  fill="rgb(243 242 247)">(</text><text x="855" y="615"  fill="rgb(195 223 140)">v</text><text x="858" y="615"  fill="rgb(132 197 0)">a</text><text x="861" y="615"  fill="rgb(113 191 0)">l</text><text x="864" y="615"  fill="rgb(117 192 0)">u</text><text x="867" y="615"  fill="rgb(131 197 25)">e</text><text x="870" y="615"  fill="rgb(133 199 37)">)</text><text x="873" y="615"  fill="rgb(131 199 33)">;</text><text x="876" y="615"  fill="rgb(133 199 32)"> </text><text x="879" y="615"  fill="rgb(132 198 32)">b</text><text x="882" y="615"  fill="rgb(133 196 33)">r</text><text x="885" y="615"  fill="rgb(131 198 32)">e</text><text x="888" y="615"  fill="rgb(133 198 33)">a</text><text x="891" y="615"  fill="rgb(132 198 31)">k</text><text x="894" y="615"  fill="rgb(133 198 31)">;</text><text x="897" y="615"  fill="rgb(133 198 32)"> default: throw new Ins</text><text x="966" y="615"  fill="rgb(133 197 31)">i</text><text x="969" y="615"  fill="rgb(133 198 32)">g</text><text x="972" y="615"  fill="rgb(132 198 30)">h</text><text x="975" y="615"  fill="rgb(133 197 33)">t</text><text x="978" y="615"  fill="rgb(133 198 30)">E</text><text x="981" y="615"  fill="rgb(133 198 32)">r</text><text x="984" y="615"  fill="rgb(133 197 32)">r</text><text x="987" y="615"  fill="rgb(132 198 32)">o</text><text x="990" y="615"  fill="rgb(135 198 35)">r</text><text x="993" y="615"  fill="rgb(121 194 0)">(</text><text x="996" y="615"  fill="rgb(152 201 64)">)</text><text x="999" y="615"  fill="rgb(255 251 255)">;</text><text x="1002" y="615"  fill="rgb(245 245 246)"> </text><text x="1005" y="615"  fill="rgb(246 246 246)">} } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { i</text><text x="0" y="620"  fill="rgb(246 246 246)">f (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(</text><text x="528" y="620"  fill="rgb(245 245 245)">&quot;</text><text x="531" y="620"  fill="rgb(245 250 255)">_</text><text x="534" y="620"  fill="rgb(250 234 189)">&quot;</text><text x="537" y="620"  fill="rgb(253 186 0)">)</text><text x="540" y="620"  fill="rgb(255 198 1)">;</text><text x="543" y="620"  fill="rgb(250 201 0)"> </text><text x="546" y="620"  fill="rgb(251 202 0)">i</text><text x="549" y="620"  fill="rgb(255 198 0)">f</text><text x="552" y="620"  fill="rgb(255 199 0)"> </text><text x="555" y="620"  fill="rgb(255 198 0)">(</text><text x="558" y="620"  fill="rgb(254 199 0)">s</text><text x="561" y="620"  fill="rgb(255 199 0)">key.length !== 2) {</text><text x="618" y="620"  fill="rgb(255 198 0)"> </text><text x="621" y="620"  fill="rgb(255 199 0)">t</text><text x="624" y="620"  fill="rgb(255 198 0)">h</text><text x="627" y="620"  fill="rgb(255 199 0)">ro</text><text x="633" y="620"  fill="rgb(254 199 0)">w</text><text x="636" y="620"  fill="rgb(253 201 6)"> </text><text x="639" y="620"  fill="rgb(249 241 216)">n</text><text x="642" y="620"  fill="rgb(246 246 252)">e</text><text x="645" y="620"  fill="rgb(246 246 245)">w</text><text x="648" y="620"  fill="rgb(246 246 246)"> InsightError(); } else { </text><text x="726" y="620"  fill="rgb(246 245 245)">l</text><text x="729" y="620"  fill="rgb(249 247 246)">e</text><text x="732" y="620"  fill="rgb(255 254 248)">t</text><text x="735" y="620"  fill="rgb(255 255 250)"> </text><text x="738" y="620"  fill="rgb(249 240 238)">i</text><text x="741" y="620"  fill="rgb(134 189 227)">d</text><text x="744" y="620"  fill="rgb(56 153 227)">s</text><text x="747" y="620"  fill="rgb(0 123 211)">t</text><text x="750" y="620"  fill="rgb(0 122 221)">r</text><text x="753" y="620"  fill="rgb(0 134 231)">i</text><text x="756" y="620"  fill="rgb(0 138 227)">n</text><text x="759" y="620"  fill="rgb(0 141 222)">g</text><text x="762" y="620"  fill="rgb(0 142 225)">:</text><text x="765" y="620"  fill="rgb(0 143 227)"> </text><text x="768" y="620"  fill="rgb(0 141 229)">s</text><text x="771" y="620"  fill="rgb(0 142 228)">t</text><text x="774" y="620"  fill="rgb(0 143 223)">r</text><text x="777" y="620"  fill="rgb(0 139 225)">i</text><text x="780" y="620"  fill="rgb(0 137 232)">n</text><text x="783" y="620"  fill="rgb(0 134 228)">g</text><text x="786" y="620"  fill="rgb(0 135 225)"> </text><text x="789" y="620"  fill="rgb(0 126 221)">=</text><text x="792" y="620"  fill="rgb(0 113 220)"> </text><text x="795" y="620"  fill="rgb(0 138 222)">s</text><text x="798" y="620"  fill="rgb(73 165 227)">k</text><text x="801" y="620"  fill="rgb(193 215 239)">e</text><text x="804" y="620"  fill="rgb(255 255 245)">y</text><text x="807" y="620"  fill="rgb(255 255 251)">[</text><text x="810" y="620"  fill="rgb(255 251 247)">0</text><text x="813" y="620"  fill="rgb(246 246 246)">]</text><text x="816" y="620"  fill="rgb(245 245 246)">;</text><text x="819" y="620"  fill="rgb(246 246 246)"> let sfi</text><text x="843" y="620"  fill="rgb(245 246 245)">e</text><text x="846" y="620"  fill="rgb(245 245 245)">l</text><text x="849" y="620"  fill="rgb(247 246 248)">d</text><text x="852" y="620"  fill="rgb(251 248 254)">:</text><text x="855" y="620"  fill="rgb(255 253 255)"> </text><text x="858" y="620"  fill="rgb(255 255 255)">s</text><text x="861" y="620"  fill="rgb(231 238 223)">t</text><text x="864" y="620"  fill="rgb(183 213 137)">r</text><text x="867" y="620"  fill="rgb(115 189 0)">i</text><text x="870" y="620"  fill="rgb(108 185 0)">n</text><text x="873" y="620"  fill="rgb(123 196 7)">g</text><text x="876" y="620"  fill="rgb(128 198 30)"> </text><text x="879" y="620"  fill="rgb(130 199 31)">=</text><text x="882" y="620"  fill="rgb(130 201 24)"> </text><text x="885" y="620"  fill="rgb(132 197 32)">s</text><text x="888" y="620"  fill="rgb(133 197 31)">k</text><text x="891" y="620"  fill="rgb(133 197 34)">e</text><text x="894" y="620"  fill="rgb(132 197 31)">y</text><text x="897" y="620"  fill="rgb(133 198 31)">[</text><text x="900" y="620"  fill="rgb(133 198 32)">1]; let str: any = Objec</text><text x="972" y="620"  fill="rgb(133 197 32)">t.</text><text x="978" y="620"  fill="rgb(132 198 31)">v</text><text x="981" y="620"  fill="rgb(133 197 32)">a</text><text x="984" y="620"  fill="rgb(133 198 32)">l</text><text x="987" y="620"  fill="rgb(133 198 31)">u</text><text x="990" y="620"  fill="rgb(130 199 30)">e</text><text x="993" y="620"  fill="rgb(129 198 36)">s</text><text x="996" y="620"  fill="rgb(115 188 0)">(</text><text x="999" y="620"  fill="rgb(194 218 155)">v</text><text x="1002" y="620"  fill="rgb(255 253 255)">a</text><text x="1005" y="620"  fill="rgb(245 245 245)">l</text><text x="1008" y="620"  fill="rgb(246 246 245)">u</text><text x="1011" y="620"  fill="rgb(246 246 246)">e)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfi</text><text x="0" y="625"  fill="rgb(246 246 246)">eld)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError</text><text x="525" y="625"  fill="rgb(246 245 245)">(</text><text x="528" y="625"  fill="rgb(246 248 252)">)</text><text x="531" y="625"  fill="rgb(245 240 214)">;</text><text x="534" y="625"  fill="rgb(251 195 14)"> </text><text x="537" y="625"  fill="rgb(253 199 0)">}</text><text x="540" y="625"  fill="rgb(251 201 1)"> </text><text x="543" y="625"  fill="rgb(249 203 3)">l</text><text x="546" y="625"  fill="rgb(252 196 0)">e</text><text x="549" y="625"  fill="rgb(253 198 2)">t</text><text x="552" y="625"  fill="rgb(255 198 0)"> </text><text x="555" y="625"  fill="rgb(254 200 0)">m</text><text x="558" y="625"  fill="rgb(255 197 0)">k</text><text x="561" y="625"  fill="rgb(255 199 0)">ey: string[] = Objec</text><text x="621" y="625"  fill="rgb(255 198 0)">t</text><text x="624" y="625"  fill="rgb(254 199 0)">.k</text><text x="630" y="625"  fill="rgb(255 199 0)">e</text><text x="633" y="625"  fill="rgb(255 194 0)">y</text><text x="636" y="625"  fill="rgb(249 223 141)">s</text><text x="639" y="625"  fill="rgb(246 250 255)">(</text><text x="642" y="625"  fill="rgb(246 245 245)">v</text><text x="645" y="625"  fill="rgb(246 246 246)">alue)[0].split(&quot;_&quot;); if (</text><text x="720" y="625"  fill="rgb(245 245 245)">m</text><text x="723" y="625"  fill="rgb(246 246 245)">k</text><text x="726" y="625"  fill="rgb(255 253 248)">e</text><text x="729" y="625"  fill="rgb(255 255 248)">y</text><text x="732" y="625"  fill="rgb(199 222 235)">.</text><text x="735" y="625"  fill="rgb(6 135 222)">l</text><text x="738" y="625"  fill="rgb(0 128 230)">e</text><text x="741" y="625"  fill="rgb(0 134 224)">n</text><text x="744" y="625"  fill="rgb(0 140 227)">g</text><text x="747" y="625"  fill="rgb(0 147 225)">t</text><text x="750" y="625"  fill="rgb(0 149 225)">h</text><text x="753" y="625"  fill="rgb(0 147 224)"> </text><text x="756" y="625"  fill="rgb(0 147 225)">!</text><text x="759" y="625"  fill="rgb(0 150 226)">=</text><text x="762" y="625"  fill="rgb(0 150 225)">=</text><text x="765" y="625"  fill="rgb(0 147 225)"> </text><text x="768" y="625"  fill="rgb(0 148 225)">2) </text><text x="777" y="625"  fill="rgb(0 150 226)">{</text><text x="780" y="625"  fill="rgb(0 149 226)"> </text><text x="783" y="625"  fill="rgb(0 148 225)">t</text><text x="786" y="625"  fill="rgb(0 147 228)">h</text><text x="789" y="625"  fill="rgb(0 150 227)">r</text><text x="792" y="625"  fill="rgb(0 149 227)">o</text><text x="795" y="625"  fill="rgb(0 143 225)">w</text><text x="798" y="625"  fill="rgb(0 139 226)"> </text><text x="801" y="625"  fill="rgb(0 128 223)">n</text><text x="804" y="625"  fill="rgb(0 129 225)">e</text><text x="807" y="625"  fill="rgb(108 180 229)">w</text><text x="810" y="625"  fill="rgb(232 235 239)"> </text><text x="813" y="625"  fill="rgb(255 255 249)">I</text><text x="816" y="625"  fill="rgb(252 248 246)">n</text><text x="819" y="625"  fill="rgb(245 245 246)">s</text><text x="822" y="625"  fill="rgb(245 246 246)">i</text><text x="825" y="625"  fill="rgb(246 246 246)">ghtError(</text><text x="852" y="625"  fill="rgb(245 246 245)">)</text><text x="855" y="625"  fill="rgb(245 245 245)">;</text><text x="858" y="625"  fill="rgb(246 246 246)"> </text><text x="861" y="625"  fill="rgb(252 249 255)">}</text><text x="864" y="625"  fill="rgb(255 254 255)"> </text><text x="867" y="625"  fill="rgb(255 250 255)">e</text><text x="870" y="625"  fill="rgb(219 231 193)">l</text><text x="873" y="625"  fill="rgb(154 202 56)">s</text><text x="876" y="625"  fill="rgb(121 189 0)">e</text><text x="879" y="625"  fill="rgb(116 190 0)"> </text><text x="882" y="625"  fill="rgb(130 197 31)">{</text><text x="885" y="625"  fill="rgb(133 197 34)"> </text><text x="888" y="625"  fill="rgb(132 198 32)">l</text><text x="891" y="625"  fill="rgb(131 198 34)">e</text><text x="894" y="625"  fill="rgb(133 197 30)">t</text><text x="897" y="625"  fill="rgb(133 197 32)"> ids</text><text x="909" y="625"  fill="rgb(133 198 32)">t</text><text x="912" y="625"  fill="rgb(132 198 32)">r</text><text x="915" y="625"  fill="rgb(133 198 31)">i</text><text x="918" y="625"  fill="rgb(133 197 32)">n</text><text x="921" y="625"  fill="rgb(133 198 31)">g</text><text x="924" y="625"  fill="rgb(133 198 32)">:</text><text x="927" y="625"  fill="rgb(133 198 31)"> </text><text x="930" y="625"  fill="rgb(133 198 32)">string = mkey[0]; </text><text x="984" y="625"  fill="rgb(132 198 32)">l</text><text x="987" y="625"  fill="rgb(133 197 33)">e</text><text x="990" y="625"  fill="rgb(135 197 33)">t</text><text x="993" y="625"  fill="rgb(134 199 25)"> </text><text x="996" y="625"  fill="rgb(130 201 32)">m</text><text x="999" y="625"  fill="rgb(120 191 0)">f</text><text x="1002" y="625"  fill="rgb(216 230 207)">i</text><text x="1005" y="625"  fill="rgb(250 248 251)">e</text><text x="1008" y="625"  fill="rgb(245 245 246)">l</text><text x="1011" y="625"  fill="rgb(246 246 246)">d: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new I</text><text x="0" y="630"  fill="rgb(246 246 246)">nsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { th</text><text x="525" y="630"  fill="rgb(246 245 246)">i</text><text x="528" y="630"  fill="rgb(247 246 251)">s</text><text x="531" y="630"  fill="rgb(253 206 36)">.</text><text x="534" y="630"  fill="rgb(253 197 0)">v</text><text x="537" y="630"  fill="rgb(255 197 1)">a</text><text x="540" y="630"  fill="rgb(252 199 1)">l</text><text x="543" y="630"  fill="rgb(255 196 0)">i</text><text x="546" y="630"  fill="rgb(253 199 0)">d</text><text x="549" y="630"  fill="rgb(254 198 0)">a</text><text x="552" y="630"  fill="rgb(255 199 0)">t</text><text x="555" y="630"  fill="rgb(255 197 0)">e</text><text x="558" y="630"  fill="rgb(255 198 0)">F</text><text x="561" y="630"  fill="rgb(255 199 0)">ilter(innerObject)</text><text x="615" y="630"  fill="rgb(255 197 0)">;</text><text x="618" y="630"  fill="rgb(254 198 0)"> </text><text x="621" y="630"  fill="rgb(252 199 0)">}</text><text x="624" y="630"  fill="rgb(250 202 0)"> </text><text x="627" y="630"  fill="rgb(252 199 0)">}</text><text x="630" y="630"  fill="rgb(255 197 0)"> </text><text x="633" y="630"  fill="rgb(248 195 0)">p</text><text x="636" y="630"  fill="rgb(250 246 210)">r</text><text x="639" y="630"  fill="rgb(245 245 249)">i</text><text x="642" y="630"  fill="rgb(246 246 245)">v</text><text x="645" y="630"  fill="rgb(246 246 246)">ate validateIdstring(ids</text><text x="717" y="630"  fill="rgb(245 245 246)">t</text><text x="720" y="630"  fill="rgb(248 247 246)">r</text><text x="723" y="630"  fill="rgb(255 255 249)">i</text><text x="726" y="630"  fill="rgb(210 230 235)">n</text><text x="729" y="630"  fill="rgb(50 161 219)">g</text><text x="732" y="630"  fill="rgb(0 128 233)">:</text><text x="735" y="630"  fill="rgb(0 144 222)"> </text><text x="738" y="630"  fill="rgb(0 150 220)">s</text><text x="741" y="630"  fill="rgb(1 145 230)">t</text><text x="744" y="630"  fill="rgb(0 148 225)">r</text><text x="747" y="630"  fill="rgb(0 148 229)">i</text><text x="750" y="630"  fill="rgb(0 148 228)">n</text><text x="753" y="630"  fill="rgb(1 147 229)">g</text><text x="756" y="630"  fill="rgb(0 147 230)">)</text><text x="759" y="630"  fill="rgb(1 146 229)">:</text><text x="762" y="630"  fill="rgb(0 146 228)"> </text><text x="765" y="630"  fill="rgb(0 146 229)">b</text><text x="768" y="630"  fill="rgb(1 146 229)">o</text><text x="771" y="630"  fill="rgb(1 147 229)">o</text><text x="774" y="630"  fill="rgb(0 146 230)">l</text><text x="777" y="630"  fill="rgb(0 147 228)">e</text><text x="780" y="630"  fill="rgb(1 147 228)">a</text><text x="783" y="630"  fill="rgb(0 147 228)">n</text><text x="786" y="630"  fill="rgb(0 147 227)"> </text><text x="789" y="630"  fill="rgb(0 149 227)">{</text><text x="792" y="630"  fill="rgb(1 148 226)"> </text><text x="795" y="630"  fill="rgb(1 149 231)">i</text><text x="798" y="630"  fill="rgb(0 148 227)">f</text><text x="801" y="630"  fill="rgb(0 148 220)"> </text><text x="804" y="630"  fill="rgb(0 149 229)">(</text><text x="807" y="630"  fill="rgb(0 133 230)">t</text><text x="810" y="630"  fill="rgb(0 132 221)">h</text><text x="813" y="630"  fill="rgb(125 181 227)">i</text><text x="816" y="630"  fill="rgb(255 254 246)">s</text><text x="819" y="630"  fill="rgb(255 252 247)">.</text><text x="822" y="630"  fill="rgb(245 245 245)">i</text><text x="825" y="630"  fill="rgb(246 246 246)">dInQuery.le</text><text x="858" y="630"  fill="rgb(245 246 245)">n</text><text x="861" y="630"  fill="rgb(246 245 245)">g</text><text x="864" y="630"  fill="rgb(245 245 245)">t</text><text x="867" y="630"  fill="rgb(248 247 252)">h</text><text x="870" y="630"  fill="rgb(255 251 255)"> =</text><text x="876" y="630"  fill="rgb(233 240 226)">=</text><text x="879" y="630"  fill="rgb(176 212 118)">=</text><text x="882" y="630"  fill="rgb(117 192 0)"> </text><text x="885" y="630"  fill="rgb(116 192 0)">0</text><text x="888" y="630"  fill="rgb(127 197 18)">)</text><text x="891" y="630"  fill="rgb(131 198 37)"> {</text><text x="897" y="630"  fill="rgb(132 199 32)"> </text><text x="900" y="630"  fill="rgb(132 199 29)">f</text><text x="903" y="630"  fill="rgb(132 199 31)">o</text><text x="906" y="630"  fill="rgb(133 198 32)">r</text><text x="909" y="630"  fill="rgb(133 197 32)"> </text><text x="912" y="630"  fill="rgb(133 198 32)">(l</text><text x="918" y="630"  fill="rgb(133 197 32)">e</text><text x="921" y="630"  fill="rgb(133 198 32)">t </text><text x="927" y="630"  fill="rgb(133 198 31)">i</text><text x="930" y="630"  fill="rgb(133 198 32)">nsightDataset of t</text><text x="984" y="630"  fill="rgb(133 197 31)">h</text><text x="987" y="630"  fill="rgb(132 198 32)">i</text><text x="990" y="630"  fill="rgb(132 200 24)">s</text><text x="993" y="630"  fill="rgb(136 196 34)">.</text><text x="996" y="630"  fill="rgb(133 200 31)">a</text><text x="999" y="630"  fill="rgb(124 198 17)">l</text><text x="1002" y="630"  fill="rgb(136 198 9)">l</text><text x="1005" y="630"  fill="rgb(244 245 250)">I</text><text x="1008" y="630"  fill="rgb(246 246 247)">n</text><text x="1011" y="630"  fill="rgb(246 246 246)">sightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfield</text><text x="0" y="635"  fill="rgb(246 246 246)">s; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQue</text><text x="522" y="635"  fill="rgb(246 245 245)">r</text><text x="525" y="635"  fill="rgb(244 250 255)">y</text><text x="528" y="635"  fill="rgb(249 227 104)">.</text><text x="531" y="635"  fill="rgb(252 192 0)">i</text><text x="534" y="635"  fill="rgb(255 198 0)">n</text><text x="537" y="635"  fill="rgb(254 199 0)">c</text><text x="540" y="635"  fill="rgb(255 198 0)">l</text><text x="543" y="635"  fill="rgb(255 199 0)">udes(idstring); } } publi</text><text x="618" y="635"  fill="rgb(253 198 1)">c</text><text x="621" y="635"  fill="rgb(252 202 0)"> </text><text x="624" y="635"  fill="rgb(253 200 1)">g</text><text x="627" y="635"  fill="rgb(253 197 1)">e</text><text x="630" y="635"  fill="rgb(253 198 0)">t</text><text x="633" y="635"  fill="rgb(255 208 16)">I</text><text x="636" y="635"  fill="rgb(244 250 255)">d</text><text x="639" y="635"  fill="rgb(246 245 245)">I</text><text x="642" y="635"  fill="rgb(246 246 246)">nQuery(): string[] { ret</text><text x="714" y="635"  fill="rgb(245 245 246)">u</text><text x="717" y="635"  fill="rgb(251 248 246)">r</text><text x="720" y="635"  fill="rgb(255 255 249)">n</text><text x="723" y="635"  fill="rgb(156 194 231)"> </text><text x="726" y="635"  fill="rgb(0 124 224)">t</text><text x="729" y="635"  fill="rgb(0 135 226)">h</text><text x="732" y="635"  fill="rgb(0 144 222)">i</text><text x="735" y="635"  fill="rgb(0 151 223)">s</text><text x="738" y="635"  fill="rgb(0 148 228)">.</text><text x="741" y="635"  fill="rgb(0 145 232)">i</text><text x="744" y="635"  fill="rgb(2 147 227)">d</text><text x="747" y="635"  fill="rgb(0 148 227)">I</text><text x="750" y="635"  fill="rgb(1 147 228)">n</text><text x="753" y="635"  fill="rgb(1 148 227)">Qu</text><text x="759" y="635"  fill="rgb(0 148 227)">e</text><text x="762" y="635"  fill="rgb(1 148 227)">ry</text><text x="768" y="635"  fill="rgb(0 148 227)">; </text><text x="774" y="635"  fill="rgb(1 148 227)">} } </text><text x="786" y="635"  fill="rgb(1 148 228)">i</text><text x="789" y="635"  fill="rgb(1 147 228)">m</text><text x="792" y="635"  fill="rgb(1 148 228)">p</text><text x="795" y="635"  fill="rgb(0 147 227)">o</text><text x="798" y="635"  fill="rgb(1 148 228)">r</text><text x="801" y="635"  fill="rgb(0 148 229)">t</text><text x="804" y="635"  fill="rgb(0 147 227)"> </text><text x="807" y="635"  fill="rgb(0 149 225)">{</text><text x="810" y="635"  fill="rgb(0 147 229)">I</text><text x="813" y="635"  fill="rgb(0 135 231)">n</text><text x="816" y="635"  fill="rgb(10 135 219)">s</text><text x="819" y="635"  fill="rgb(232 237 239)">i</text><text x="822" y="635"  fill="rgb(255 255 249)">g</text><text x="825" y="635"  fill="rgb(245 245 246)">h</text><text x="828" y="635"  fill="rgb(245 246 246)">t</text><text x="831" y="635"  fill="rgb(246 246 246)">Dataset, Ins</text><text x="867" y="635"  fill="rgb(245 246 245)">i</text><text x="870" y="635"  fill="rgb(245 245 245)">g</text><text x="873" y="635"  fill="rgb(247 246 248)">h</text><text x="876" y="635"  fill="rgb(253 249 255)">t</text><text x="879" y="635"  fill="rgb(255 254 255)">D</text><text x="882" y="635"  fill="rgb(255 253 255)">a</text><text x="885" y="635"  fill="rgb(197 221 171)">t</text><text x="888" y="635"  fill="rgb(135 193 34)">a</text><text x="891" y="635"  fill="rgb(107 186 0)">s</text><text x="894" y="635"  fill="rgb(124 198 11)">e</text><text x="897" y="635"  fill="rgb(133 198 31)">t</text><text x="900" y="635"  fill="rgb(134 197 34)">K</text><text x="903" y="635"  fill="rgb(132 197 32)">i</text><text x="906" y="635"  fill="rgb(133 198 32)">n</text><text x="909" y="635"  fill="rgb(132 197 30)">d</text><text x="912" y="635"  fill="rgb(133 198 32)">,</text><text x="915" y="635"  fill="rgb(133 198 34)"> </text><text x="918" y="635"  fill="rgb(133 199 30)">I</text><text x="921" y="635"  fill="rgb(133 198 32)">ns</text><text x="927" y="635"  fill="rgb(133 198 33)">i</text><text x="930" y="635"  fill="rgb(133 198 32)">ghtError} from &quot;./</text><text x="984" y="635"  fill="rgb(132 196 32)">I</text><text x="987" y="635"  fill="rgb(134 198 31)">I</text><text x="990" y="635"  fill="rgb(131 198 36)">n</text><text x="993" y="635"  fill="rgb(135 196 35)">s</text><text x="996" y="635"  fill="rgb(134 197 21)">i</text><text x="999" y="635"  fill="rgb(127 199 42)">g</text><text x="1002" y="635"  fill="rgb(119 193 0)">h</text><text x="1005" y="635"  fill="rgb(171 208 98)">t</text><text x="1008" y="635"  fill="rgb(255 253 255)">F</text><text x="1011" y="635"  fill="rgb(245 245 245)">a</text><text x="1014" y="635"  fill="rgb(246 246 246)">cade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [</text><text x="0" y="640"  fill="rgb(246 246 246)">&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortn</text><text x="519" y="640"  fill="rgb(246 245 245)">a</text><text x="522" y="640"  fill="rgb(245 247 255)">m</text><text x="525" y="640"  fill="rgb(251 242 197)">e</text><text x="528" y="640"  fill="rgb(253 189 0)">&quot;</text><text x="531" y="640"  fill="rgb(254 198 0)">,</text><text x="534" y="640"  fill="rgb(254 198 1)"> </text><text x="537" y="640"  fill="rgb(252 198 0)">&quot;</text><text x="540" y="640"  fill="rgb(255 198 0)">n</text><text x="543" y="640"  fill="rgb(255 199 0)">umber&quot; , &quot;name&quot;, &quot;addres</text><text x="615" y="640"  fill="rgb(255 198 0)">s</text><text x="618" y="640"  fill="rgb(255 199 0)">&quot;</text><text x="621" y="640"  fill="rgb(253 201 0)">,</text><text x="624" y="640"  fill="rgb(253 196 0)"> </text><text x="627" y="640"  fill="rgb(254 199 1)">&quot;</text><text x="630" y="640"  fill="rgb(249 198 0)">t</text><text x="633" y="640"  fill="rgb(250 237 174)">y</text><text x="636" y="640"  fill="rgb(246 246 250)">p</text><text x="639" y="640"  fill="rgb(246 246 246)">e&quot;, &quot;furniture&quot;, &quot;href&quot;]</text><text x="711" y="640"  fill="rgb(245 245 245)">;</text><text x="714" y="640"  fill="rgb(252 247 245)"> </text><text x="717" y="640"  fill="rgb(255 253 247)">p</text><text x="720" y="640"  fill="rgb(64 159 226)">r</text><text x="723" y="640"  fill="rgb(0 130 222)">i</text><text x="726" y="640"  fill="rgb(0 150 227)">v</text><text x="729" y="640"  fill="rgb(0 147 221)">a</text><text x="732" y="640"  fill="rgb(0 152 226)">t</text><text x="735" y="640"  fill="rgb(0 145 235)">e</text><text x="738" y="640"  fill="rgb(1 144 228)"> </text><text x="741" y="640"  fill="rgb(1 151 216)">r</text><text x="744" y="640"  fill="rgb(0 149 228)">e</text><text x="747" y="640"  fill="rgb(2 146 228)">a</text><text x="750" y="640"  fill="rgb(1 148 226)">d</text><text x="753" y="640"  fill="rgb(0 148 228)">o</text><text x="756" y="640"  fill="rgb(1 148 228)">nly mtoken: strin</text><text x="807" y="640"  fill="rgb(0 148 228)">g</text><text x="810" y="640"  fill="rgb(1 147 226)">[</text><text x="813" y="640"  fill="rgb(0 148 221)">]</text><text x="816" y="640"  fill="rgb(0 142 221)"> </text><text x="819" y="640"  fill="rgb(10 134 227)">=</text><text x="822" y="640"  fill="rgb(161 216 238)"> </text><text x="825" y="640"  fill="rgb(255 255 247)">[</text><text x="828" y="640"  fill="rgb(245 245 245)">&quot;</text><text x="831" y="640"  fill="rgb(246 246 246)">MAX&quot;, &quot;MIN&quot;, &quot;A</text><text x="876" y="640"  fill="rgb(245 245 245)">VG</text><text x="882" y="640"  fill="rgb(247 246 248)">&quot;</text><text x="885" y="640"  fill="rgb(255 252 255)">,</text><text x="888" y="640"  fill="rgb(255 251 255)"> </text><text x="891" y="640"  fill="rgb(225 235 217)">&quot;</text><text x="894" y="640"  fill="rgb(143 198 39)">S</text><text x="897" y="640"  fill="rgb(115 192 0)">U</text><text x="900" y="640"  fill="rgb(120 196 10)">M</text><text x="903" y="640"  fill="rgb(133 198 33)">&quot;</text><text x="906" y="640"  fill="rgb(131 197 31)">]</text><text x="909" y="640"  fill="rgb(131 197 33)">;</text><text x="912" y="640"  fill="rgb(132 198 32)"> </text><text x="915" y="640"  fill="rgb(133 197 31)">pr</text><text x="921" y="640"  fill="rgb(133 198 31)">i</text><text x="924" y="640"  fill="rgb(133 198 32)">v</text><text x="927" y="640"  fill="rgb(133 197 32)">a</text><text x="930" y="640"  fill="rgb(133 198 32)">te readonly mstoken</text><text x="987" y="640"  fill="rgb(132 198 31)">:</text><text x="990" y="640"  fill="rgb(132 197 34)"> </text><text x="993" y="640"  fill="rgb(131 199 30)">s</text><text x="996" y="640"  fill="rgb(131 200 26)">t</text><text x="999" y="640"  fill="rgb(132 199 32)">r</text><text x="1002" y="640"  fill="rgb(131 200 27)">i</text><text x="1005" y="640"  fill="rgb(114 189 0)">n</text><text x="1008" y="640"  fill="rgb(219 231 199)">g</text><text x="1011" y="640"  fill="rgb(251 248 254)">[</text><text x="1014" y="640"  fill="rgb(245 245 245)">]</text><text x="1017" y="640"  fill="rgb(246 246 246)"> = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated privat</text><text x="0" y="645"  fill="rgb(246 246 246)">e transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; priva</text><text x="519" y="645"  fill="rgb(245 245 248)">t</text><text x="522" y="645"  fill="rgb(248 248 238)">e</text><text x="525" y="645"  fill="rgb(251 210 101)"> </text><text x="528" y="645"  fill="rgb(253 197 0)">s</text><text x="531" y="645"  fill="rgb(253 201 1)">f</text><text x="534" y="645"  fill="rgb(254 199 1)">i</text><text x="537" y="645"  fill="rgb(254 199 0)">e</text><text x="540" y="645"  fill="rgb(254 198 0)">l</text><text x="543" y="645"  fill="rgb(255 199 0)">ds: string[]; construct</text><text x="612" y="645"  fill="rgb(254 199 0)">or</text><text x="618" y="645"  fill="rgb(251 202 0)">(</text><text x="621" y="645"  fill="rgb(251 198 0)">i</text><text x="624" y="645"  fill="rgb(250 198 1)">n</text><text x="627" y="645"  fill="rgb(249 198 0)">s</text><text x="630" y="645"  fill="rgb(253 201 0)">i</text><text x="633" y="645"  fill="rgb(246 241 238)">g</text><text x="636" y="645"  fill="rgb(246 246 247)">h</text><text x="639" y="645"  fill="rgb(246 246 246)">tDatasets: InsightDatas</text><text x="708" y="645"  fill="rgb(245 245 246)">e</text><text x="711" y="645"  fill="rgb(248 246 246)">t</text><text x="714" y="645"  fill="rgb(251 254 250)">[</text><text x="717" y="645"  fill="rgb(65 161 228)">]</text><text x="720" y="645"  fill="rgb(0 134 225)">)</text><text x="723" y="645"  fill="rgb(0 149 222)"> </text><text x="726" y="645"  fill="rgb(0 145 227)">{</text><text x="729" y="645"  fill="rgb(0 147 231)"> </text><text x="732" y="645"  fill="rgb(1 148 228)">t</text><text x="735" y="645"  fill="rgb(0 149 219)">h</text><text x="738" y="645"  fill="rgb(0 148 223)">i</text><text x="741" y="645"  fill="rgb(0 147 232)">s</text><text x="744" y="645"  fill="rgb(1 147 229)">.</text><text x="747" y="645"  fill="rgb(1 147 226)">i</text><text x="750" y="645"  fill="rgb(0 148 228)">d</text><text x="753" y="645"  fill="rgb(0 148 227)">I</text><text x="756" y="645"  fill="rgb(1 148 228)">nQuery = []; this</text><text x="807" y="645"  fill="rgb(2 147 226)">.</text><text x="810" y="645"  fill="rgb(0 147 229)">k</text><text x="813" y="645"  fill="rgb(0 147 232)">e</text><text x="816" y="645"  fill="rgb(0 150 225)">y</text><text x="819" y="645"  fill="rgb(0 144 227)">s</text><text x="822" y="645"  fill="rgb(0 126 216)">I</text><text x="825" y="645"  fill="rgb(211 226 240)">n</text><text x="828" y="645"  fill="rgb(255 253 248)">Q</text><text x="831" y="645"  fill="rgb(245 245 245)">u</text><text x="834" y="645"  fill="rgb(246 246 246)">ery = []; this.t</text><text x="882" y="645"  fill="rgb(245 245 245)">ra</text><text x="888" y="645"  fill="rgb(247 246 249)">n</text><text x="891" y="645"  fill="rgb(255 250 255)">s</text><text x="894" y="645"  fill="rgb(255 253 255)">f</text><text x="897" y="645"  fill="rgb(220 232 201)">o</text><text x="900" y="645"  fill="rgb(143 196 38)">r</text><text x="903" y="645"  fill="rgb(114 187 0)">m</text><text x="906" y="645"  fill="rgb(124 195 10)">a</text><text x="909" y="645"  fill="rgb(135 198 35)">t</text><text x="912" y="645"  fill="rgb(133 198 31)">i</text><text x="915" y="645"  fill="rgb(132 198 32)">o</text><text x="918" y="645"  fill="rgb(132 197 34)">n</text><text x="921" y="645"  fill="rgb(133 198 32)">K</text><text x="924" y="645"  fill="rgb(133 198 31)">e</text><text x="927" y="645"  fill="rgb(132 198 30)">y</text><text x="930" y="645"  fill="rgb(133 198 32)"> = </text><text x="939" y="645"  fill="rgb(133 197 32)">[]</text><text x="945" y="645"  fill="rgb(133 198 31)">;</text><text x="948" y="645"  fill="rgb(133 198 32)"> this.allIns</text><text x="984" y="645"  fill="rgb(132 198 32)">ig</text><text x="990" y="645"  fill="rgb(133 200 24)">h</text><text x="993" y="645"  fill="rgb(130 199 31)">t</text><text x="996" y="645"  fill="rgb(131 197 38)">D</text><text x="999" y="645"  fill="rgb(133 198 28)">a</text><text x="1002" y="645"  fill="rgb(135 195 33)">t</text><text x="1005" y="645"  fill="rgb(128 196 9)">a</text><text x="1008" y="645"  fill="rgb(155 204 103)">s</text><text x="1011" y="645"  fill="rgb(241 244 237)">e</text><text x="1014" y="645"  fill="rgb(246 245 247)">t</text><text x="1017" y="645"  fill="rgb(246 246 246)"> = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot;</text><text x="0" y="650"  fill="rgb(246 246 246)"> &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANS</text><text x="516" y="650"  fill="rgb(246 246 245)">F</text><text x="519" y="650"  fill="rgb(246 247 249)">O</text><text x="522" y="650"  fill="rgb(248 236 200)">R</text><text x="525" y="650"  fill="rgb(251 195 0)">M</text><text x="528" y="650"  fill="rgb(254 199 0)">A</text><text x="531" y="650"  fill="rgb(255 198 0)">T</text><text x="534" y="650"  fill="rgb(255 199 0)">IO</text><text x="540" y="650"  fill="rgb(254 199 0)">N</text><text x="543" y="650"  fill="rgb(255 199 0)">S); } this.validateOpti</text><text x="612" y="650"  fill="rgb(254 199 0)">o</text><text x="615" y="650"  fill="rgb(254 198 1)">n</text><text x="618" y="650"  fill="rgb(252 200 0)">s</text><text x="621" y="650"  fill="rgb(252 199 0)">(</text><text x="624" y="650"  fill="rgb(255 195 1)">q</text><text x="627" y="650"  fill="rgb(250 200 0)">.</text><text x="630" y="650"  fill="rgb(249 218 103)">O</text><text x="633" y="650"  fill="rgb(247 245 231)">P</text><text x="636" y="650"  fill="rgb(246 245 247)">T</text><text x="639" y="650"  fill="rgb(246 246 246)">IONS); } public validat</text><text x="708" y="650"  fill="rgb(246 246 245)">e</text><text x="711" y="650"  fill="rgb(255 253 247)">T</text><text x="714" y="650"  fill="rgb(161 189 228)">r</text><text x="717" y="650"  fill="rgb(0 133 223)">a</text><text x="720" y="650"  fill="rgb(0 151 224)">n</text><text x="723" y="650"  fill="rgb(1 148 230)">s</text><text x="726" y="650"  fill="rgb(1 147 227)">fo</text><text x="732" y="650"  fill="rgb(1 147 225)">r</text><text x="735" y="650"  fill="rgb(1 148 230)">ma</text><text x="741" y="650"  fill="rgb(1 147 227)">t</text><text x="744" y="650"  fill="rgb(1 148 226)">i</text><text x="747" y="650"  fill="rgb(0 148 228)">o</text><text x="750" y="650"  fill="rgb(1 148 228)">ns(q: any): void { </text><text x="807" y="650"  fill="rgb(0 148 227)">i</text><text x="810" y="650"  fill="rgb(1 147 229)">f</text><text x="813" y="650"  fill="rgb(0 148 221)"> </text><text x="816" y="650"  fill="rgb(2 145 235)">(</text><text x="819" y="650"  fill="rgb(0 147 227)">t</text><text x="822" y="650"  fill="rgb(0 145 225)">y</text><text x="825" y="650"  fill="rgb(19 138 220)">p</text><text x="828" y="650"  fill="rgb(231 235 241)">e</text><text x="831" y="650"  fill="rgb(253 250 247)">o</text><text x="834" y="650"  fill="rgb(245 245 246)">f</text><text x="837" y="650"  fill="rgb(246 246 246)"> q.GROUP === &quot;und</text><text x="888" y="650"  fill="rgb(245 246 245)">e</text><text x="891" y="650"  fill="rgb(245 245 245)">f</text><text x="894" y="650"  fill="rgb(246 246 248)">i</text><text x="897" y="650"  fill="rgb(255 250 255)">n</text><text x="900" y="650"  fill="rgb(255 253 255)">e</text><text x="903" y="650"  fill="rgb(223 236 209)">d</text><text x="906" y="650"  fill="rgb(152 202 57)">&quot;</text><text x="909" y="650"  fill="rgb(105 186 0)"> </text><text x="912" y="650"  fill="rgb(123 196 27)">|</text><text x="915" y="650"  fill="rgb(135 199 31)">|</text><text x="918" y="650"  fill="rgb(135 197 29)"> </text><text x="921" y="650"  fill="rgb(132 198 31)">t</text><text x="924" y="650"  fill="rgb(133 198 33)">y</text><text x="927" y="650"  fill="rgb(133 198 31)">p</text><text x="930" y="650"  fill="rgb(133 197 32)">e</text><text x="933" y="650"  fill="rgb(133 198 31)">o</text><text x="936" y="650"  fill="rgb(133 197 32)">f</text><text x="939" y="650"  fill="rgb(133 198 30)"> </text><text x="942" y="650"  fill="rgb(133 198 31)">q</text><text x="945" y="650"  fill="rgb(133 197 32)">.</text><text x="948" y="650"  fill="rgb(133 198 32)">APPLY === &quot;u</text><text x="984" y="650"  fill="rgb(132 198 31)">n</text><text x="987" y="650"  fill="rgb(133 198 32)">d</text><text x="990" y="650"  fill="rgb(132 198 33)">e</text><text x="993" y="650"  fill="rgb(132 198 31)">f</text><text x="996" y="650"  fill="rgb(133 197 32)">i</text><text x="999" y="650"  fill="rgb(133 197 31)">n</text><text x="1002" y="650"  fill="rgb(133 198 32)">e</text><text x="1005" y="650"  fill="rgb(132 196 34)">d</text><text x="1008" y="650"  fill="rgb(120 194 0)">&quot;</text><text x="1011" y="650"  fill="rgb(216 230 211)"> </text><text x="1014" y="650"  fill="rgb(249 248 250)">|</text><text x="1017" y="650"  fill="rgb(245 246 245)">|</text><text x="1020" y="650"  fill="rgb(246 246 246)"> Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isA</text><text x="0" y="655"  fill="rgb(246 246 246)">rray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transf</text><text x="516" y="655"  fill="rgb(246 245 246)">o</text><text x="519" y="655"  fill="rgb(245 246 251)">r</text><text x="522" y="655"  fill="rgb(251 207 32)">m</text><text x="525" y="655"  fill="rgb(255 194 0)">a</text><text x="528" y="655"  fill="rgb(253 202 0)">t</text><text x="531" y="655"  fill="rgb(253 201 0)">i</text><text x="534" y="655"  fill="rgb(255 199 0)">onKey.push(key); // if the k</text><text x="618" y="655"  fill="rgb(254 200 0)">e</text><text x="621" y="655"  fill="rgb(254 198 1)">y</text><text x="624" y="655"  fill="rgb(254 199 0)"> </text><text x="627" y="655"  fill="rgb(253 197 0)">i</text><text x="630" y="655"  fill="rgb(248 230 185)">s</text><text x="633" y="655"  fill="rgb(246 248 251)"> </text><text x="636" y="655"  fill="rgb(246 246 245)">v</text><text x="639" y="655"  fill="rgb(246 246 246)">alid, push it to trans</text><text x="705" y="655"  fill="rgb(245 245 246)">f</text><text x="708" y="655"  fill="rgb(250 248 246)">o</text><text x="711" y="655"  fill="rgb(212 223 239)">r</text><text x="714" y="655"  fill="rgb(0 127 231)">m</text><text x="717" y="655"  fill="rgb(0 150 226)">a</text><text x="720" y="655"  fill="rgb(0 146 228)">t</text><text x="723" y="655"  fill="rgb(0 146 227)">i</text><text x="726" y="655"  fill="rgb(1 147 228)">o</text><text x="729" y="655"  fill="rgb(1 148 226)">n</text><text x="732" y="655"  fill="rgb(1 148 227)">K</text><text x="735" y="655"  fill="rgb(0 147 227)">e</text><text x="738" y="655"  fill="rgb(1 147 227)">y</text><text x="741" y="655"  fill="rgb(0 148 228)"> }</text><text x="747" y="655"  fill="rgb(1 148 228)"> } private validateK</text><text x="807" y="655"  fill="rgb(2 146 227)">e</text><text x="810" y="655"  fill="rgb(0 148 227)">y</text><text x="813" y="655"  fill="rgb(0 150 226)">(</text><text x="816" y="655"  fill="rgb(0 145 228)">k</text><text x="819" y="655"  fill="rgb(0 149 222)">e</text><text x="822" y="655"  fill="rgb(0 149 229)">y</text><text x="825" y="655"  fill="rgb(0 141 232)">:</text><text x="828" y="655"  fill="rgb(77 164 225)"> </text><text x="831" y="655"  fill="rgb(245 242 246)">s</text><text x="834" y="655"  fill="rgb(246 246 245)">t</text><text x="837" y="655"  fill="rgb(246 246 246)">ring): void { let sp</text><text x="897" y="655"  fill="rgb(245 245 245)">l</text><text x="900" y="655"  fill="rgb(247 246 248)">i</text><text x="903" y="655"  fill="rgb(255 249 255)">t</text><text x="906" y="655"  fill="rgb(255 255 255)">t</text><text x="909" y="655"  fill="rgb(219 233 209)">e</text><text x="912" y="655"  fill="rgb(137 197 24)">d</text><text x="915" y="655"  fill="rgb(113 187 0)">K</text><text x="918" y="655"  fill="rgb(127 198 29)">e</text><text x="921" y="655"  fill="rgb(133 197 33)">y</text><text x="924" y="655"  fill="rgb(133 197 30)">:</text><text x="927" y="655"  fill="rgb(133 198 30)"> </text><text x="930" y="655"  fill="rgb(132 198 31)">s</text><text x="933" y="655"  fill="rgb(132 198 32)">t</text><text x="936" y="655"  fill="rgb(133 198 31)">r</text><text x="939" y="655"  fill="rgb(133 197 33)">i</text><text x="942" y="655"  fill="rgb(133 197 32)">n</text><text x="945" y="655"  fill="rgb(133 198 31)">g</text><text x="948" y="655"  fill="rgb(133 198 32)">[] = key.spli</text><text x="987" y="655"  fill="rgb(133 198 31)">t</text><text x="990" y="655"  fill="rgb(133 197 31)">(</text><text x="993" y="655"  fill="rgb(133 197 32)">&quot;</text><text x="996" y="655"  fill="rgb(133 198 31)">_</text><text x="999" y="655"  fill="rgb(133 198 32)">&quot;</text><text x="1002" y="655"  fill="rgb(133 197 31)">)</text><text x="1005" y="655"  fill="rgb(133 198 34)">;</text><text x="1008" y="655"  fill="rgb(127 196 14)"> </text><text x="1011" y="655"  fill="rgb(146 199 39)">i</text><text x="1014" y="655"  fill="rgb(247 246 250)">f</text><text x="1017" y="655"  fill="rgb(246 245 246)"> </text><text x="1020" y="655"  fill="rgb(246 246 246)">(splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(spli</text><text x="0" y="660"  fill="rgb(246 246 246)">ttedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should</text><text x="513" y="660"  fill="rgb(246 246 245)"> </text><text x="516" y="660"  fill="rgb(245 246 252)">h</text><text x="519" y="660"  fill="rgb(251 239 171)">a</text><text x="522" y="660"  fill="rgb(251 192 0)">v</text><text x="525" y="660"  fill="rgb(255 197 0)">e</text><text x="528" y="660"  fill="rgb(251 200 0)"> </text><text x="531" y="660"  fill="rgb(253 201 0)">a</text><text x="534" y="660"  fill="rgb(255 199 0)">t least one element } for (le</text><text x="621" y="660"  fill="rgb(255 198 0)">t</text><text x="624" y="660"  fill="rgb(250 204 0)"> </text><text x="627" y="660"  fill="rgb(255 197 0)">a</text><text x="630" y="660"  fill="rgb(250 232 186)">p</text><text x="633" y="660"  fill="rgb(245 246 250)">p</text><text x="636" y="660"  fill="rgb(246 246 245)">l</text><text x="639" y="660"  fill="rgb(246 246 246)">yrule of q) { if (Arra</text><text x="705" y="660"  fill="rgb(246 245 245)">y</text><text x="708" y="660"  fill="rgb(255 251 248)">.</text><text x="711" y="660"  fill="rgb(8 140 220)">i</text><text x="714" y="660"  fill="rgb(0 149 220)">s</text><text x="717" y="660"  fill="rgb(1 146 227)">A</text><text x="720" y="660"  fill="rgb(0 145 224)">r</text><text x="723" y="660"  fill="rgb(0 148 224)">r</text><text x="726" y="660"  fill="rgb(1 148 227)">ay(a</text><text x="738" y="660"  fill="rgb(1 148 228)">pplyrule) || Object.key</text><text x="807" y="660"  fill="rgb(1 147 227)">s</text><text x="810" y="660"  fill="rgb(0 148 228)">(</text><text x="813" y="660"  fill="rgb(0 148 226)">a</text><text x="816" y="660"  fill="rgb(0 146 223)">p</text><text x="819" y="660"  fill="rgb(1 150 226)">p</text><text x="822" y="660"  fill="rgb(0 147 233)">l</text><text x="825" y="660"  fill="rgb(0 147 226)">y</text><text x="828" y="660"  fill="rgb(0 132 222)">r</text><text x="831" y="660"  fill="rgb(183 217 241)">u</text><text x="834" y="660"  fill="rgb(249 247 245)">l</text><text x="837" y="660"  fill="rgb(246 246 246)">e).length &gt; 1) { thro</text><text x="900" y="660"  fill="rgb(245 245 245)">w </text><text x="906" y="660"  fill="rgb(246 245 247)">n</text><text x="909" y="660"  fill="rgb(255 250 255)">ew</text><text x="915" y="660"  fill="rgb(196 221 146)"> </text><text x="918" y="660"  fill="rgb(121 190 0)">I</text><text x="921" y="660"  fill="rgb(119 192 0)">n</text><text x="924" y="660"  fill="rgb(132 197 35)">s</text><text x="927" y="660"  fill="rgb(134 198 32)">i</text><text x="930" y="660"  fill="rgb(133 197 33)">g</text><text x="933" y="660"  fill="rgb(132 197 33)">h</text><text x="936" y="660"  fill="rgb(133 198 30)">t</text><text x="939" y="660"  fill="rgb(133 197 32)">Er</text><text x="945" y="660"  fill="rgb(133 198 32)">ror(); } let apply</text><text x="999" y="660"  fill="rgb(133 198 31)">k</text><text x="1002" y="660"  fill="rgb(132 198 32)">e</text><text x="1005" y="660"  fill="rgb(132 197 31)">y</text><text x="1008" y="660"  fill="rgb(131 199 32)">:</text><text x="1011" y="660"  fill="rgb(117 188 0)"> </text><text x="1014" y="660"  fill="rgb(211 230 179)">s</text><text x="1017" y="660"  fill="rgb(248 246 251)">t</text><text x="1020" y="660"  fill="rgb(246 246 246)">ring = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { th</text><text x="0" y="665"  fill="rgb(246 246 246)">row new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applyto</text><text x="513" y="665"  fill="rgb(246 245 245)">k</text><text x="516" y="665"  fill="rgb(247 252 255)">e</text><text x="519" y="665"  fill="rgb(253 203 75)">n</text><text x="522" y="665"  fill="rgb(252 201 0)">:</text><text x="525" y="665"  fill="rgb(254 197 0)"> </text><text x="528" y="665"  fill="rgb(252 200 0)">s</text><text x="531" y="665"  fill="rgb(254 199 0)">t</text><text x="534" y="665"  fill="rgb(254 198 0)">r</text><text x="537" y="665"  fill="rgb(255 199 0)">ing = Object.keys(criteria)</text><text x="618" y="665"  fill="rgb(254 197 1)">[</text><text x="621" y="665"  fill="rgb(250 199 1)">0</text><text x="624" y="665"  fill="rgb(252 199 0)">]</text><text x="627" y="665"  fill="rgb(248 205 74)">;</text><text x="630" y="665"  fill="rgb(248 244 222)"> </text><text x="633" y="665"  fill="rgb(246 246 247)">i</text><text x="636" y="665"  fill="rgb(246 246 246)">f (!this.mtoken.includ</text><text x="702" y="665"  fill="rgb(245 246 246)">e</text><text x="705" y="665"  fill="rgb(252 248 246)">s</text><text x="708" y="665"  fill="rgb(155 208 233)">(</text><text x="711" y="665"  fill="rgb(0 133 218)">a</text><text x="714" y="665"  fill="rgb(0 151 233)">p</text><text x="717" y="665"  fill="rgb(1 144 232)">p</text><text x="720" y="665"  fill="rgb(0 146 223)">l</text><text x="723" y="665"  fill="rgb(0 146 228)">y</text><text x="726" y="665"  fill="rgb(0 147 227)">to</text><text x="732" y="665"  fill="rgb(1 148 226)">k</text><text x="735" y="665"  fill="rgb(0 148 226)">e</text><text x="738" y="665"  fill="rgb(1 148 228)">n) &amp;&amp; !this.mstoken.inc</text><text x="807" y="665"  fill="rgb(0 148 226)">l</text><text x="810" y="665"  fill="rgb(3 145 228)">u</text><text x="813" y="665"  fill="rgb(0 147 226)">d</text><text x="816" y="665"  fill="rgb(1 149 230)">e</text><text x="819" y="665"  fill="rgb(0 149 229)">s</text><text x="822" y="665"  fill="rgb(2 145 222)">(</text><text x="825" y="665"  fill="rgb(0 148 226)">a</text><text x="828" y="665"  fill="rgb(0 145 228)">p</text><text x="831" y="665"  fill="rgb(0 135 221)">p</text><text x="834" y="665"  fill="rgb(255 255 248)">l</text><text x="837" y="665"  fill="rgb(245 245 246)">y</text><text x="840" y="665"  fill="rgb(246 246 246)">token)) { throw new In</text><text x="906" y="665"  fill="rgb(246 246 245)">s</text><text x="909" y="665"  fill="rgb(245 245 245)">i</text><text x="912" y="665"  fill="rgb(247 246 249)">g</text><text x="915" y="665"  fill="rgb(255 252 255)">h</text><text x="918" y="665"  fill="rgb(245 244 252)">t</text><text x="921" y="665"  fill="rgb(165 208 79)">E</text><text x="924" y="665"  fill="rgb(107 188 0)">r</text><text x="927" y="665"  fill="rgb(124 197 24)">r</text><text x="930" y="665"  fill="rgb(137 199 29)">o</text><text x="933" y="665"  fill="rgb(135 198 28)">r</text><text x="936" y="665"  fill="rgb(133 197 36)">(</text><text x="939" y="665"  fill="rgb(133 198 31)">)</text><text x="942" y="665"  fill="rgb(133 198 32)">;</text><text x="945" y="665"  fill="rgb(132 198 32)"> </text><text x="948" y="665"  fill="rgb(133 197 32)">}</text><text x="951" y="665"  fill="rgb(133 198 32)"> l</text><text x="957" y="665"  fill="rgb(133 197 32)">e</text><text x="960" y="665"  fill="rgb(133 198 32)">t</text><text x="963" y="665"  fill="rgb(133 198 31)"> </text><text x="966" y="665"  fill="rgb(133 198 32)">key: string[</text><text x="1002" y="665"  fill="rgb(133 197 31)">]</text><text x="1005" y="665"  fill="rgb(132 198 31)"> </text><text x="1008" y="665"  fill="rgb(134 197 34)">=</text><text x="1011" y="665"  fill="rgb(126 198 1)"> </text><text x="1014" y="665"  fill="rgb(146 200 73)">c</text><text x="1017" y="665"  fill="rgb(255 252 255)">r</text><text x="1020" y="665"  fill="rgb(245 245 245)">i</text><text x="1023" y="665"  fill="rgb(246 246 246)">teria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfiel</text><text x="0" y="670"  fill="rgb(246 246 246)">ds.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) </text><text x="510" y="670"  fill="rgb(246 246 245)">|</text><text x="513" y="670"  fill="rgb(245 247 251)">|</text><text x="516" y="670"  fill="rgb(248 238 187)"> </text><text x="519" y="670"  fill="rgb(251 198 0)">t</text><text x="522" y="670"  fill="rgb(254 202 0)">h</text><text x="525" y="670"  fill="rgb(254 197 0)">i</text><text x="528" y="670"  fill="rgb(255 201 1)">s</text><text x="531" y="670"  fill="rgb(255 200 1)">.</text><text x="534" y="670"  fill="rgb(255 199 0)">mfields.includes(key[1])))) </text><text x="618" y="670"  fill="rgb(255 197 0)">{</text><text x="621" y="670"  fill="rgb(251 202 1)"> </text><text x="624" y="670"  fill="rgb(254 198 0)">t</text><text x="627" y="670"  fill="rgb(250 214 121)">h</text><text x="630" y="670"  fill="rgb(246 250 255)">r</text><text x="633" y="670"  fill="rgb(246 245 245)">o</text><text x="636" y="670"  fill="rgb(246 246 246)">w new InsightError(); </text><text x="702" y="670"  fill="rgb(245 245 245)">}</text><text x="705" y="670"  fill="rgb(255 255 250)"> </text><text x="708" y="670"  fill="rgb(104 161 219)">}</text><text x="711" y="670"  fill="rgb(0 145 226)"> </text><text x="714" y="670"  fill="rgb(0 146 234)">}</text><text x="717" y="670"  fill="rgb(0 148 222)"> </text><text x="720" y="670"  fill="rgb(0 152 224)">}</text><text x="723" y="670"  fill="rgb(0 146 228)"> </text><text x="726" y="670"  fill="rgb(1 148 228)">p</text><text x="729" y="670"  fill="rgb(1 148 226)">u</text><text x="732" y="670"  fill="rgb(1 148 228)">b</text><text x="735" y="670"  fill="rgb(1 148 227)">l</text><text x="738" y="670"  fill="rgb(1 148 228)">ic validateOptions(q: a</text><text x="807" y="670"  fill="rgb(1 147 228)">n</text><text x="810" y="670"  fill="rgb(0 148 227)">y</text><text x="813" y="670"  fill="rgb(1 148 228)">)</text><text x="816" y="670"  fill="rgb(1 147 227)">: </text><text x="822" y="670"  fill="rgb(0 148 228)">v</text><text x="825" y="670"  fill="rgb(1 147 228)">o</text><text x="828" y="670"  fill="rgb(1 149 227)">i</text><text x="831" y="670"  fill="rgb(0 128 218)">d</text><text x="834" y="670"  fill="rgb(174 217 243)"> </text><text x="837" y="670"  fill="rgb(250 248 245)">{</text><text x="840" y="670"  fill="rgb(246 246 246)"> let keys: any[] = Object</text><text x="915" y="670"  fill="rgb(245 245 245)">.</text><text x="918" y="670"  fill="rgb(250 248 254)">k</text><text x="921" y="670"  fill="rgb(255 255 255)">e</text><text x="924" y="670"  fill="rgb(227 234 216)">y</text><text x="927" y="670"  fill="rgb(136 195 20)">s</text><text x="930" y="670"  fill="rgb(107 190 0)">(</text><text x="933" y="670"  fill="rgb(129 200 28)">q</text><text x="936" y="670"  fill="rgb(132 199 27)">)</text><text x="939" y="670"  fill="rgb(132 197 32)">;</text><text x="942" y="670"  fill="rgb(132 198 31)"> </text><text x="945" y="670"  fill="rgb(133 197 32)">f</text><text x="948" y="670"  fill="rgb(132 198 31)">o</text><text x="951" y="670"  fill="rgb(133 198 31)">r</text><text x="954" y="670"  fill="rgb(133 197 32)"> </text><text x="957" y="670"  fill="rgb(133 198 31)">(l</text><text x="963" y="670"  fill="rgb(133 198 33)">e</text><text x="966" y="670"  fill="rgb(133 198 32)">t key of key</text><text x="1002" y="670"  fill="rgb(132 198 32)">s</text><text x="1005" y="670"  fill="rgb(134 197 32)">)</text><text x="1008" y="670"  fill="rgb(133 196 30)"> </text><text x="1011" y="670"  fill="rgb(130 200 34)">{</text><text x="1014" y="670"  fill="rgb(128 192 15)"> </text><text x="1017" y="670"  fill="rgb(219 234 188)">i</text><text x="1020" y="670"  fill="rgb(248 247 250)">f</text><text x="1023" y="670"  fill="rgb(245 246 245)"> </text><text x="1026" y="670"  fill="rgb(246 246 246)">(key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateCo</text><text x="0" y="675"  fill="rgb(246 246 246)">lumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.in</text><text x="510" y="675"  fill="rgb(246 246 245)">c</text><text x="513" y="675"  fill="rgb(246 248 251)">l</text><text x="516" y="675"  fill="rgb(249 220 159)">u</text><text x="519" y="675"  fill="rgb(254 199 0)">d</text><text x="522" y="675"  fill="rgb(253 198 1)">e</text><text x="525" y="675"  fill="rgb(254 199 0)">s</text><text x="528" y="675"  fill="rgb(252 199 0)">(</text><text x="531" y="675"  fill="rgb(255 199 0)">mskey)) { throw new Insight</text><text x="612" y="675"  fill="rgb(254 199 0)">E</text><text x="615" y="675"  fill="rgb(254 198 1)">r</text><text x="618" y="675"  fill="rgb(255 198 0)">r</text><text x="621" y="675"  fill="rgb(254 199 0)">o</text><text x="624" y="675"  fill="rgb(255 197 0)">r</text><text x="627" y="675"  fill="rgb(253 219 123)">(</text><text x="630" y="675"  fill="rgb(245 247 252)">)</text><text x="633" y="675"  fill="rgb(246 246 245)">;</text><text x="636" y="675"  fill="rgb(246 246 246)"> } } else { this.valid</text><text x="702" y="675"  fill="rgb(249 247 246)">a</text><text x="705" y="675"  fill="rgb(195 224 237)">t</text><text x="708" y="675"  fill="rgb(12 150 229)">e</text><text x="711" y="675"  fill="rgb(0 144 232)">K</text><text x="714" y="675"  fill="rgb(2 146 224)">e</text><text x="717" y="675"  fill="rgb(0 150 222)">y</text><text x="720" y="675"  fill="rgb(0 147 226)">(</text><text x="723" y="675"  fill="rgb(0 145 230)">m</text><text x="726" y="675"  fill="rgb(1 148 228)">s</text><text x="729" y="675"  fill="rgb(2 148 227)">k</text><text x="732" y="675"  fill="rgb(1 148 228)">e</text><text x="735" y="675"  fill="rgb(0 148 226)">y</text><text x="738" y="675"  fill="rgb(1 148 228)">); } this.keysInQuery.pu</text><text x="810" y="675"  fill="rgb(0 148 228)">s</text><text x="813" y="675"  fill="rgb(1 148 228)">h</text><text x="816" y="675"  fill="rgb(0 148 227)">(</text><text x="819" y="675"  fill="rgb(1 148 228)">m</text><text x="822" y="675"  fill="rgb(0 148 228)">s</text><text x="825" y="675"  fill="rgb(1 148 227)">k</text><text x="828" y="675"  fill="rgb(0 149 227)">e</text><text x="831" y="675"  fill="rgb(0 143 222)">y</text><text x="834" y="675"  fill="rgb(116 177 243)">)</text><text x="837" y="675"  fill="rgb(254 250 246)">;</text><text x="840" y="675"  fill="rgb(245 245 246)"> </text><text x="843" y="675"  fill="rgb(246 246 246)">} } private validateOrde</text><text x="915" y="675"  fill="rgb(246 246 245)">r</text><text x="918" y="675"  fill="rgb(245 245 245)">(q</text><text x="924" y="675"  fill="rgb(254 250 255)">:</text><text x="927" y="675"  fill="rgb(255 250 255)"> </text><text x="930" y="675"  fill="rgb(181 221 129)">a</text><text x="933" y="675"  fill="rgb(115 185 0)">n</text><text x="936" y="675"  fill="rgb(131 194 18)">y</text><text x="939" y="675"  fill="rgb(133 198 34)">)</text><text x="942" y="675"  fill="rgb(132 197 32)">:</text><text x="945" y="675"  fill="rgb(132 198 32)"> </text><text x="948" y="675"  fill="rgb(132 198 30)">v</text><text x="951" y="675"  fill="rgb(132 198 34)">o</text><text x="954" y="675"  fill="rgb(133 198 31)">i</text><text x="957" y="675"  fill="rgb(133 197 33)">d</text><text x="960" y="675"  fill="rgb(133 198 30)"> </text><text x="963" y="675"  fill="rgb(133 198 31)">{</text><text x="966" y="675"  fill="rgb(133 198 32)"> if (Array.</text><text x="999" y="675"  fill="rgb(133 198 31)">i</text><text x="1002" y="675"  fill="rgb(130 197 31)">s</text><text x="1005" y="675"  fill="rgb(134 198 31)">A</text><text x="1008" y="675"  fill="rgb(133 199 30)">r</text><text x="1011" y="675"  fill="rgb(132 197 38)">r</text><text x="1014" y="675"  fill="rgb(126 197 0)">a</text><text x="1017" y="675"  fill="rgb(193 218 162)">y</text><text x="1020" y="675"  fill="rgb(252 248 254)">(</text><text x="1023" y="675"  fill="rgb(245 245 245)">q</text><text x="1026" y="675"  fill="rgb(246 246 246)">)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Obje</text><text x="0" y="680"  fill="rgb(246 246 246)">ct.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(ke</text><text x="510" y="680"  fill="rgb(246 245 248)">y</text><text x="513" y="680"  fill="rgb(248 243 216)">s</text><text x="516" y="680"  fill="rgb(254 206 61)">)</text><text x="519" y="680"  fill="rgb(252 197 0)"> </text><text x="522" y="680"  fill="rgb(253 201 0)">|</text><text x="525" y="680"  fill="rgb(254 201 0)">|</text><text x="528" y="680"  fill="rgb(252 200 0)"> </text><text x="531" y="680"  fill="rgb(254 200 0)">k</text><text x="534" y="680"  fill="rgb(255 197 0)">e</text><text x="537" y="680"  fill="rgb(255 199 0)">ys.length &lt; 1) { throw new</text><text x="615" y="680"  fill="rgb(253 199 0)"> </text><text x="618" y="680"  fill="rgb(255 199 1)">I</text><text x="621" y="680"  fill="rgb(252 201 0)">n</text><text x="624" y="680"  fill="rgb(250 196 0)">s</text><text x="627" y="680"  fill="rgb(252 224 140)">i</text><text x="630" y="680"  fill="rgb(245 247 251)">g</text><text x="633" y="680"  fill="rgb(246 246 246)">htError(); } for (let </text><text x="699" y="680"  fill="rgb(245 245 245)">a</text><text x="702" y="680"  fill="rgb(255 255 249)">n</text><text x="705" y="680"  fill="rgb(209 216 237)">y</text><text x="708" y="680"  fill="rgb(0 139 222)">k</text><text x="711" y="680"  fill="rgb(0 147 222)">e</text><text x="714" y="680"  fill="rgb(0 152 224)">y</text><text x="717" y="680"  fill="rgb(0 149 228)"> </text><text x="720" y="680"  fill="rgb(0 144 229)">o</text><text x="723" y="680"  fill="rgb(1 148 224)">f</text><text x="726" y="680"  fill="rgb(1 148 225)"> </text><text x="729" y="680"  fill="rgb(0 147 228)">k</text><text x="732" y="680"  fill="rgb(1 148 228)">eys) { if (!this.keysInQuery.in</text><text x="825" y="680"  fill="rgb(0 148 228)">c</text><text x="828" y="680"  fill="rgb(2 147 227)">l</text><text x="831" y="680"  fill="rgb(0 146 227)">u</text><text x="834" y="680"  fill="rgb(132 170 219)">d</text><text x="837" y="680"  fill="rgb(255 255 252)">e</text><text x="840" y="680"  fill="rgb(249 247 246)">s</text><text x="843" y="680"  fill="rgb(245 245 246)">(</text><text x="846" y="680"  fill="rgb(246 246 246)">anykey)) { throw new Insig</text><text x="924" y="680"  fill="rgb(245 245 245)">h</text><text x="927" y="680"  fill="rgb(248 246 251)">t</text><text x="930" y="680"  fill="rgb(255 254 255)">E</text><text x="933" y="680"  fill="rgb(211 232 181)">r</text><text x="936" y="680"  fill="rgb(123 190 12)">r</text><text x="939" y="680"  fill="rgb(122 191 0)">o</text><text x="942" y="680"  fill="rgb(135 199 34)">r</text><text x="945" y="680"  fill="rgb(133 197 28)">(</text><text x="948" y="680"  fill="rgb(135 197 34)">)</text><text x="951" y="680"  fill="rgb(133 197 31)">;</text><text x="954" y="680"  fill="rgb(132 197 32)"> </text><text x="957" y="680"  fill="rgb(133 198 30)">}</text><text x="960" y="680"  fill="rgb(133 198 32)"> } } } public</text><text x="999" y="680"  fill="rgb(133 198 31)"> </text><text x="1002" y="680"  fill="rgb(133 198 30)">v</text><text x="1005" y="680"  fill="rgb(132 197 34)">a</text><text x="1008" y="680"  fill="rgb(131 198 31)">l</text><text x="1011" y="680"  fill="rgb(133 198 27)">i</text><text x="1014" y="680"  fill="rgb(127 197 2)">d</text><text x="1017" y="680"  fill="rgb(155 203 93)">a</text><text x="1020" y="680"  fill="rgb(233 241 223)">t</text><text x="1023" y="680"  fill="rgb(246 246 247)">e</text><text x="1026" y="680"  fill="rgb(246 246 246)">Where(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q</text><text x="0" y="685"  fill="rgb(246 246 246)">: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (k</text><text x="507" y="685"  fill="rgb(246 246 245)">e</text><text x="510" y="685"  fill="rgb(246 247 249)">y</text><text x="513" y="685"  fill="rgb(246 236 216)">)</text><text x="516" y="685"  fill="rgb(252 196 0)"> </text><text x="519" y="685"  fill="rgb(251 200 0)">{</text><text x="522" y="685"  fill="rgb(250 203 1)"> </text><text x="525" y="685"  fill="rgb(254 196 0)">c</text><text x="528" y="685"  fill="rgb(255 197 0)">a</text><text x="531" y="685"  fill="rgb(255 198 0)">se</text><text x="537" y="685"  fill="rgb(255 199 0)"> &quot;AND&quot;: case &quot;OR&quot;: this.v</text><text x="612" y="685"  fill="rgb(254 199 0)">a</text><text x="615" y="685"  fill="rgb(254 198 0)">l</text><text x="618" y="685"  fill="rgb(253 200 0)">i</text><text x="621" y="685"  fill="rgb(255 197 0)">d</text><text x="624" y="685"  fill="rgb(251 193 0)">a</text><text x="627" y="685"  fill="rgb(249 243 168)">t</text><text x="630" y="685"  fill="rgb(246 246 250)">e</text><text x="633" y="685"  fill="rgb(246 246 246)">ANDOR(value); break; </text><text x="696" y="685"  fill="rgb(245 245 245)">c</text><text x="699" y="685"  fill="rgb(254 250 247)">a</text><text x="702" y="685"  fill="rgb(226 229 240)">s</text><text x="705" y="685"  fill="rgb(0 132 221)">e</text><text x="708" y="685"  fill="rgb(0 146 226)"> </text><text x="711" y="685"  fill="rgb(1 148 228)">&quot;</text><text x="714" y="685"  fill="rgb(1 147 230)">N</text><text x="717" y="685"  fill="rgb(1 147 226)">O</text><text x="720" y="685"  fill="rgb(1 148 227)">T</text><text x="723" y="685"  fill="rgb(0 148 229)">&quot;</text><text x="726" y="685"  fill="rgb(0 147 228)">:</text><text x="729" y="685"  fill="rgb(1 148 228)"> t</text><text x="735" y="685"  fill="rgb(1 148 227)">h</text><text x="738" y="685"  fill="rgb(1 148 228)">is.validateNOT(value); break;</text><text x="825" y="685"  fill="rgb(1 148 226)"> </text><text x="828" y="685"  fill="rgb(0 148 228)">c</text><text x="831" y="685"  fill="rgb(0 148 225)">a</text><text x="834" y="685"  fill="rgb(0 141 227)">s</text><text x="837" y="685"  fill="rgb(108 179 227)">e</text><text x="840" y="685"  fill="rgb(245 244 245)"> </text><text x="843" y="685"  fill="rgb(246 246 245)">&quot;</text><text x="846" y="685"  fill="rgb(246 246 246)">GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: </text><text x="927" y="685"  fill="rgb(246 246 245)">t</text><text x="930" y="685"  fill="rgb(245 245 246)">h</text><text x="933" y="685"  fill="rgb(255 250 255)">i</text><text x="936" y="685"  fill="rgb(249 248 253)">s</text><text x="939" y="685"  fill="rgb(160 205 96)">.</text><text x="942" y="685"  fill="rgb(109 191 0)">v</text><text x="945" y="685"  fill="rgb(129 199 33)">a</text><text x="948" y="685"  fill="rgb(135 196 36)">l</text><text x="951" y="685"  fill="rgb(134 198 27)">i</text><text x="954" y="685"  fill="rgb(134 198 28)">d</text><text x="957" y="685"  fill="rgb(132 197 33)">a</text><text x="960" y="685"  fill="rgb(132 198 33)">t</text><text x="963" y="685"  fill="rgb(132 198 31)">e</text><text x="966" y="685"  fill="rgb(133 197 32)">G</text><text x="969" y="685"  fill="rgb(133 198 31)">TL</text><text x="975" y="685"  fill="rgb(133 198 32)">TEQ(value</text><text x="1002" y="685"  fill="rgb(132 199 33)">)</text><text x="1005" y="685"  fill="rgb(133 198 30)">;</text><text x="1008" y="685"  fill="rgb(130 199 33)"> </text><text x="1011" y="685"  fill="rgb(134 198 36)">b</text><text x="1014" y="685"  fill="rgb(132 199 31)">r</text><text x="1017" y="685"  fill="rgb(127 197 0)">e</text><text x="1020" y="685"  fill="rgb(221 233 209)">a</text><text x="1023" y="685"  fill="rgb(248 247 249)">k</text><text x="1026" y="685"  fill="rgb(246 246 246)">; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new In</text><text x="0" y="690"  fill="rgb(246 246 246)">sightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).</text><text x="507" y="690"  fill="rgb(246 246 245)">l</text><text x="510" y="690"  fill="rgb(246 247 246)">e</text><text x="513" y="690"  fill="rgb(251 231 158)">n</text><text x="516" y="690"  fill="rgb(252 194 0)">g</text><text x="519" y="690"  fill="rgb(253 199 0)">t</text><text x="522" y="690"  fill="rgb(252 198 0)">h</text><text x="525" y="690"  fill="rgb(253 198 0)"> </text><text x="528" y="690"  fill="rgb(254 200 0)">!</text><text x="531" y="690"  fill="rgb(255 199 0)">=</text><text x="534" y="690"  fill="rgb(255 198 0)">=</text><text x="537" y="690"  fill="rgb(255 199 0)"> 1) { throw new InsightEr</text><text x="612" y="690"  fill="rgb(253 199 0)">ro</text><text x="618" y="690"  fill="rgb(255 199 0)">r</text><text x="621" y="690"  fill="rgb(254 198 2)">(</text><text x="624" y="690"  fill="rgb(251 194 0)">)</text><text x="627" y="690"  fill="rgb(251 246 189)">;</text><text x="630" y="690"  fill="rgb(246 245 249)"> </text><text x="633" y="690"  fill="rgb(246 246 246)">} let skey: string[]</text><text x="693" y="690"  fill="rgb(245 246 246)"> </text><text x="696" y="690"  fill="rgb(247 245 245)">=</text><text x="699" y="690"  fill="rgb(254 252 246)"> </text><text x="702" y="690"  fill="rgb(12 144 220)">O</text><text x="705" y="690"  fill="rgb(0 142 227)">b</text><text x="708" y="690"  fill="rgb(1 148 227)">j</text><text x="711" y="690"  fill="rgb(1 148 226)">e</text><text x="714" y="690"  fill="rgb(0 147 227)">c</text><text x="717" y="690"  fill="rgb(0 147 228)">t</text><text x="720" y="690"  fill="rgb(1 148 227)">.</text><text x="723" y="690"  fill="rgb(1 147 227)">k</text><text x="726" y="690"  fill="rgb(1 147 228)">e</text><text x="729" y="690"  fill="rgb(1 148 228)">ys(value)[0].split(&quot;_&quot;); if (ske</text><text x="825" y="690"  fill="rgb(2 147 226)">y</text><text x="828" y="690"  fill="rgb(1 148 228)">.</text><text x="831" y="690"  fill="rgb(1 145 233)">l</text><text x="834" y="690"  fill="rgb(0 147 228)">e</text><text x="837" y="690"  fill="rgb(0 120 216)">n</text><text x="840" y="690"  fill="rgb(204 226 239)">g</text><text x="843" y="690"  fill="rgb(248 247 246)">t</text><text x="846" y="690"  fill="rgb(245 246 246)">h</text><text x="849" y="690"  fill="rgb(246 246 246)"> !== 2) { throw new Insight</text><text x="930" y="690"  fill="rgb(245 246 245)">E</text><text x="933" y="690"  fill="rgb(245 245 245)">r</text><text x="936" y="690"  fill="rgb(250 248 254)">r</text><text x="939" y="690"  fill="rgb(255 252 255)">o</text><text x="942" y="690"  fill="rgb(175 212 117)">r</text><text x="945" y="690"  fill="rgb(116 190 0)">(</text><text x="948" y="690"  fill="rgb(131 200 21)">)</text><text x="951" y="690"  fill="rgb(130 199 38)">;</text><text x="954" y="690"  fill="rgb(133 197 30)"> </text><text x="957" y="690"  fill="rgb(132 198 31)">}</text><text x="960" y="690"  fill="rgb(133 198 30)"> </text><text x="963" y="690"  fill="rgb(132 198 31)">e</text><text x="966" y="690"  fill="rgb(133 198 31)">l</text><text x="969" y="690"  fill="rgb(133 198 32)">se { let i</text><text x="999" y="690"  fill="rgb(132 198 31)">ds</text><text x="1005" y="690"  fill="rgb(132 197 31)">t</text><text x="1008" y="690"  fill="rgb(132 198 32)">r</text><text x="1011" y="690"  fill="rgb(131 198 32)">i</text><text x="1014" y="690"  fill="rgb(133 198 29)">n</text><text x="1017" y="690"  fill="rgb(122 192 0)">g</text><text x="1020" y="690"  fill="rgb(218 232 211)">:</text><text x="1023" y="690"  fill="rgb(248 247 249)"> </text><text x="1026" y="690"  fill="rgb(246 246 245)">s</text><text x="1029" y="690"  fill="rgb(246 246 246)">tring = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1</text><text x="0" y="695"  fill="rgb(246 246 246)">, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void </text><text x="507" y="695"  fill="rgb(246 246 247)">{</text><text x="510" y="695"  fill="rgb(245 245 243)"> </text><text x="513" y="695"  fill="rgb(253 218 76)">i</text><text x="516" y="695"  fill="rgb(255 195 0)">f</text><text x="519" y="695"  fill="rgb(253 201 1)"> </text><text x="522" y="695"  fill="rgb(254 198 0)">(</text><text x="525" y="695"  fill="rgb(253 202 0)">t</text><text x="528" y="695"  fill="rgb(251 199 0)">y</text><text x="531" y="695"  fill="rgb(255 197 0)">p</text><text x="534" y="695"  fill="rgb(255 198 0)">e</text><text x="537" y="695"  fill="rgb(255 199 0)">of value !== &quot;object&quot; || O</text><text x="615" y="695"  fill="rgb(255 198 1)">b</text><text x="618" y="695"  fill="rgb(252 200 0)">j</text><text x="621" y="695"  fill="rgb(253 201 0)">e</text><text x="624" y="695"  fill="rgb(251 191 0)">c</text><text x="627" y="695"  fill="rgb(249 248 236)">t</text><text x="630" y="695"  fill="rgb(246 246 247)">.</text><text x="633" y="695"  fill="rgb(246 246 246)">keys(value).length </text><text x="690" y="695"  fill="rgb(245 245 245)">!</text><text x="693" y="695"  fill="rgb(252 249 247)">=</text><text x="696" y="695"  fill="rgb(255 255 253)">=</text><text x="699" y="695"  fill="rgb(116 168 224)"> </text><text x="702" y="695"  fill="rgb(0 137 223)">1</text><text x="705" y="695"  fill="rgb(1 147 225)">)</text><text x="708" y="695"  fill="rgb(1 147 231)"> </text><text x="711" y="695"  fill="rgb(1 147 229)">{</text><text x="714" y="695"  fill="rgb(1 148 228)"> </text><text x="717" y="695"  fill="rgb(1 148 226)">t</text><text x="720" y="695"  fill="rgb(1 148 228)">hrow new InsightError(); } let mkey</text><text x="825" y="695"  fill="rgb(0 148 229)">:</text><text x="828" y="695"  fill="rgb(0 147 226)"> </text><text x="831" y="695"  fill="rgb(1 150 225)">s</text><text x="834" y="695"  fill="rgb(0 146 218)">t</text><text x="837" y="695"  fill="rgb(0 135 228)">r</text><text x="840" y="695"  fill="rgb(188 215 236)">i</text><text x="843" y="695"  fill="rgb(255 255 254)">n</text><text x="846" y="695"  fill="rgb(255 251 248)">g</text><text x="849" y="695"  fill="rgb(245 245 245)">[</text><text x="852" y="695"  fill="rgb(245 246 246)">]</text><text x="855" y="695"  fill="rgb(246 246 246)"> = Object.keys(value)[0].sp</text><text x="936" y="695"  fill="rgb(245 245 245)">l</text><text x="939" y="695"  fill="rgb(247 246 249)">i</text><text x="942" y="695"  fill="rgb(255 252 255)">t</text><text x="945" y="695"  fill="rgb(204 225 176)">(</text><text x="948" y="695"  fill="rgb(114 185 0)">&quot;</text><text x="951" y="695"  fill="rgb(128 200 17)">_</text><text x="954" y="695"  fill="rgb(131 197 34)">&quot;</text><text x="957" y="695"  fill="rgb(133 198 31)">)</text><text x="960" y="695"  fill="rgb(132 198 33)">;</text><text x="963" y="695"  fill="rgb(133 197 32)"> </text><text x="966" y="695"  fill="rgb(133 198 30)">i</text><text x="969" y="695"  fill="rgb(132 197 33)">f</text><text x="972" y="695"  fill="rgb(133 197 33)"> </text><text x="975" y="695"  fill="rgb(133 197 32)">(m</text><text x="981" y="695"  fill="rgb(132 197 32)">k</text><text x="984" y="695"  fill="rgb(133 198 32)">ey.len</text><text x="1002" y="695"  fill="rgb(134 198 30)">g</text><text x="1005" y="695"  fill="rgb(132 197 30)">t</text><text x="1008" y="695"  fill="rgb(130 198 32)">h</text><text x="1011" y="695"  fill="rgb(133 197 35)"> </text><text x="1014" y="695"  fill="rgb(133 199 25)">!</text><text x="1017" y="695"  fill="rgb(120 199 0)">=</text><text x="1020" y="695"  fill="rgb(164 204 101)">=</text><text x="1023" y="695"  fill="rgb(245 245 243)"> </text><text x="1026" y="695"  fill="rgb(246 246 246)">2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;</text><text x="0" y="700"  fill="rgb(246 246 246)">) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(va</text><text x="510" y="700"  fill="rgb(245 245 245)">l</text><text x="513" y="700"  fill="rgb(252 203 0)">u</text><text x="516" y="700"  fill="rgb(253 196 0)">e</text><text x="519" y="700"  fill="rgb(252 200 0)">)</text><text x="522" y="700"  fill="rgb(255 198 0)"> </text><text x="525" y="700"  fill="rgb(254 201 2)">|</text><text x="528" y="700"  fill="rgb(253 198 0)">|</text><text x="531" y="700"  fill="rgb(255 199 0)"> value.length &lt; 1) { throw n</text><text x="615" y="700"  fill="rgb(255 198 0)">e</text><text x="618" y="700"  fill="rgb(255 199 0)">w </text><text x="624" y="700"  fill="rgb(251 199 0)">I</text><text x="627" y="700"  fill="rgb(246 246 251)">n</text><text x="630" y="700"  fill="rgb(246 246 245)">s</text><text x="633" y="700"  fill="rgb(246 246 246)">ightError(); } fo</text><text x="684" y="700"  fill="rgb(245 245 245)">r</text><text x="687" y="700"  fill="rgb(246 246 245)"> </text><text x="690" y="700"  fill="rgb(255 255 249)">(</text><text x="693" y="700"  fill="rgb(255 247 242)">l</text><text x="696" y="700"  fill="rgb(123 178 225)">e</text><text x="699" y="700"  fill="rgb(0 140 226)">t</text><text x="702" y="700"  fill="rgb(0 146 228)"> </text><text x="705" y="700"  fill="rgb(1 149 228)">i</text><text x="708" y="700"  fill="rgb(0 148 224)">n</text><text x="711" y="700"  fill="rgb(1 148 227)">n</text><text x="714" y="700"  fill="rgb(0 148 228)">e</text><text x="717" y="700"  fill="rgb(1 147 229)">r</text><text x="720" y="700"  fill="rgb(1 148 228)">Object of value) { this.validateFil</text><text x="825" y="700"  fill="rgb(1 147 228)">t</text><text x="828" y="700"  fill="rgb(1 148 227)">e</text><text x="831" y="700"  fill="rgb(1 145 228)">r</text><text x="834" y="700"  fill="rgb(0 152 225)">(</text><text x="837" y="700"  fill="rgb(0 150 223)">i</text><text x="840" y="700"  fill="rgb(0 131 232)">n</text><text x="843" y="700"  fill="rgb(93 167 215)">n</text><text x="846" y="700"  fill="rgb(243 238 237)">e</text><text x="849" y="700"  fill="rgb(255 255 250)">r</text><text x="852" y="700"  fill="rgb(247 246 245)">O</text><text x="855" y="700"  fill="rgb(245 245 245)">b</text><text x="858" y="700"  fill="rgb(246 246 246)">ject); } } private validate</text><text x="939" y="700"  fill="rgb(245 246 245)">I</text><text x="942" y="700"  fill="rgb(246 246 247)">d</text><text x="945" y="700"  fill="rgb(255 252 255)">s</text><text x="948" y="700"  fill="rgb(213 229 197)">t</text><text x="951" y="700"  fill="rgb(123 189 0)">r</text><text x="954" y="700"  fill="rgb(129 198 25)">i</text><text x="957" y="700"  fill="rgb(132 196 34)">n</text><text x="960" y="700"  fill="rgb(137 197 29)">g</text><text x="963" y="700"  fill="rgb(133 197 27)">(</text><text x="966" y="700"  fill="rgb(133 197 35)">i</text><text x="969" y="700"  fill="rgb(133 199 29)">ds</text><text x="975" y="700"  fill="rgb(132 198 32)">tr</text><text x="981" y="700"  fill="rgb(133 199 30)">i</text><text x="984" y="700"  fill="rgb(133 198 32)">ng: s</text><text x="999" y="700"  fill="rgb(132 198 32)">t</text><text x="1002" y="700"  fill="rgb(131 197 30)">r</text><text x="1005" y="700"  fill="rgb(131 199 31)">i</text><text x="1008" y="700"  fill="rgb(133 197 30)">n</text><text x="1011" y="700"  fill="rgb(131 199 29)">g</text><text x="1014" y="700"  fill="rgb(132 201 29)">)</text><text x="1017" y="700"  fill="rgb(131 197 26)">:</text><text x="1020" y="700"  fill="rgb(139 203 1)"> </text><text x="1023" y="700"  fill="rgb(245 246 243)">b</text><text x="1026" y="700"  fill="rgb(245 246 247)">o</text><text x="1029" y="700"  fill="rgb(246 246 246)">olean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (</text><text x="0" y="705"  fill="rgb(246 246 246)">insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this</text><text x="510" y="705"  fill="rgb(247 247 247)">.</text><text x="513" y="705"  fill="rgb(249 196 0)">s</text><text x="516" y="705"  fill="rgb(254 199 0)">f</text><text x="519" y="705"  fill="rgb(255 198 0)">i</text><text x="522" y="705"  fill="rgb(255 199 0)">e</text><text x="525" y="705"  fill="rgb(255 198 0)">l</text><text x="528" y="705"  fill="rgb(255 199 0)">ds = this.roomsfields; } retur</text><text x="618" y="705"  fill="rgb(255 198 0)">n</text><text x="621" y="705"  fill="rgb(253 200 0)"> </text><text x="624" y="705"  fill="rgb(252 205 0)">t</text><text x="627" y="705"  fill="rgb(245 246 246)">r</text><text x="630" y="705"  fill="rgb(246 246 245)">u</text><text x="633" y="705"  fill="rgb(246 246 246)">e; } } return fa</text><text x="681" y="705"  fill="rgb(245 246 246)">l</text><text x="684" y="705"  fill="rgb(246 246 246)">s</text><text x="687" y="705"  fill="rgb(255 255 249)">e</text><text x="690" y="705"  fill="rgb(211 220 235)">;</text><text x="693" y="705"  fill="rgb(15 142 213)"> </text><text x="696" y="705"  fill="rgb(0 131 229)">}</text><text x="699" y="705"  fill="rgb(0 148 233)"> </text><text x="702" y="705"  fill="rgb(1 145 225)">e</text><text x="705" y="705"  fill="rgb(0 147 224)">l</text><text x="708" y="705"  fill="rgb(0 148 227)">s</text><text x="711" y="705"  fill="rgb(1 147 226)">e</text><text x="714" y="705"  fill="rgb(2 147 226)"> </text><text x="717" y="705"  fill="rgb(0 148 226)">{</text><text x="720" y="705"  fill="rgb(1 148 228)"> return this.idInQuery.includes(ids</text><text x="825" y="705"  fill="rgb(0 147 227)">t</text><text x="828" y="705"  fill="rgb(0 148 227)">r</text><text x="831" y="705"  fill="rgb(0 145 233)">i</text><text x="834" y="705"  fill="rgb(1 148 223)">n</text><text x="837" y="705"  fill="rgb(2 147 221)">g</text><text x="840" y="705"  fill="rgb(0 144 226)">)</text><text x="843" y="705"  fill="rgb(0 135 226)">;</text><text x="846" y="705"  fill="rgb(4 138 222)"> </text><text x="849" y="705"  fill="rgb(169 201 229)">}</text><text x="852" y="705"  fill="rgb(255 255 250)"> </text><text x="855" y="705"  fill="rgb(248 247 246)">}</text><text x="858" y="705"  fill="rgb(245 245 246)"> </text><text x="861" y="705"  fill="rgb(246 246 246)">public getIdInQuery(): stri</text><text x="942" y="705"  fill="rgb(245 245 245)">n</text><text x="945" y="705"  fill="rgb(245 245 246)">g</text><text x="948" y="705"  fill="rgb(255 251 255)">[</text><text x="951" y="705"  fill="rgb(210 227 186)">]</text><text x="954" y="705"  fill="rgb(118 188 0)"> </text><text x="957" y="705"  fill="rgb(131 199 21)">{</text><text x="960" y="705"  fill="rgb(133 198 35)"> </text><text x="963" y="705"  fill="rgb(132 197 35)">r</text><text x="966" y="705"  fill="rgb(132 199 33)">e</text><text x="969" y="705"  fill="rgb(134 198 33)">t</text><text x="972" y="705"  fill="rgb(133 199 34)">u</text><text x="975" y="705"  fill="rgb(133 198 32)">r</text><text x="978" y="705"  fill="rgb(133 198 31)">n</text><text x="981" y="705"  fill="rgb(133 198 32)"> this.</text><text x="999" y="705"  fill="rgb(132 198 32)">i</text><text x="1002" y="705"  fill="rgb(131 197 31)">dI</text><text x="1008" y="705"  fill="rgb(133 196 31)">n</text><text x="1011" y="705"  fill="rgb(131 199 26)">Q</text><text x="1014" y="705"  fill="rgb(130 198 29)">u</text><text x="1017" y="705"  fill="rgb(135 196 31)">e</text><text x="1020" y="705"  fill="rgb(122 197 0)">r</text><text x="1023" y="705"  fill="rgb(245 246 244)">y</text><text x="1026" y="705"  fill="rgb(246 246 246)">; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = </text><text x="0" y="710"  fill="rgb(246 246 246)">[&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[</text><text x="507" y="710"  fill="rgb(246 245 249)">]</text><text x="510" y="710"  fill="rgb(251 245 188)"> </text><text x="513" y="710"  fill="rgb(251 195 0)">=</text><text x="516" y="710"  fill="rgb(255 196 0)"> </text><text x="519" y="710"  fill="rgb(255 198 0)">[</text><text x="522" y="710"  fill="rgb(255 199 0)">&quot;</text><text x="525" y="710"  fill="rgb(255 198 0)">l</text><text x="528" y="710"  fill="rgb(255 199 0)">at&quot;, &quot;lon&quot;, &quot;seats&quot;]; private </text><text x="618" y="710"  fill="rgb(255 197 0)">r</text><text x="621" y="710"  fill="rgb(251 199 0)">e</text><text x="624" y="710"  fill="rgb(252 205 0)">a</text><text x="627" y="710"  fill="rgb(246 247 247)">d</text><text x="630" y="710"  fill="rgb(246 246 246)">only roomsfields</text><text x="678" y="710"  fill="rgb(245 245 246)">:</text><text x="681" y="710"  fill="rgb(246 245 246)"> </text><text x="684" y="710"  fill="rgb(255 255 249)">s</text><text x="687" y="710"  fill="rgb(137 188 229)">t</text><text x="690" y="710"  fill="rgb(0 122 222)">r</text><text x="693" y="710"  fill="rgb(0 141 231)">i</text><text x="696" y="710"  fill="rgb(0 152 230)">n</text><text x="699" y="710"  fill="rgb(2 146 218)">g</text><text x="702" y="710"  fill="rgb(0 150 215)">[</text><text x="705" y="710"  fill="rgb(0 148 231)">]</text><text x="708" y="710"  fill="rgb(0 148 229)"> </text><text x="711" y="710"  fill="rgb(0 148 226)">=</text><text x="714" y="710"  fill="rgb(0 148 229)"> </text><text x="717" y="710"  fill="rgb(0 148 228)">[</text><text x="720" y="710"  fill="rgb(1 148 228)">&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; ,</text><text x="825" y="710"  fill="rgb(1 147 228)"> </text><text x="828" y="710"  fill="rgb(1 147 227)">&quot;</text><text x="831" y="710"  fill="rgb(0 153 215)">n</text><text x="834" y="710"  fill="rgb(0 142 231)">a</text><text x="837" y="710"  fill="rgb(0 148 236)">m</text><text x="840" y="710"  fill="rgb(0 154 226)">e</text><text x="843" y="710"  fill="rgb(2 144 221)">&quot;</text><text x="846" y="710"  fill="rgb(0 147 228)">,</text><text x="849" y="710"  fill="rgb(0 124 228)"> </text><text x="852" y="710"  fill="rgb(121 174 226)">&quot;</text><text x="855" y="710"  fill="rgb(255 255 247)">a</text><text x="858" y="710"  fill="rgb(249 247 246)">d</text><text x="861" y="710"  fill="rgb(245 245 246)">d</text><text x="864" y="710"  fill="rgb(246 246 246)">ress&quot;, &quot;type&quot;, &quot;furniture&quot;,</text><text x="945" y="710"  fill="rgb(246 246 245)"> </text><text x="948" y="710"  fill="rgb(245 245 246)">&quot;</text><text x="951" y="710"  fill="rgb(255 253 255)">h</text><text x="954" y="710"  fill="rgb(219 232 201)">r</text><text x="957" y="710"  fill="rgb(115 185 0)">e</text><text x="960" y="710"  fill="rgb(129 200 22)">f</text><text x="963" y="710"  fill="rgb(130 199 30)">&quot;</text><text x="966" y="710"  fill="rgb(133 198 18)">]</text><text x="969" y="710"  fill="rgb(131 196 28)">;</text><text x="972" y="710"  fill="rgb(132 196 30)"> </text><text x="975" y="710"  fill="rgb(131 197 31)">p</text><text x="978" y="710"  fill="rgb(131 197 32)">r</text><text x="981" y="710"  fill="rgb(132 198 31)">i</text><text x="984" y="710"  fill="rgb(133 198 32)">vate rea</text><text x="1008" y="710"  fill="rgb(131 197 31)">d</text><text x="1011" y="710"  fill="rgb(132 199 28)">o</text><text x="1014" y="710"  fill="rgb(133 198 31)">n</text><text x="1017" y="710"  fill="rgb(135 196 28)">l</text><text x="1020" y="710"  fill="rgb(112 191 0)">y</text><text x="1023" y="710"  fill="rgb(241 245 235)"> </text><text x="1026" y="710"  fill="rgb(246 245 247)">m</text><text x="1029" y="710"  fill="rgb(246 246 246)">token: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id priva</text><text x="0" y="715"  fill="rgb(246 246 246)">te keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a tr</text><text x="507" y="715"  fill="rgb(246 247 251)">a</text><text x="510" y="715"  fill="rgb(252 236 153)">n</text><text x="513" y="715"  fill="rgb(254 194 0)">s</text><text x="516" y="715"  fill="rgb(255 198 0)">fo</text><text x="522" y="715"  fill="rgb(253 199 0)">r</text><text x="525" y="715"  fill="rgb(255 199 0)">mation private allInsightDatas</text><text x="615" y="715"  fill="rgb(255 199 1)">e</text><text x="618" y="715"  fill="rgb(255 197 0)">t</text><text x="621" y="715"  fill="rgb(252 198 0)">:</text><text x="624" y="715"  fill="rgb(254 205 0)"> </text><text x="627" y="715"  fill="rgb(246 247 247)">I</text><text x="630" y="715"  fill="rgb(246 246 246)">nsightDataset[]</text><text x="675" y="715"  fill="rgb(245 245 246)">;</text><text x="678" y="715"  fill="rgb(245 245 245)"> </text><text x="681" y="715"  fill="rgb(255 255 248)">p</text><text x="684" y="715"  fill="rgb(119 185 229)">r</text><text x="687" y="715"  fill="rgb(0 127 223)">i</text><text x="690" y="715"  fill="rgb(1 150 225)">v</text><text x="693" y="715"  fill="rgb(2 148 225)">a</text><text x="696" y="715"  fill="rgb(0 145 229)">t</text><text x="699" y="715"  fill="rgb(0 149 228)">e</text><text x="702" y="715"  fill="rgb(1 147 232)"> </text><text x="705" y="715"  fill="rgb(0 146 227)">m</text><text x="708" y="715"  fill="rgb(2 148 226)">f</text><text x="711" y="715"  fill="rgb(1 148 226)">i</text><text x="714" y="715"  fill="rgb(0 147 228)">e</text><text x="717" y="715"  fill="rgb(2 147 227)">l</text><text x="720" y="715"  fill="rgb(1 148 228)">ds: string[]; private sfields: stri</text><text x="825" y="715"  fill="rgb(0 148 227)">n</text><text x="828" y="715"  fill="rgb(1 148 228)">g</text><text x="831" y="715"  fill="rgb(1 147 232)">[</text><text x="834" y="715"  fill="rgb(0 147 223)">]</text><text x="837" y="715"  fill="rgb(0 146 221)">;</text><text x="840" y="715"  fill="rgb(0 149 227)"> </text><text x="843" y="715"  fill="rgb(0 146 228)">c</text><text x="846" y="715"  fill="rgb(0 147 223)">o</text><text x="849" y="715"  fill="rgb(0 150 224)">n</text><text x="852" y="715"  fill="rgb(0 136 225)">s</text><text x="855" y="715"  fill="rgb(71 162 227)">t</text><text x="858" y="715"  fill="rgb(255 254 248)">r</text><text x="861" y="715"  fill="rgb(246 245 245)">u</text><text x="864" y="715"  fill="rgb(245 245 246)">c</text><text x="867" y="715"  fill="rgb(246 246 246)">tor(insightDatasets: Insigh</text><text x="948" y="715"  fill="rgb(246 246 245)">t</text><text x="951" y="715"  fill="rgb(245 245 246)">D</text><text x="954" y="715"  fill="rgb(255 252 255)">a</text><text x="957" y="715"  fill="rgb(197 223 159)">t</text><text x="960" y="715"  fill="rgb(111 192 0)">a</text><text x="963" y="715"  fill="rgb(131 200 36)">s</text><text x="966" y="715"  fill="rgb(138 196 31)">e</text><text x="969" y="715"  fill="rgb(131 200 29)">t</text><text x="972" y="715"  fill="rgb(131 199 33)">[</text><text x="975" y="715"  fill="rgb(133 198 33)">]</text><text x="978" y="715"  fill="rgb(133 198 32)">)</text><text x="981" y="715"  fill="rgb(133 196 31)"> </text><text x="984" y="715"  fill="rgb(133 198 32)">{ thi</text><text x="999" y="715"  fill="rgb(132 198 32)">s</text><text x="1002" y="715"  fill="rgb(132 198 31)">.</text><text x="1005" y="715"  fill="rgb(133 197 34)">i</text><text x="1008" y="715"  fill="rgb(132 200 30)">d</text><text x="1011" y="715"  fill="rgb(132 198 30)">I</text><text x="1014" y="715"  fill="rgb(133 196 36)">n</text><text x="1017" y="715"  fill="rgb(134 198 27)">Q</text><text x="1020" y="715"  fill="rgb(117 197 0)">u</text><text x="1023" y="715"  fill="rgb(227 239 210)">e</text><text x="1026" y="715"  fill="rgb(247 247 248)">r</text><text x="1029" y="715"  fill="rgb(246 246 246)">y = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS)</text><text x="0" y="720"  fill="rgb(246 246 246)"> { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } t</text><text x="507" y="720"  fill="rgb(246 247 251)">h</text><text x="510" y="720"  fill="rgb(252 228 146)">i</text><text x="513" y="720"  fill="rgb(253 193 0)">s</text><text x="516" y="720"  fill="rgb(255 199 0)">.v</text><text x="522" y="720"  fill="rgb(253 199 0)">a</text><text x="525" y="720"  fill="rgb(255 199 0)">lidateWhere(q.WHERE); if (q.TRA</text><text x="618" y="720"  fill="rgb(254 198 0)">N</text><text x="621" y="720"  fill="rgb(253 196 0)">S</text><text x="624" y="720"  fill="rgb(254 205 0)">F</text><text x="627" y="720"  fill="rgb(246 247 247)">O</text><text x="630" y="720"  fill="rgb(246 246 246)">RMATIONS) { thi</text><text x="675" y="720"  fill="rgb(245 245 245)">s</text><text x="678" y="720"  fill="rgb(255 252 247)">.</text><text x="681" y="720"  fill="rgb(193 214 231)">v</text><text x="684" y="720"  fill="rgb(0 135 220)">a</text><text x="687" y="720"  fill="rgb(0 150 229)">l</text><text x="690" y="720"  fill="rgb(0 147 230)">i</text><text x="693" y="720"  fill="rgb(0 148 225)">d</text><text x="696" y="720"  fill="rgb(0 147 229)">a</text><text x="699" y="720"  fill="rgb(0 148 229)">t</text><text x="702" y="720"  fill="rgb(1 149 226)">e</text><text x="705" y="720"  fill="rgb(1 147 227)">T</text><text x="708" y="720"  fill="rgb(1 147 228)">r</text><text x="711" y="720"  fill="rgb(1 148 227)">a</text><text x="714" y="720"  fill="rgb(1 147 227)">n</text><text x="717" y="720"  fill="rgb(1 148 228)">sformations(q.TRANSFORMATIONS); } th</text><text x="825" y="720"  fill="rgb(1 147 227)">i</text><text x="828" y="720"  fill="rgb(1 147 226)">s</text><text x="831" y="720"  fill="rgb(1 147 229)">.</text><text x="834" y="720"  fill="rgb(0 149 226)">va</text><text x="840" y="720"  fill="rgb(0 148 226)">l</text><text x="843" y="720"  fill="rgb(0 147 230)">i</text><text x="846" y="720"  fill="rgb(0 145 228)">d</text><text x="849" y="720"  fill="rgb(0 149 223)">a</text><text x="852" y="720"  fill="rgb(0 149 224)">t</text><text x="855" y="720"  fill="rgb(0 126 224)">e</text><text x="858" y="720"  fill="rgb(143 195 229)">O</text><text x="861" y="720"  fill="rgb(255 254 248)">p</text><text x="864" y="720"  fill="rgb(245 245 245)">t</text><text x="867" y="720"  fill="rgb(246 246 246)">ions(q.OPTIONS); } public va</text><text x="951" y="720"  fill="rgb(245 245 245)">l</text><text x="954" y="720"  fill="rgb(245 245 246)">i</text><text x="957" y="720"  fill="rgb(255 251 255)">d</text><text x="960" y="720"  fill="rgb(180 211 118)">a</text><text x="963" y="720"  fill="rgb(120 192 0)">t</text><text x="966" y="720"  fill="rgb(129 203 27)">e</text><text x="969" y="720"  fill="rgb(136 195 31)">T</text><text x="972" y="720"  fill="rgb(135 197 29)">r</text><text x="975" y="720"  fill="rgb(133 198 31)">an</text><text x="981" y="720"  fill="rgb(132 199 33)">s</text><text x="984" y="720"  fill="rgb(133 198 32)">format</text><text x="1002" y="720"  fill="rgb(131 198 33)">i</text><text x="1005" y="720"  fill="rgb(133 197 32)">o</text><text x="1008" y="720"  fill="rgb(134 199 25)">n</text><text x="1011" y="720"  fill="rgb(131 200 30)">s</text><text x="1014" y="720"  fill="rgb(137 196 30)">(</text><text x="1017" y="720"  fill="rgb(133 199 32)">q</text><text x="1020" y="720"  fill="rgb(121 195 0)">:</text><text x="1023" y="720"  fill="rgb(206 230 169)"> </text><text x="1026" y="720"  fill="rgb(248 246 250)">a</text><text x="1029" y="720"  fill="rgb(246 246 246)">ny): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP</text><text x="0" y="725"  fill="rgb(246 246 246)">); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and </text><text x="507" y="725"  fill="rgb(244 247 251)">s</text><text x="510" y="725"  fill="rgb(253 228 142)">h</text><text x="513" y="725"  fill="rgb(254 193 0)">o</text><text x="516" y="725"  fill="rgb(255 198 0)">ul</text><text x="522" y="725"  fill="rgb(255 199 0)">d has at least one element } fo</text><text x="615" y="725"  fill="rgb(255 199 1)">r</text><text x="618" y="725"  fill="rgb(255 199 0)"> </text><text x="621" y="725"  fill="rgb(255 195 0)">(</text><text x="624" y="725"  fill="rgb(253 203 0)">l</text><text x="627" y="725"  fill="rgb(246 247 247)">e</text><text x="630" y="725"  fill="rgb(246 246 246)">t key of q) { </text><text x="672" y="725"  fill="rgb(245 246 246)">t</text><text x="675" y="725"  fill="rgb(248 247 246)">h</text><text x="678" y="725"  fill="rgb(233 235 242)">i</text><text x="681" y="725"  fill="rgb(33 148 231)">s</text><text x="684" y="725"  fill="rgb(0 145 225)">.</text><text x="687" y="725"  fill="rgb(1 148 226)">v</text><text x="690" y="725"  fill="rgb(0 147 228)">a</text><text x="693" y="725"  fill="rgb(1 148 226)">l</text><text x="696" y="725"  fill="rgb(0 148 225)">i</text><text x="699" y="725"  fill="rgb(1 147 227)">d</text><text x="702" y="725"  fill="rgb(1 147 228)">a</text><text x="705" y="725"  fill="rgb(1 148 228)">t</text><text x="708" y="725"  fill="rgb(0 148 228)">eK</text><text x="714" y="725"  fill="rgb(1 148 228)">e</text><text x="717" y="725"  fill="rgb(0 148 227)">y</text><text x="720" y="725"  fill="rgb(1 148 228)">(key); this.transformationKey.push(</text><text x="825" y="725"  fill="rgb(1 148 226)">k</text><text x="828" y="725"  fill="rgb(1 148 228)">e</text><text x="831" y="725"  fill="rgb(1 148 227)">y</text><text x="834" y="725"  fill="rgb(1 147 228)">);</text><text x="840" y="725"  fill="rgb(1 147 229)"> </text><text x="843" y="725"  fill="rgb(0 148 227)">/</text><text x="846" y="725"  fill="rgb(1 147 230)">/</text><text x="849" y="725"  fill="rgb(0 147 233)"> </text><text x="852" y="725"  fill="rgb(0 147 228)">i</text><text x="855" y="725"  fill="rgb(0 152 224)">f</text><text x="858" y="725"  fill="rgb(26 139 224)"> </text><text x="861" y="725"  fill="rgb(211 229 241)">t</text><text x="864" y="725"  fill="rgb(251 249 246)">h</text><text x="867" y="725"  fill="rgb(245 245 246)">e</text><text x="870" y="725"  fill="rgb(246 246 246)"> key is valid, push it to tr</text><text x="954" y="725"  fill="rgb(245 246 245)">a</text><text x="957" y="725"  fill="rgb(247 246 249)">n</text><text x="960" y="725"  fill="rgb(250 250 255)">s</text><text x="963" y="725"  fill="rgb(154 203 83)">f</text><text x="966" y="725"  fill="rgb(126 195 13)">o</text><text x="969" y="725"  fill="rgb(132 199 33)">r</text><text x="972" y="725"  fill="rgb(133 196 34)">m</text><text x="975" y="725"  fill="rgb(132 198 31)">at</text><text x="981" y="725"  fill="rgb(133 197 30)">i</text><text x="984" y="725"  fill="rgb(133 198 32)">onKey</text><text x="999" y="725"  fill="rgb(133 198 31)"> </text><text x="1002" y="725"  fill="rgb(132 197 31)">}</text><text x="1005" y="725"  fill="rgb(132 199 30)"> </text><text x="1008" y="725"  fill="rgb(134 197 33)">}</text><text x="1011" y="725"  fill="rgb(132 198 33)"> </text><text x="1014" y="725"  fill="rgb(136 196 32)">p</text><text x="1017" y="725"  fill="rgb(130 197 28)">r</text><text x="1020" y="725"  fill="rgb(117 196 0)">i</text><text x="1023" y="725"  fill="rgb(198 221 155)">v</text><text x="1026" y="725"  fill="rgb(249 247 251)">a</text><text x="1029" y="725"  fill="rgb(246 246 246)">te validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(s</text><text x="0" y="730"  fill="rgb(246 246 246)">plittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void </text><text x="507" y="730"  fill="rgb(245 247 251)">{</text><text x="510" y="730"  fill="rgb(254 228 141)"> </text><text x="513" y="730"  fill="rgb(255 192 0)">i</text><text x="516" y="730"  fill="rgb(255 199 0)">f (!Array.isArray(q)) { throw new</text><text x="615" y="730"  fill="rgb(255 198 0)"> </text><text x="618" y="730"  fill="rgb(255 199 0)">I</text><text x="621" y="730"  fill="rgb(254 198 0)">n</text><text x="624" y="730"  fill="rgb(252 204 0)">s</text><text x="627" y="730"  fill="rgb(245 246 247)">i</text><text x="630" y="730"  fill="rgb(246 246 246)">ghtError(); // </text><text x="675" y="730"  fill="rgb(247 247 246)">q</text><text x="678" y="730"  fill="rgb(145 201 237)"> </text><text x="681" y="730"  fill="rgb(0 135 222)">s</text><text x="684" y="730"  fill="rgb(0 146 233)">h</text><text x="687" y="730"  fill="rgb(0 147 224)">o</text><text x="690" y="730"  fill="rgb(1 149 225)">u</text><text x="693" y="730"  fill="rgb(1 147 229)">l</text><text x="696" y="730"  fill="rgb(1 148 227)">d</text><text x="699" y="730"  fill="rgb(1 148 226)"> </text><text x="702" y="730"  fill="rgb(1 147 228)">b</text><text x="705" y="730"  fill="rgb(1 148 228)">e </text><text x="711" y="730"  fill="rgb(1 147 228)">a</text><text x="714" y="730"  fill="rgb(0 148 228)">n</text><text x="717" y="730"  fill="rgb(1 147 228)"> </text><text x="720" y="730"  fill="rgb(1 148 228)">array, and should have at least one</text><text x="825" y="730"  fill="rgb(0 147 227)"> </text><text x="828" y="730"  fill="rgb(1 148 227)">e</text><text x="831" y="730"  fill="rgb(1 147 228)">l</text><text x="834" y="730"  fill="rgb(1 148 227)">e</text><text x="837" y="730"  fill="rgb(1 148 224)">m</text><text x="840" y="730"  fill="rgb(1 147 227)">e</text><text x="843" y="730"  fill="rgb(1 147 229)">n</text><text x="846" y="730"  fill="rgb(1 147 228)">t</text><text x="849" y="730"  fill="rgb(0 147 226)"> </text><text x="852" y="730"  fill="rgb(0 146 224)">}</text><text x="855" y="730"  fill="rgb(0 148 227)"> </text><text x="858" y="730"  fill="rgb(0 137 224)">f</text><text x="861" y="730"  fill="rgb(130 187 231)">o</text><text x="864" y="730"  fill="rgb(243 246 247)">r</text><text x="867" y="730"  fill="rgb(246 246 246)"> (let applyrule of q) { if (Ar</text><text x="957" y="730"  fill="rgb(245 245 245)">r</text><text x="960" y="730"  fill="rgb(250 247 253)">a</text><text x="963" y="730"  fill="rgb(242 244 236)">y</text><text x="966" y="730"  fill="rgb(117 187 0)">.</text><text x="969" y="730"  fill="rgb(130 199 24)">i</text><text x="972" y="730"  fill="rgb(132 197 32)">s</text><text x="975" y="730"  fill="rgb(131 197 30)">A</text><text x="978" y="730"  fill="rgb(132 198 31)">r</text><text x="981" y="730"  fill="rgb(132 197 31)">r</text><text x="984" y="730"  fill="rgb(133 198 31)">a</text><text x="987" y="730"  fill="rgb(132 198 32)">y</text><text x="990" y="730"  fill="rgb(133 198 32)">(ap</text><text x="999" y="730"  fill="rgb(132 198 32)">p</text><text x="1002" y="730"  fill="rgb(131 198 32)">l</text><text x="1005" y="730"  fill="rgb(132 197 31)">y</text><text x="1008" y="730"  fill="rgb(134 197 33)">r</text><text x="1011" y="730"  fill="rgb(130 198 35)">u</text><text x="1014" y="730"  fill="rgb(138 195 32)">l</text><text x="1017" y="730"  fill="rgb(131 200 30)">e</text><text x="1020" y="730"  fill="rgb(118 195 0)">)</text><text x="1023" y="730"  fill="rgb(200 221 151)"> </text><text x="1026" y="730"  fill="rgb(249 247 251)">|</text><text x="1029" y="730"  fill="rgb(246 246 246)">| Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.len</text><text x="0" y="735"  fill="rgb(246 246 246)">gth === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(</text><text x="507" y="735"  fill="rgb(245 247 251)">c</text><text x="510" y="735"  fill="rgb(253 228 142)">r</text><text x="513" y="735"  fill="rgb(255 194 0)">i</text><text x="516" y="735"  fill="rgb(255 199 0)">teria) || Object.keys(criteria).l</text><text x="615" y="735"  fill="rgb(255 197 1)">e</text><text x="618" y="735"  fill="rgb(255 198 0)">n</text><text x="621" y="735"  fill="rgb(254 198 0)">g</text><text x="624" y="735"  fill="rgb(253 202 0)">t</text><text x="627" y="735"  fill="rgb(245 247 247)">h</text><text x="630" y="735"  fill="rgb(246 246 246)"> &gt; 1) { throw </text><text x="672" y="735"  fill="rgb(246 245 246)">n</text><text x="675" y="735"  fill="rgb(250 247 245)">e</text><text x="678" y="735"  fill="rgb(0 142 218)">w</text><text x="681" y="735"  fill="rgb(0 146 231)"> </text><text x="684" y="735"  fill="rgb(0 147 222)">I</text><text x="687" y="735"  fill="rgb(0 148 229)">n</text><text x="690" y="735"  fill="rgb(1 148 226)">s</text><text x="693" y="735"  fill="rgb(1 147 225)">i</text><text x="696" y="735"  fill="rgb(1 147 232)">g</text><text x="699" y="735"  fill="rgb(0 146 233)">h</text><text x="702" y="735"  fill="rgb(1 147 227)">t</text><text x="705" y="735"  fill="rgb(1 148 225)">E</text><text x="708" y="735"  fill="rgb(1 148 226)">r</text><text x="711" y="735"  fill="rgb(1 148 227)">r</text><text x="714" y="735"  fill="rgb(0 147 228)">o</text><text x="717" y="735"  fill="rgb(0 148 227)">r</text><text x="720" y="735"  fill="rgb(1 148 228)">()</text><text x="726" y="735"  fill="rgb(1 148 227)">; </text><text x="732" y="735"  fill="rgb(1 148 228)">} let applytoken: string = Objec</text><text x="828" y="735"  fill="rgb(1 148 226)">t</text><text x="831" y="735"  fill="rgb(0 148 227)">.</text><text x="834" y="735"  fill="rgb(1 148 226)">k</text><text x="837" y="735"  fill="rgb(0 146 237)">e</text><text x="840" y="735"  fill="rgb(0 150 228)">y</text><text x="843" y="735"  fill="rgb(1 149 226)">s</text><text x="846" y="735"  fill="rgb(1 149 220)">(</text><text x="849" y="735"  fill="rgb(0 149 221)">c</text><text x="852" y="735"  fill="rgb(0 148 232)">r</text><text x="855" y="735"  fill="rgb(0 146 233)">i</text><text x="858" y="735"  fill="rgb(0 148 223)">t</text><text x="861" y="735"  fill="rgb(0 141 225)">e</text><text x="864" y="735"  fill="rgb(215 229 241)">r</text><text x="867" y="735"  fill="rgb(248 247 245)">i</text><text x="870" y="735"  fill="rgb(246 246 246)">a)[0]; if (!this.mtoken.includ</text><text x="960" y="735"  fill="rgb(245 245 245)">e</text><text x="963" y="735"  fill="rgb(255 249 255)">s</text><text x="966" y="735"  fill="rgb(193 220 142)">(</text><text x="969" y="735"  fill="rgb(115 191 0)">a</text><text x="972" y="735"  fill="rgb(132 200 35)">p</text><text x="975" y="735"  fill="rgb(133 197 31)">p</text><text x="978" y="735"  fill="rgb(132 197 32)">l</text><text x="981" y="735"  fill="rgb(132 197 31)">y</text><text x="984" y="735"  fill="rgb(133 198 32)">t</text><text x="987" y="735"  fill="rgb(133 198 31)">o</text><text x="990" y="735"  fill="rgb(133 198 32)">ken)</text><text x="1002" y="735"  fill="rgb(134 198 33)"> </text><text x="1005" y="735"  fill="rgb(132 197 31)">&amp;</text><text x="1008" y="735"  fill="rgb(132 197 29)">&amp;</text><text x="1011" y="735"  fill="rgb(132 200 27)"> </text><text x="1014" y="735"  fill="rgb(134 199 29)">!</text><text x="1017" y="735"  fill="rgb(132 197 33)">t</text><text x="1020" y="735"  fill="rgb(118 195 0)">h</text><text x="1023" y="735"  fill="rgb(209 229 174)">i</text><text x="1026" y="735"  fill="rgb(248 246 250)">s</text><text x="1029" y="735"  fill="rgb(246 246 246)">.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if </text><text x="0" y="740"  fill="rgb(246 246 246)">(this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.include</text><text x="507" y="740"  fill="rgb(244 247 251)">s</text><text x="510" y="740"  fill="rgb(254 232 147)">(</text><text x="513" y="740"  fill="rgb(254 195 0)">a</text><text x="516" y="740"  fill="rgb(255 198 0)">p</text><text x="519" y="740"  fill="rgb(255 199 0)">p</text><text x="522" y="740"  fill="rgb(255 198 0)">l</text><text x="525" y="740"  fill="rgb(255 199 0)">ytoken)) { if (!(this.validateId</text><text x="621" y="740"  fill="rgb(255 198 0)">s</text><text x="624" y="740"  fill="rgb(254 202 0)">t</text><text x="627" y="740"  fill="rgb(247 247 247)">r</text><text x="630" y="740"  fill="rgb(246 246 246)">ing(key[0]) &amp;&amp;</text><text x="672" y="740"  fill="rgb(247 246 245)"> </text><text x="675" y="740"  fill="rgb(229 240 247)">(</text><text x="678" y="740"  fill="rgb(0 129 221)">t</text><text x="681" y="740"  fill="rgb(0 147 228)">h</text><text x="684" y="740"  fill="rgb(0 149 222)">i</text><text x="687" y="740"  fill="rgb(1 146 228)">s</text><text x="690" y="740"  fill="rgb(0 144 237)">.</text><text x="693" y="740"  fill="rgb(1 151 218)">s</text><text x="696" y="740"  fill="rgb(0 148 224)">f</text><text x="699" y="740"  fill="rgb(1 146 224)">i</text><text x="702" y="740"  fill="rgb(0 151 217)">e</text><text x="705" y="740"  fill="rgb(0 145 233)">l</text><text x="708" y="740"  fill="rgb(0 148 229)">d</text><text x="711" y="740"  fill="rgb(1 148 228)">s</text><text x="714" y="740"  fill="rgb(3 146 227)">.</text><text x="717" y="740"  fill="rgb(0 148 227)">i</text><text x="720" y="740"  fill="rgb(1 148 227)">n</text><text x="723" y="740"  fill="rgb(1 148 226)">cl</text><text x="729" y="740"  fill="rgb(1 148 227)">u</text><text x="732" y="740"  fill="rgb(1 148 228)">des(key[1]) || this.mfields.incl</text><text x="828" y="740"  fill="rgb(1 148 225)">u</text><text x="831" y="740"  fill="rgb(1 150 222)">d</text><text x="834" y="740"  fill="rgb(1 144 232)">e</text><text x="837" y="740"  fill="rgb(0 147 224)">s</text><text x="840" y="740"  fill="rgb(0 145 218)">(</text><text x="843" y="740"  fill="rgb(0 148 217)">k</text><text x="846" y="740"  fill="rgb(0 145 237)">e</text><text x="849" y="740"  fill="rgb(1 147 223)">y</text><text x="852" y="740"  fill="rgb(0 146 236)">[</text><text x="855" y="740"  fill="rgb(0 147 221)">1</text><text x="858" y="740"  fill="rgb(0 147 226)">]</text><text x="861" y="740"  fill="rgb(0 136 227)">)</text><text x="864" y="740"  fill="rgb(224 229 239)">)</text><text x="867" y="740"  fill="rgb(248 248 246)">)</text><text x="870" y="740"  fill="rgb(246 246 246)">) { throw new InsightError(); } </text><text x="966" y="740"  fill="rgb(244 245 247)">}</text><text x="969" y="740"  fill="rgb(139 202 38)"> </text><text x="972" y="740"  fill="rgb(128 197 12)">}</text><text x="975" y="740"  fill="rgb(133 198 34)"> </text><text x="978" y="740"  fill="rgb(132 198 32)">}</text><text x="981" y="740"  fill="rgb(132 197 31)"> </text><text x="984" y="740"  fill="rgb(132 197 32)">p</text><text x="987" y="740"  fill="rgb(133 197 31)">u</text><text x="990" y="740"  fill="rgb(133 197 32)">b</text><text x="993" y="740"  fill="rgb(133 198 32)">li</text><text x="999" y="740"  fill="rgb(133 198 31)">c</text><text x="1002" y="740"  fill="rgb(132 198 31)"> </text><text x="1005" y="740"  fill="rgb(133 198 32)">v</text><text x="1008" y="740"  fill="rgb(132 199 31)">a</text><text x="1011" y="740"  fill="rgb(134 198 24)">l</text><text x="1014" y="740"  fill="rgb(132 197 29)">i</text><text x="1017" y="740"  fill="rgb(133 197 32)">d</text><text x="1020" y="740"  fill="rgb(115 196 0)">a</text><text x="1023" y="740"  fill="rgb(218 237 188)">t</text><text x="1026" y="740"  fill="rgb(248 247 249)">e</text><text x="1029" y="740"  fill="rgb(246 246 246)">Options(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validate</text><text x="0" y="745"  fill="rgb(246 246 246)">Columns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (le</text><text x="507" y="745"  fill="rgb(246 246 249)">t</text><text x="510" y="745"  fill="rgb(251 239 176)"> </text><text x="513" y="745"  fill="rgb(252 194 0)">m</text><text x="516" y="745"  fill="rgb(254 199 0)">s</text><text x="519" y="745"  fill="rgb(255 198 1)">k</text><text x="522" y="745"  fill="rgb(254 199 0)">e</text><text x="525" y="745"  fill="rgb(255 199 0)">y of q) { if (this.transformatio</text><text x="621" y="745"  fill="rgb(255 198 0)">n</text><text x="624" y="745"  fill="rgb(251 200 0)">K</text><text x="627" y="745"  fill="rgb(247 246 247)">e</text><text x="630" y="745"  fill="rgb(246 246 245)">y</text><text x="633" y="745"  fill="rgb(246 246 246)">.length &gt; 0) </text><text x="672" y="745"  fill="rgb(250 248 247)">{</text><text x="675" y="745"  fill="rgb(153 206 237)"> </text><text x="678" y="745"  fill="rgb(0 137 226)">i</text><text x="681" y="745"  fill="rgb(0 147 225)">f</text><text x="684" y="745"  fill="rgb(0 147 231)"> </text><text x="687" y="745"  fill="rgb(0 146 227)">(</text><text x="690" y="745"  fill="rgb(1 147 222)">!</text><text x="693" y="745"  fill="rgb(0 146 224)">t</text><text x="696" y="745"  fill="rgb(0 142 236)">h</text><text x="699" y="745"  fill="rgb(0 138 234)">i</text><text x="702" y="745"  fill="rgb(0 147 222)">s</text><text x="705" y="745"  fill="rgb(0 147 228)">.</text><text x="708" y="745"  fill="rgb(1 148 226)">t</text><text x="711" y="745"  fill="rgb(1 147 227)">r</text><text x="714" y="745"  fill="rgb(0 148 228)">a</text><text x="717" y="745"  fill="rgb(1 147 226)">n</text><text x="720" y="745"  fill="rgb(1 147 227)">s</text><text x="723" y="745"  fill="rgb(1 148 228)">f</text><text x="726" y="745"  fill="rgb(1 148 227)">o</text><text x="729" y="745"  fill="rgb(1 148 226)">r</text><text x="732" y="745"  fill="rgb(1 148 227)">ma</text><text x="738" y="745"  fill="rgb(1 148 228)">tionKey.includes(mskey)) { th</text><text x="825" y="745"  fill="rgb(1 146 229)">r</text><text x="828" y="745"  fill="rgb(1 148 228)">o</text><text x="831" y="745"  fill="rgb(0 143 228)">w</text><text x="834" y="745"  fill="rgb(0 150 223)"> </text><text x="837" y="745"  fill="rgb(0 151 226)">n</text><text x="840" y="745"  fill="rgb(0 134 227)">e</text><text x="843" y="745"  fill="rgb(0 138 233)">w</text><text x="846" y="745"  fill="rgb(0 151 223)"> </text><text x="849" y="745"  fill="rgb(0 148 227)">I</text><text x="852" y="745"  fill="rgb(0 144 229)">n</text><text x="855" y="745"  fill="rgb(0 146 224)">s</text><text x="858" y="745"  fill="rgb(1 149 224)">i</text><text x="861" y="745"  fill="rgb(0 137 225)">g</text><text x="864" y="745"  fill="rgb(156 205 234)">h</text><text x="867" y="745"  fill="rgb(250 248 247)">t</text><text x="870" y="745"  fill="rgb(246 246 246)">Error(); } } else { this.valida</text><text x="963" y="745"  fill="rgb(245 245 245)">t</text><text x="966" y="745"  fill="rgb(251 248 252)">e</text><text x="969" y="745"  fill="rgb(211 227 198)">K</text><text x="972" y="745"  fill="rgb(124 193 0)">e</text><text x="975" y="745"  fill="rgb(132 198 32)">y</text><text x="978" y="745"  fill="rgb(133 198 31)">(</text><text x="981" y="745"  fill="rgb(133 198 30)">m</text><text x="984" y="745"  fill="rgb(135 198 31)">s</text><text x="987" y="745"  fill="rgb(132 198 34)">k</text><text x="990" y="745"  fill="rgb(132 199 32)">e</text><text x="993" y="745"  fill="rgb(133 198 31)">y</text><text x="996" y="745"  fill="rgb(133 197 32)">)</text><text x="999" y="745"  fill="rgb(132 198 31)">;</text><text x="1002" y="745"  fill="rgb(132 197 32)"> </text><text x="1005" y="745"  fill="rgb(132 198 33)">}</text><text x="1008" y="745"  fill="rgb(134 197 31)"> </text><text x="1011" y="745"  fill="rgb(132 198 28)">t</text><text x="1014" y="745"  fill="rgb(131 198 30)">h</text><text x="1017" y="745"  fill="rgb(137 196 32)">i</text><text x="1020" y="745"  fill="rgb(116 194 0)">s</text><text x="1023" y="745"  fill="rgb(240 244 232)">.</text><text x="1026" y="745"  fill="rgb(247 245 247)">k</text><text x="1029" y="745"  fill="rgb(246 246 246)">eysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQ</text><text x="0" y="750"  fill="rgb(246 246 246)">uery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir </text><text x="507" y="750"  fill="rgb(246 245 248)">!</text><text x="510" y="750"  fill="rgb(250 247 220)">=</text><text x="513" y="750"  fill="rgb(250 196 0)">=</text><text x="516" y="750"  fill="rgb(254 198 0)"> &quot;</text><text x="522" y="750"  fill="rgb(255 198 0)">D</text><text x="525" y="750"  fill="rgb(255 199 0)">OWN&quot;) { throw new InsightError(</text><text x="618" y="750"  fill="rgb(255 198 0)">)</text><text x="621" y="750"  fill="rgb(255 199 0)">;</text><text x="624" y="750"  fill="rgb(249 200 0)"> </text><text x="627" y="750"  fill="rgb(247 247 245)">}</text><text x="630" y="750"  fill="rgb(246 246 246)"> let keys: any</text><text x="672" y="750"  fill="rgb(251 248 247)"> </text><text x="675" y="750"  fill="rgb(134 201 235)">=</text><text x="678" y="750"  fill="rgb(0 139 226)"> </text><text x="681" y="750"  fill="rgb(0 147 219)">q</text><text x="684" y="750"  fill="rgb(0 147 235)">.</text><text x="687" y="750"  fill="rgb(0 147 228)">k</text><text x="690" y="750"  fill="rgb(0 149 224)">e</text><text x="693" y="750"  fill="rgb(0 139 230)">y</text><text x="696" y="750"  fill="rgb(67 151 210)">s</text><text x="699" y="750"  fill="rgb(81 170 220)">;</text><text x="702" y="750"  fill="rgb(0 140 231)"> </text><text x="705" y="750"  fill="rgb(1 148 227)">i</text><text x="708" y="750"  fill="rgb(1 147 228)">f</text><text x="711" y="750"  fill="rgb(0 147 230)"> </text><text x="714" y="750"  fill="rgb(1 146 225)">(</text><text x="717" y="750"  fill="rgb(1 148 228)">!A</text><text x="723" y="750"  fill="rgb(1 148 226)">r</text><text x="726" y="750"  fill="rgb(1 147 228)">r</text><text x="729" y="750"  fill="rgb(1 147 227)">a</text><text x="732" y="750"  fill="rgb(0 148 228)">y</text><text x="735" y="750"  fill="rgb(0 147 228)">.</text><text x="738" y="750"  fill="rgb(1 148 228)">isArray(keys) || keys.length </text><text x="825" y="750"  fill="rgb(0 148 226)">&lt;</text><text x="828" y="750"  fill="rgb(1 148 227)"> </text><text x="831" y="750"  fill="rgb(1 148 234)">1</text><text x="834" y="750"  fill="rgb(0 146 219)">)</text><text x="837" y="750"  fill="rgb(0 131 230)"> </text><text x="840" y="750"  fill="rgb(165 211 232)">{</text><text x="843" y="750"  fill="rgb(87 168 222)"> </text><text x="846" y="750"  fill="rgb(0 133 226)">t</text><text x="849" y="750"  fill="rgb(0 149 227)">h</text><text x="852" y="750"  fill="rgb(1 143 225)">r</text><text x="855" y="750"  fill="rgb(0 151 233)">o</text><text x="858" y="750"  fill="rgb(0 149 225)">w</text><text x="861" y="750"  fill="rgb(0 137 220)"> </text><text x="864" y="750"  fill="rgb(124 196 233)">n</text><text x="867" y="750"  fill="rgb(251 249 247)">e</text><text x="870" y="750"  fill="rgb(246 246 246)">w InsightError(); } for (let an</text><text x="963" y="750"  fill="rgb(245 246 245)">y</text><text x="966" y="750"  fill="rgb(246 246 247)">k</text><text x="969" y="750"  fill="rgb(241 244 231)">e</text><text x="972" y="750"  fill="rgb(148 199 84)">y</text><text x="975" y="750"  fill="rgb(130 198 10)"> </text><text x="978" y="750"  fill="rgb(134 197 34)">o</text><text x="981" y="750"  fill="rgb(132 197 31)">f</text><text x="984" y="750"  fill="rgb(131 197 33)"> </text><text x="987" y="750"  fill="rgb(131 198 30)">k</text><text x="990" y="750"  fill="rgb(132 196 31)">e</text><text x="993" y="750"  fill="rgb(132 198 32)">y</text><text x="996" y="750"  fill="rgb(133 198 31)">s</text><text x="999" y="750"  fill="rgb(133 198 33)">)</text><text x="1002" y="750"  fill="rgb(132 198 31)"> </text><text x="1005" y="750"  fill="rgb(134 198 30)">{</text><text x="1008" y="750"  fill="rgb(134 198 28)"> </text><text x="1011" y="750"  fill="rgb(132 199 29)">i</text><text x="1014" y="750"  fill="rgb(132 198 31)">f</text><text x="1017" y="750"  fill="rgb(135 197 26)"> </text><text x="1020" y="750"  fill="rgb(118 196 0)">(</text><text x="1023" y="750"  fill="rgb(246 246 246)">!</text><text x="1026" y="750"  fill="rgb(246 245 246)">t</text><text x="1029" y="750"  fill="rgb(246 246 246)">his.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if </text><text x="0" y="755"  fill="rgb(246 246 246)">(Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else {</text><text x="510" y="755"  fill="rgb(245 246 247)"> </text><text x="513" y="755"  fill="rgb(249 200 0)">l</text><text x="516" y="755"  fill="rgb(255 198 0)">e</text><text x="519" y="755"  fill="rgb(251 202 2)">t</text><text x="522" y="755"  fill="rgb(253 202 0)"> </text><text x="525" y="755"  fill="rgb(255 198 0)">k</text><text x="528" y="755"  fill="rgb(255 199 0)">ey:</text><text x="537" y="755"  fill="rgb(255 198 0)"> </text><text x="540" y="755"  fill="rgb(255 199 0)">string = Object.keys(q)[0</text><text x="615" y="755"  fill="rgb(254 198 0)">]</text><text x="618" y="755"  fill="rgb(254 199 0)">;</text><text x="621" y="755"  fill="rgb(255 197 0)"> </text><text x="624" y="755"  fill="rgb(249 195 0)">l</text><text x="627" y="755"  fill="rgb(248 248 241)">e</text><text x="630" y="755"  fill="rgb(246 246 247)">t</text><text x="633" y="755"  fill="rgb(246 246 246)"> value: any =</text><text x="672" y="755"  fill="rgb(247 246 245)"> </text><text x="675" y="755"  fill="rgb(235 243 244)">O</text><text x="678" y="755"  fill="rgb(0 124 223)">b</text><text x="681" y="755"  fill="rgb(1 145 227)">j</text><text x="684" y="755"  fill="rgb(0 146 239)">e</text><text x="687" y="755"  fill="rgb(0 143 216)">c</text><text x="690" y="755"  fill="rgb(0 125 220)">t</text><text x="693" y="755"  fill="rgb(77 166 230)">.</text><text x="696" y="755"  fill="rgb(255 255 248)">v</text><text x="699" y="755"  fill="rgb(255 255 253)">a</text><text x="702" y="755"  fill="rgb(4 140 215)">l</text><text x="705" y="755"  fill="rgb(0 142 228)">u</text><text x="708" y="755"  fill="rgb(0 144 231)">e</text><text x="711" y="755"  fill="rgb(0 153 222)">s</text><text x="714" y="755"  fill="rgb(0 148 233)">(</text><text x="717" y="755"  fill="rgb(0 145 225)">q</text><text x="720" y="755"  fill="rgb(0 148 220)">)</text><text x="723" y="755"  fill="rgb(0 144 235)">[</text><text x="726" y="755"  fill="rgb(0 147 230)">0</text><text x="729" y="755"  fill="rgb(0 148 226)">]</text><text x="732" y="755"  fill="rgb(1 146 228)">;</text><text x="735" y="755"  fill="rgb(1 148 227)"> </text><text x="738" y="755"  fill="rgb(1 148 228)">switch (key) { case &quot;AND</text><text x="810" y="755"  fill="rgb(0 148 227)">&quot;</text><text x="813" y="755"  fill="rgb(1 148 227)">:</text><text x="816" y="755"  fill="rgb(1 148 228)"> </text><text x="819" y="755"  fill="rgb(1 148 227)">c</text><text x="822" y="755"  fill="rgb(0 147 227)">a</text><text x="825" y="755"  fill="rgb(1 148 227)">s</text><text x="828" y="755"  fill="rgb(0 147 227)">e</text><text x="831" y="755"  fill="rgb(1 148 217)"> </text><text x="834" y="755"  fill="rgb(0 138 237)">&quot;</text><text x="837" y="755"  fill="rgb(61 166 222)">O</text><text x="840" y="755"  fill="rgb(255 248 246)">R</text><text x="843" y="755"  fill="rgb(255 255 249)">&quot;</text><text x="846" y="755"  fill="rgb(119 183 224)">:</text><text x="849" y="755"  fill="rgb(0 126 215)"> </text><text x="852" y="755"  fill="rgb(0 145 230)">t</text><text x="855" y="755"  fill="rgb(1 146 233)">h</text><text x="858" y="755"  fill="rgb(1 145 224)">i</text><text x="861" y="755"  fill="rgb(0 129 219)">s</text><text x="864" y="755"  fill="rgb(211 223 239)">.</text><text x="867" y="755"  fill="rgb(248 247 247)">v</text><text x="870" y="755"  fill="rgb(246 246 246)">alidateANDOR(value); break; case</text><text x="966" y="755"  fill="rgb(245 245 245)"> </text><text x="969" y="755"  fill="rgb(254 249 255)">&quot;</text><text x="972" y="755"  fill="rgb(178 222 133)">N</text><text x="975" y="755"  fill="rgb(122 192 0)">O</text><text x="978" y="755"  fill="rgb(133 198 27)">T</text><text x="981" y="755"  fill="rgb(135 199 29)">&quot;</text><text x="984" y="755"  fill="rgb(128 197 40)">:</text><text x="987" y="755"  fill="rgb(135 196 28)"> </text><text x="990" y="755"  fill="rgb(135 197 31)">t</text><text x="993" y="755"  fill="rgb(132 198 32)">h</text><text x="996" y="755"  fill="rgb(133 198 31)">i</text><text x="999" y="755"  fill="rgb(133 198 32)">s</text><text x="1002" y="755"  fill="rgb(134 197 31)">.</text><text x="1005" y="755"  fill="rgb(133 198 33)">v</text><text x="1008" y="755"  fill="rgb(132 199 28)">a</text><text x="1011" y="755"  fill="rgb(134 197 31)">l</text><text x="1014" y="755"  fill="rgb(130 198 34)">i</text><text x="1017" y="755"  fill="rgb(125 198 20)">d</text><text x="1020" y="755"  fill="rgb(145 200 0)">a</text><text x="1023" y="755"  fill="rgb(244 244 243)">t</text><text x="1026" y="755"  fill="rgb(245 246 247)">e</text><text x="1029" y="755"  fill="rgb(246 246 246)">NOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } }</text><text x="0" y="760"  fill="rgb(246 246 246)"> private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void </text><text x="507" y="760"  fill="rgb(246 246 247)">{</text><text x="510" y="760"  fill="rgb(245 245 243)"> </text><text x="513" y="760"  fill="rgb(255 213 29)">i</text><text x="516" y="760"  fill="rgb(253 199 0)">f</text><text x="519" y="760"  fill="rgb(255 198 0)"> </text><text x="522" y="760"  fill="rgb(255 197 0)">(</text><text x="525" y="760"  fill="rgb(255 198 0)">t</text><text x="528" y="760"  fill="rgb(254 198 0)">y</text><text x="531" y="760"  fill="rgb(255 199 0)">pe</text><text x="537" y="760"  fill="rgb(255 198 0)">o</text><text x="540" y="760"  fill="rgb(255 199 0)">f value !== &quot;object&quot;) { t</text><text x="615" y="760"  fill="rgb(254 199 0)">h</text><text x="618" y="760"  fill="rgb(255 199 1)">r</text><text x="621" y="760"  fill="rgb(255 198 0)">o</text><text x="624" y="760"  fill="rgb(249 194 0)">w</text><text x="627" y="760"  fill="rgb(248 248 242)"> </text><text x="630" y="760"  fill="rgb(246 246 247)">n</text><text x="633" y="760"  fill="rgb(246 246 246)">ew InsightErr</text><text x="672" y="760"  fill="rgb(246 245 246)">o</text><text x="675" y="760"  fill="rgb(250 248 246)">r</text><text x="678" y="760"  fill="rgb(56 167 225)">(</text><text x="681" y="760"  fill="rgb(0 124 217)">)</text><text x="684" y="760"  fill="rgb(0 128 223)">;</text><text x="687" y="760"  fill="rgb(16 144 232)"> </text><text x="690" y="760"  fill="rgb(164 200 229)">}</text><text x="693" y="760"  fill="rgb(255 255 248)"> </text><text x="696" y="760"  fill="rgb(250 248 246)">i</text><text x="699" y="760"  fill="rgb(249 247 245)">f</text><text x="702" y="760"  fill="rgb(246 243 244)"> </text><text x="705" y="760"  fill="rgb(10 139 220)">(</text><text x="708" y="760"  fill="rgb(0 142 228)">O</text><text x="711" y="760"  fill="rgb(1 148 219)">b</text><text x="714" y="760"  fill="rgb(0 149 227)">j</text><text x="717" y="760"  fill="rgb(0 145 237)">e</text><text x="720" y="760"  fill="rgb(0 146 228)">c</text><text x="723" y="760"  fill="rgb(1 151 221)">t</text><text x="726" y="760"  fill="rgb(1 147 225)">.</text><text x="729" y="760"  fill="rgb(2 148 227)">k</text><text x="732" y="760"  fill="rgb(0 148 227)">e</text><text x="735" y="760"  fill="rgb(1 148 229)">y</text><text x="738" y="760"  fill="rgb(1 148 228)">s(value).length !== 1) </text><text x="807" y="760"  fill="rgb(1 148 226)">{</text><text x="810" y="760"  fill="rgb(1 148 228)"> </text><text x="813" y="760"  fill="rgb(1 148 227)">t</text><text x="816" y="760"  fill="rgb(0 147 227)">h</text><text x="819" y="760"  fill="rgb(1 148 227)">r</text><text x="822" y="760"  fill="rgb(1 148 228)">o</text><text x="825" y="760"  fill="rgb(0 148 226)">w</text><text x="828" y="760"  fill="rgb(2 148 229)"> </text><text x="831" y="760"  fill="rgb(0 141 236)">n</text><text x="834" y="760"  fill="rgb(0 144 219)">e</text><text x="837" y="760"  fill="rgb(223 231 241)">w</text><text x="840" y="760"  fill="rgb(251 248 247)"> </text><text x="843" y="760"  fill="rgb(248 247 246)">I</text><text x="846" y="760"  fill="rgb(255 255 250)">n</text><text x="849" y="760"  fill="rgb(202 219 233)">s</text><text x="852" y="760"  fill="rgb(20 147 222)">i</text><text x="855" y="760"  fill="rgb(0 131 223)">g</text><text x="858" y="760"  fill="rgb(0 122 224)">h</text><text x="861" y="760"  fill="rgb(52 169 222)">t</text><text x="864" y="760"  fill="rgb(231 241 243)">E</text><text x="867" y="760"  fill="rgb(247 246 245)">r</text><text x="870" y="760"  fill="rgb(246 246 246)">ror(); } let skey: string[] = Obj</text><text x="969" y="760"  fill="rgb(246 245 247)">e</text><text x="972" y="760"  fill="rgb(244 247 237)">c</text><text x="975" y="760"  fill="rgb(118 193 0)">t</text><text x="978" y="760"  fill="rgb(131 198 41)">.</text><text x="981" y="760"  fill="rgb(137 196 34)">k</text><text x="984" y="760"  fill="rgb(129 202 23)">e</text><text x="987" y="760"  fill="rgb(135 197 31)">y</text><text x="990" y="760"  fill="rgb(131 196 30)">s</text><text x="993" y="760"  fill="rgb(131 197 30)">(</text><text x="996" y="760"  fill="rgb(133 197 31)">v</text><text x="999" y="760"  fill="rgb(132 198 31)">al</text><text x="1005" y="760"  fill="rgb(132 198 30)">u</text><text x="1008" y="760"  fill="rgb(133 199 30)">e</text><text x="1011" y="760"  fill="rgb(135 196 32)">)</text><text x="1014" y="760"  fill="rgb(132 199 30)">[</text><text x="1017" y="760"  fill="rgb(124 196 10)">0</text><text x="1020" y="760"  fill="rgb(159 201 77)">]</text><text x="1023" y="760"  fill="rgb(244 245 243)">.</text><text x="1026" y="760"  fill="rgb(246 246 246)">split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[</text><text x="0" y="765"  fill="rgb(246 246 246)">0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(s</text><text x="510" y="765"  fill="rgb(246 245 245)">f</text><text x="513" y="765"  fill="rgb(253 221 125)">i</text><text x="516" y="765"  fill="rgb(250 200 0)">e</text><text x="519" y="765"  fill="rgb(253 195 1)">l</text><text x="522" y="765"  fill="rgb(253 199 1)">d</text><text x="525" y="765"  fill="rgb(253 202 0)">)</text><text x="528" y="765"  fill="rgb(253 197 0)">)</text><text x="531" y="765"  fill="rgb(255 198 0)"> </text><text x="534" y="765"  fill="rgb(255 199 0)">{ throw new InsightError();</text><text x="615" y="765"  fill="rgb(255 198 0)"> </text><text x="618" y="765"  fill="rgb(254 198 0)">}</text><text x="621" y="765"  fill="rgb(255 197 0)"> </text><text x="624" y="765"  fill="rgb(248 195 0)">}</text><text x="627" y="765"  fill="rgb(248 248 237)"> </text><text x="630" y="765"  fill="rgb(246 246 247)">}</text><text x="633" y="765"  fill="rgb(246 246 246)"> } private va</text><text x="672" y="765"  fill="rgb(245 246 246)">l</text><text x="675" y="765"  fill="rgb(247 246 246)">i</text><text x="678" y="765"  fill="rgb(255 251 245)">d</text><text x="681" y="765"  fill="rgb(193 224 238)">a</text><text x="684" y="765"  fill="rgb(193 224 237)">t</text><text x="687" y="765"  fill="rgb(255 249 245)">e</text><text x="690" y="765"  fill="rgb(255 255 249)">G</text><text x="693" y="765"  fill="rgb(248 247 246)">T</text><text x="696" y="765"  fill="rgb(245 245 245)">LT</text><text x="702" y="765"  fill="rgb(254 250 246)">E</text><text x="705" y="765"  fill="rgb(236 239 244)">Q</text><text x="708" y="765"  fill="rgb(44 148 219)">(</text><text x="711" y="765"  fill="rgb(0 137 227)">v</text><text x="714" y="765"  fill="rgb(0 145 224)">a</text><text x="717" y="765"  fill="rgb(0 148 221)">l</text><text x="720" y="765"  fill="rgb(0 150 229)">u</text><text x="723" y="765"  fill="rgb(0 144 226)">e</text><text x="726" y="765"  fill="rgb(1 147 227)">:</text><text x="729" y="765"  fill="rgb(0 148 227)"> </text><text x="732" y="765"  fill="rgb(0 148 228)">a</text><text x="735" y="765"  fill="rgb(0 147 227)">n</text><text x="738" y="765"  fill="rgb(1 148 228)">y): void { if (typeof v</text><text x="807" y="765"  fill="rgb(0 148 228)">a</text><text x="810" y="765"  fill="rgb(1 146 229)">l</text><text x="813" y="765"  fill="rgb(1 147 227)">ue</text><text x="819" y="765"  fill="rgb(1 148 228)"> </text><text x="822" y="765"  fill="rgb(0 147 228)">!</text><text x="825" y="765"  fill="rgb(1 148 227)">=</text><text x="828" y="765"  fill="rgb(0 145 229)">=</text><text x="831" y="765"  fill="rgb(0 122 209)"> </text><text x="834" y="765"  fill="rgb(194 220 240)">&quot;</text><text x="837" y="765"  fill="rgb(255 253 247)">o</text><text x="840" y="765"  fill="rgb(245 245 245)">bj</text><text x="846" y="765"  fill="rgb(246 246 246)">e</text><text x="849" y="765"  fill="rgb(255 255 249)">c</text><text x="852" y="765"  fill="rgb(255 253 245)">t</text><text x="855" y="765"  fill="rgb(193 229 238)">&quot;</text><text x="858" y="765"  fill="rgb(193 222 240)"> </text><text x="861" y="765"  fill="rgb(255 250 244)">|</text><text x="864" y="765"  fill="rgb(250 248 246)">|</text><text x="867" y="765"  fill="rgb(245 245 245)"> </text><text x="870" y="765"  fill="rgb(246 246 246)">Object.keys(value).length !== 1) </text><text x="969" y="765"  fill="rgb(245 245 245)">{</text><text x="972" y="765"  fill="rgb(251 247 254)"> </text><text x="975" y="765"  fill="rgb(134 199 13)">t</text><text x="978" y="765"  fill="rgb(127 200 18)">h</text><text x="981" y="765"  fill="rgb(134 195 33)">r</text><text x="984" y="765"  fill="rgb(130 201 27)">o</text><text x="987" y="765"  fill="rgb(131 200 28)">w</text><text x="990" y="765"  fill="rgb(132 197 33)"> </text><text x="993" y="765"  fill="rgb(132 197 31)">n</text><text x="996" y="765"  fill="rgb(132 198 30)">e</text><text x="999" y="765"  fill="rgb(133 197 32)">w</text><text x="1002" y="765"  fill="rgb(133 196 32)"> </text><text x="1005" y="765"  fill="rgb(132 198 31)">I</text><text x="1008" y="765"  fill="rgb(127 199 31)">n</text><text x="1011" y="765"  fill="rgb(133 197 31)">s</text><text x="1014" y="765"  fill="rgb(132 200 22)">i</text><text x="1017" y="765"  fill="rgb(122 193 0)">g</text><text x="1020" y="765"  fill="rgb(212 229 197)">h</text><text x="1023" y="765"  fill="rgb(247 246 248)">t</text><text x="1026" y="765"  fill="rgb(246 246 245)">E</text><text x="1029" y="765"  fill="rgb(246 246 246)">rror(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: </text><text x="0" y="770"  fill="rgb(246 246 246)">string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw ne</text><text x="507" y="770"  fill="rgb(246 246 245)">w</text><text x="510" y="770"  fill="rgb(246 247 249)"> </text><text x="513" y="770"  fill="rgb(246 237 206)">I</text><text x="516" y="770"  fill="rgb(248 200 0)">n</text><text x="519" y="770"  fill="rgb(251 199 0)">s</text><text x="522" y="770"  fill="rgb(252 202 0)">i</text><text x="525" y="770"  fill="rgb(250 202 0)">g</text><text x="528" y="770"  fill="rgb(253 199 0)">h</text><text x="531" y="770"  fill="rgb(255 197 0)">t</text><text x="534" y="770"  fill="rgb(255 199 0)">Error(); } } } private vali</text><text x="615" y="770"  fill="rgb(255 197 0)">d</text><text x="618" y="770"  fill="rgb(255 199 1)">a</text><text x="621" y="770"  fill="rgb(255 199 0)">t</text><text x="624" y="770"  fill="rgb(249 199 0)">e</text><text x="627" y="770"  fill="rgb(247 247 246)">A</text><text x="630" y="770"  fill="rgb(246 246 246)">NDOR(value: any</text><text x="675" y="770"  fill="rgb(245 245 246)">)</text><text x="678" y="770"  fill="rgb(250 248 246)">:</text><text x="681" y="770"  fill="rgb(255 253 248)"> v</text><text x="687" y="770"  fill="rgb(252 249 246)">o</text><text x="690" y="770"  fill="rgb(246 246 246)">i</text><text x="693" y="770"  fill="rgb(245 245 246)">d</text><text x="696" y="770"  fill="rgb(246 246 246)"> </text><text x="699" y="770"  fill="rgb(245 246 246)">{</text><text x="702" y="770"  fill="rgb(245 245 246)"> </text><text x="705" y="770"  fill="rgb(255 253 247)">i</text><text x="708" y="770"  fill="rgb(255 250 243)">f</text><text x="711" y="770"  fill="rgb(72 161 220)"> </text><text x="714" y="770"  fill="rgb(0 125 230)">(</text><text x="717" y="770"  fill="rgb(0 143 232)">!</text><text x="720" y="770"  fill="rgb(0 149 227)">A</text><text x="723" y="770"  fill="rgb(0 148 224)">r</text><text x="726" y="770"  fill="rgb(1 148 228)">r</text><text x="729" y="770"  fill="rgb(1 146 228)">a</text><text x="732" y="770"  fill="rgb(1 148 227)">y</text><text x="735" y="770"  fill="rgb(0 148 228)">.</text><text x="738" y="770"  fill="rgb(0 147 227)">i</text><text x="741" y="770"  fill="rgb(1 148 228)">sArray(val</text><text x="771" y="770"  fill="rgb(0 147 228)">u</text><text x="774" y="770"  fill="rgb(1 148 228)">e</text><text x="777" y="770"  fill="rgb(0 147 228)">)</text><text x="780" y="770"  fill="rgb(1 148 228)"> ||</text><text x="789" y="770"  fill="rgb(1 148 227)"> </text><text x="792" y="770"  fill="rgb(1 148 228)">valu</text><text x="804" y="770"  fill="rgb(1 148 227)">e</text><text x="807" y="770"  fill="rgb(1 147 227)">.</text><text x="810" y="770"  fill="rgb(0 148 225)">l</text><text x="813" y="770"  fill="rgb(1 150 223)">e</text><text x="816" y="770"  fill="rgb(1 149 229)">n</text><text x="819" y="770"  fill="rgb(0 146 226)">g</text><text x="822" y="770"  fill="rgb(0 147 223)">t</text><text x="825" y="770"  fill="rgb(0 138 232)">h</text><text x="828" y="770"  fill="rgb(20 135 222)"> </text><text x="831" y="770"  fill="rgb(216 226 237)">&lt;</text><text x="834" y="770"  fill="rgb(255 255 249)"> </text><text x="837" y="770"  fill="rgb(245 245 245)">1</text><text x="840" y="770"  fill="rgb(245 246 246)">)</text><text x="843" y="770"  fill="rgb(246 246 246)"> {</text><text x="849" y="770"  fill="rgb(245 245 245)"> </text><text x="852" y="770"  fill="rgb(251 248 246)">t</text><text x="855" y="770"  fill="rgb(255 252 248)">h</text><text x="858" y="770"  fill="rgb(255 254 247)">r</text><text x="861" y="770"  fill="rgb(251 248 247)">o</text><text x="864" y="770"  fill="rgb(245 245 246)">w</text><text x="867" y="770"  fill="rgb(246 246 246)"> new InsightError(); } for (let inn</text><text x="972" y="770"  fill="rgb(248 247 247)">e</text><text x="975" y="770"  fill="rgb(189 220 141)">r</text><text x="978" y="770"  fill="rgb(121 196 0)">O</text><text x="981" y="770"  fill="rgb(134 199 31)">b</text><text x="984" y="770"  fill="rgb(133 195 41)">j</text><text x="987" y="770"  fill="rgb(131 199 28)">e</text><text x="990" y="770"  fill="rgb(132 198 29)">c</text><text x="993" y="770"  fill="rgb(133 197 32)">t</text><text x="996" y="770"  fill="rgb(133 197 31)"> </text><text x="999" y="770"  fill="rgb(133 198 31)">o</text><text x="1002" y="770"  fill="rgb(132 198 31)">f</text><text x="1005" y="770"  fill="rgb(133 197 31)"> </text><text x="1008" y="770"  fill="rgb(131 198 31)">v</text><text x="1011" y="770"  fill="rgb(134 197 30)">a</text><text x="1014" y="770"  fill="rgb(131 199 28)">l</text><text x="1017" y="770"  fill="rgb(126 196 0)">u</text><text x="1020" y="770"  fill="rgb(223 235 211)">e</text><text x="1023" y="770"  fill="rgb(248 247 249)">)</text><text x="1026" y="770"  fill="rgb(246 246 246)"> { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsig</text><text x="0" y="775"  fill="rgb(246 246 246)">htDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfie</text><text x="510" y="775"  fill="rgb(246 246 248)">l</text><text x="513" y="775"  fill="rgb(248 240 215)">d</text><text x="516" y="775"  fill="rgb(254 201 6)">s</text><text x="519" y="775"  fill="rgb(253 198 0)">;</text><text x="522" y="775"  fill="rgb(253 200 1)"> </text><text x="525" y="775"  fill="rgb(253 195 0)">t</text><text x="528" y="775"  fill="rgb(251 198 0)">h</text><text x="531" y="775"  fill="rgb(254 199 0)">i</text><text x="534" y="775"  fill="rgb(255 198 0)">s</text><text x="537" y="775"  fill="rgb(254 198 0)">.</text><text x="540" y="775"  fill="rgb(255 198 0)">s</text><text x="543" y="775"  fill="rgb(255 199 0)">fields = this.cour</text><text x="597" y="775"  fill="rgb(255 198 0)">se</text><text x="603" y="775"  fill="rgb(254 198 0)">s</text><text x="606" y="775"  fill="rgb(255 199 0)">f</text><text x="609" y="775"  fill="rgb(255 198 0)">ie</text><text x="615" y="775"  fill="rgb(254 198 0)">l</text><text x="618" y="775"  fill="rgb(255 197 1)">d</text><text x="621" y="775"  fill="rgb(253 195 0)">s</text><text x="624" y="775"  fill="rgb(255 202 0)">;</text><text x="627" y="775"  fill="rgb(245 246 247)"> </text><text x="630" y="775"  fill="rgb(246 246 245)">}</text><text x="633" y="775"  fill="rgb(246 246 246)"> else { this.mfields =</text><text x="699" y="775"  fill="rgb(245 245 245)"> </text><text x="702" y="775"  fill="rgb(246 246 246)">t</text><text x="705" y="775"  fill="rgb(248 246 246)">h</text><text x="708" y="775"  fill="rgb(255 255 251)">i</text><text x="711" y="775"  fill="rgb(255 255 254)">s</text><text x="714" y="775"  fill="rgb(245 241 234)">.</text><text x="717" y="775"  fill="rgb(30 152 216)">r</text><text x="720" y="775"  fill="rgb(0 147 232)">o</text><text x="723" y="775"  fill="rgb(2 147 228)">o</text><text x="726" y="775"  fill="rgb(1 148 227)">m</text><text x="729" y="775"  fill="rgb(0 148 228)">m</text><text x="732" y="775"  fill="rgb(1 148 228)">f</text><text x="735" y="775"  fill="rgb(1 147 227)">i</text><text x="738" y="775"  fill="rgb(1 148 228)">elds;</text><text x="753" y="775"  fill="rgb(1 148 227)"> thi</text><text x="765" y="775"  fill="rgb(1 148 228)">s</text><text x="768" y="775"  fill="rgb(1 148 227)">.</text><text x="771" y="775"  fill="rgb(2 149 227)">s</text><text x="774" y="775"  fill="rgb(1 148 226)">fi</text><text x="780" y="775"  fill="rgb(0 147 228)">e</text><text x="783" y="775"  fill="rgb(0 148 228)">l</text><text x="786" y="775"  fill="rgb(1 148 227)">d</text><text x="789" y="775"  fill="rgb(1 147 228)">s</text><text x="792" y="775"  fill="rgb(1 148 228)"> </text><text x="795" y="775"  fill="rgb(1 148 226)">=</text><text x="798" y="775"  fill="rgb(1 148 227)"> </text><text x="801" y="775"  fill="rgb(1 148 228)">th</text><text x="807" y="775"  fill="rgb(1 147 228)">i</text><text x="810" y="775"  fill="rgb(1 147 227)">s</text><text x="813" y="775"  fill="rgb(0 144 220)">.</text><text x="816" y="775"  fill="rgb(0 146 232)">r</text><text x="819" y="775"  fill="rgb(1 147 229)">o</text><text x="822" y="775"  fill="rgb(0 144 223)">o</text><text x="825" y="775"  fill="rgb(113 178 224)">m</text><text x="828" y="775"  fill="rgb(255 255 248)">s</text><text x="831" y="775"  fill="rgb(255 255 253)">f</text><text x="834" y="775"  fill="rgb(255 250 246)">i</text><text x="837" y="775"  fill="rgb(247 246 246)">e</text><text x="840" y="775"  fill="rgb(245 245 246)">l</text><text x="843" y="775"  fill="rgb(245 246 246)">d</text><text x="846" y="775"  fill="rgb(246 246 246)">s; } return true; } } return false; } else</text><text x="972" y="775"  fill="rgb(248 247 248)"> </text><text x="975" y="775"  fill="rgb(226 236 218)">{</text><text x="978" y="775"  fill="rgb(124 194 0)"> </text><text x="981" y="775"  fill="rgb(132 200 29)">r</text><text x="984" y="775"  fill="rgb(132 197 34)">e</text><text x="987" y="775"  fill="rgb(131 199 26)">t</text><text x="990" y="775"  fill="rgb(132 197 30)">u</text><text x="993" y="775"  fill="rgb(133 197 32)">r</text><text x="996" y="775"  fill="rgb(133 198 31)">n</text><text x="999" y="775"  fill="rgb(133 197 33)"> </text><text x="1002" y="775"  fill="rgb(132 198 31)">t</text><text x="1005" y="775"  fill="rgb(132 197 31)">h</text><text x="1008" y="775"  fill="rgb(132 200 30)">i</text><text x="1011" y="775"  fill="rgb(138 196 37)">s</text><text x="1014" y="775"  fill="rgb(126 200 7)">.</text><text x="1017" y="775"  fill="rgb(147 202 76)">i</text><text x="1020" y="775"  fill="rgb(232 239 220)">d</text><text x="1023" y="775"  fill="rgb(246 246 247)">I</text><text x="1026" y="775"  fill="rgb(246 246 246)">nQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFaca</text><text x="0" y="780"  fill="rgb(246 246 246)">de&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] =</text><text x="510" y="780"  fill="rgb(246 245 246)"> </text><text x="513" y="780"  fill="rgb(246 247 248)">[</text><text x="516" y="780"  fill="rgb(252 219 154)">&quot;</text><text x="519" y="780"  fill="rgb(253 191 0)">d</text><text x="522" y="780"  fill="rgb(249 203 0)">e</text><text x="525" y="780"  fill="rgb(253 197 1)">p</text><text x="528" y="780"  fill="rgb(252 202 0)">t</text><text x="531" y="780"  fill="rgb(253 200 0)">&quot;</text><text x="534" y="780"  fill="rgb(255 198 0)">, </text><text x="540" y="780"  fill="rgb(255 199 0)">&quot;</text><text x="543" y="780"  fill="rgb(255 198 0)">id</text><text x="549" y="780"  fill="rgb(255 199 0)">&quot;, &quot;instructor&quot;,</text><text x="597" y="780"  fill="rgb(254 198 0)"> </text><text x="600" y="780"  fill="rgb(255 198 0)">&quot;</text><text x="603" y="780"  fill="rgb(253 200 0)">t</text><text x="606" y="780"  fill="rgb(255 197 0)">i</text><text x="609" y="780"  fill="rgb(254 200 0)">t</text><text x="612" y="780"  fill="rgb(255 198 0)">l</text><text x="615" y="780"  fill="rgb(255 198 1)">e</text><text x="618" y="780"  fill="rgb(255 200 1)">&quot;</text><text x="621" y="780"  fill="rgb(253 196 0)">,</text><text x="624" y="780"  fill="rgb(252 216 51)"> </text><text x="627" y="780"  fill="rgb(245 247 246)">&quot;</text><text x="630" y="780"  fill="rgb(246 246 246)">uuid&quot;]; private readon</text><text x="696" y="780"  fill="rgb(245 245 246)">l</text><text x="699" y="780"  fill="rgb(247 246 245)">y</text><text x="702" y="780"  fill="rgb(255 255 248)"> </text><text x="705" y="780"  fill="rgb(255 255 250)">r</text><text x="708" y="780"  fill="rgb(205 222 232)">o</text><text x="711" y="780"  fill="rgb(120 175 224)">o</text><text x="714" y="780"  fill="rgb(42 156 236)">m</text><text x="717" y="780"  fill="rgb(17 150 227)">m</text><text x="720" y="780"  fill="rgb(1 143 225)">f</text><text x="723" y="780"  fill="rgb(0 149 227)">i</text><text x="726" y="780"  fill="rgb(1 148 225)">e</text><text x="729" y="780"  fill="rgb(2 147 228)">l</text><text x="732" y="780"  fill="rgb(1 148 228)">d</text><text x="735" y="780"  fill="rgb(0 148 227)">s</text><text x="738" y="780"  fill="rgb(1 148 228)">: </text><text x="744" y="780"  fill="rgb(0 148 228)">s</text><text x="747" y="780"  fill="rgb(1 148 228)">trin</text><text x="759" y="780"  fill="rgb(1 148 227)">g[] </text><text x="771" y="780"  fill="rgb(1 148 228)">= </text><text x="777" y="780"  fill="rgb(0 147 227)">[</text><text x="780" y="780"  fill="rgb(0 148 228)">&quot;</text><text x="783" y="780"  fill="rgb(0 148 227)">l</text><text x="786" y="780"  fill="rgb(1 147 227)">a</text><text x="789" y="780"  fill="rgb(1 147 228)">t</text><text x="792" y="780"  fill="rgb(1 148 226)">&quot;</text><text x="795" y="780"  fill="rgb(1 148 227)">,</text><text x="798" y="780"  fill="rgb(1 148 228)"> &quot;</text><text x="804" y="780"  fill="rgb(1 148 227)">l</text><text x="807" y="780"  fill="rgb(0 148 227)">o</text><text x="810" y="780"  fill="rgb(0 146 227)">n</text><text x="813" y="780"  fill="rgb(1 149 224)">&quot;</text><text x="816" y="780"  fill="rgb(0 148 232)">,</text><text x="819" y="780"  fill="rgb(0 146 231)"> </text><text x="822" y="780"  fill="rgb(0 147 224)">&quot;</text><text x="825" y="780"  fill="rgb(15 149 228)">s</text><text x="828" y="780"  fill="rgb(79 163 224)">e</text><text x="831" y="780"  fill="rgb(137 183 225)">a</text><text x="834" y="780"  fill="rgb(248 246 245)">t</text><text x="837" y="780"  fill="rgb(255 255 248)">s</text><text x="840" y="780"  fill="rgb(255 253 247)">&quot;</text><text x="843" y="780"  fill="rgb(245 245 245)">]</text><text x="846" y="780"  fill="rgb(246 246 246)">; private readonly roomsfields: string[] =</text><text x="972" y="780"  fill="rgb(248 247 247)"> </text><text x="975" y="780"  fill="rgb(225 235 215)">[</text><text x="978" y="780"  fill="rgb(128 196 0)">&quot;</text><text x="981" y="780"  fill="rgb(130 198 29)">f</text><text x="984" y="780"  fill="rgb(133 198 31)">u</text><text x="987" y="780"  fill="rgb(132 200 27)">l</text><text x="990" y="780"  fill="rgb(133 199 31)">l</text><text x="993" y="780"  fill="rgb(133 198 32)">n</text><text x="996" y="780"  fill="rgb(132 198 32)">a</text><text x="999" y="780"  fill="rgb(133 197 32)">m</text><text x="1002" y="780"  fill="rgb(131 197 31)">e</text><text x="1005" y="780"  fill="rgb(133 198 31)">&quot;</text><text x="1008" y="780"  fill="rgb(130 198 30)">,</text><text x="1011" y="780"  fill="rgb(133 196 40)"> </text><text x="1014" y="780"  fill="rgb(124 200 0)">&quot;</text><text x="1017" y="780"  fill="rgb(188 215 164)">s</text><text x="1020" y="780"  fill="rgb(251 249 253)">h</text><text x="1023" y="780"  fill="rgb(245 245 246)">o</text><text x="1026" y="780"  fill="rgb(246 246 246)">rtname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] </text><text x="0" y="785"  fill="rgb(246 246 246)">= [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated priv</text><text x="510" y="785"  fill="rgb(246 246 245)">a</text><text x="513" y="785"  fill="rgb(245 246 248)">t</text><text x="516" y="785"  fill="rgb(247 253 255)">e</text><text x="519" y="785"  fill="rgb(251 211 77)"> </text><text x="522" y="785"  fill="rgb(253 192 0)">t</text><text x="525" y="785"  fill="rgb(253 197 0)">r</text><text x="528" y="785"  fill="rgb(253 202 0)">a</text><text x="531" y="785"  fill="rgb(253 200 0)">n</text><text x="534" y="785"  fill="rgb(255 198 0)">sf</text><text x="540" y="785"  fill="rgb(255 199 0)">o</text><text x="543" y="785"  fill="rgb(254 199 0)">rm</text><text x="549" y="785"  fill="rgb(255 198 0)">a</text><text x="552" y="785"  fill="rgb(255 199 0)">tionKey: string[</text><text x="600" y="785"  fill="rgb(255 198 0)">]</text><text x="603" y="785"  fill="rgb(254 198 0)">; </text><text x="609" y="785"  fill="rgb(254 199 0)">/</text><text x="612" y="785"  fill="rgb(255 198 0)">/</text><text x="615" y="785"  fill="rgb(254 198 0)"> </text><text x="618" y="785"  fill="rgb(254 197 0)">k</text><text x="621" y="785"  fill="rgb(250 201 0)">e</text><text x="624" y="785"  fill="rgb(247 245 238)">y</text><text x="627" y="785"  fill="rgb(246 246 249)">s</text><text x="630" y="785"  fill="rgb(246 246 246)"> appeared in transform</text><text x="696" y="785"  fill="rgb(245 245 245)">a</text><text x="699" y="785"  fill="rgb(255 255 250)">t</text><text x="702" y="785"  fill="rgb(118 190 230)">i</text><text x="705" y="785"  fill="rgb(8 137 219)">o</text><text x="708" y="785"  fill="rgb(0 123 222)">n</text><text x="711" y="785"  fill="rgb(0 141 224)">,</text><text x="714" y="785"  fill="rgb(0 144 224)"> </text><text x="717" y="785"  fill="rgb(0 144 226)">i</text><text x="720" y="785"  fill="rgb(1 151 225)">f</text><text x="723" y="785"  fill="rgb(0 144 224)"> </text><text x="726" y="785"  fill="rgb(0 147 227)">t</text><text x="729" y="785"  fill="rgb(1 148 227)">h</text><text x="732" y="785"  fill="rgb(2 147 227)">e</text><text x="735" y="785"  fill="rgb(1 148 227)">r</text><text x="738" y="785"  fill="rgb(0 147 227)">e</text><text x="741" y="785"  fill="rgb(0 148 227)"> </text><text x="744" y="785"  fill="rgb(1 147 227)">i</text><text x="747" y="785"  fill="rgb(1 148 228)">s </text><text x="753" y="785"  fill="rgb(0 147 225)">a </text><text x="759" y="785"  fill="rgb(1 148 229)">t</text><text x="762" y="785"  fill="rgb(1 148 228)">r</text><text x="765" y="785"  fill="rgb(0 147 227)">a</text><text x="768" y="785"  fill="rgb(0 147 228)">n</text><text x="771" y="785"  fill="rgb(0 146 228)">s</text><text x="774" y="785"  fill="rgb(0 147 226)">fo</text><text x="780" y="785"  fill="rgb(1 148 227)">r</text><text x="783" y="785"  fill="rgb(2 147 228)">m</text><text x="786" y="785"  fill="rgb(1 148 227)">a</text><text x="789" y="785"  fill="rgb(1 148 228)">t</text><text x="792" y="785"  fill="rgb(1 148 227)">i</text><text x="795" y="785"  fill="rgb(1 147 227)">o</text><text x="798" y="785"  fill="rgb(1 148 228)">n</text><text x="801" y="785"  fill="rgb(1 148 225)"> </text><text x="804" y="785"  fill="rgb(1 147 229)">p</text><text x="807" y="785"  fill="rgb(0 147 227)">r</text><text x="810" y="785"  fill="rgb(2 147 229)">i</text><text x="813" y="785"  fill="rgb(0 147 227)">v</text><text x="816" y="785"  fill="rgb(0 148 222)">a</text><text x="819" y="785"  fill="rgb(0 149 226)">t</text><text x="822" y="785"  fill="rgb(0 149 228)">e</text><text x="825" y="785"  fill="rgb(0 145 226)"> </text><text x="828" y="785"  fill="rgb(0 142 229)">a</text><text x="831" y="785"  fill="rgb(0 135 219)">l</text><text x="834" y="785"  fill="rgb(0 116 228)">l</text><text x="837" y="785"  fill="rgb(55 149 225)">I</text><text x="840" y="785"  fill="rgb(231 231 238)">n</text><text x="843" y="785"  fill="rgb(255 253 248)">s</text><text x="846" y="785"  fill="rgb(245 245 245)">i</text><text x="849" y="785"  fill="rgb(246 246 246)">ghtDataset: InsightDataset[]; private mfi</text><text x="972" y="785"  fill="rgb(247 247 248)">e</text><text x="975" y="785"  fill="rgb(228 237 216)">l</text><text x="978" y="785"  fill="rgb(140 200 0)">d</text><text x="981" y="785"  fill="rgb(129 197 25)">s</text><text x="984" y="785"  fill="rgb(132 197 32)">:</text><text x="987" y="785"  fill="rgb(130 197 33)"> </text><text x="990" y="785"  fill="rgb(131 197 27)">s</text><text x="993" y="785"  fill="rgb(133 198 32)">t</text><text x="996" y="785"  fill="rgb(133 197 34)">r</text><text x="999" y="785"  fill="rgb(133 198 31)">i</text><text x="1002" y="785"  fill="rgb(131 198 32)">n</text><text x="1005" y="785"  fill="rgb(132 198 32)">g</text><text x="1008" y="785"  fill="rgb(131 197 33)">[</text><text x="1011" y="785"  fill="rgb(131 199 25)">]</text><text x="1014" y="785"  fill="rgb(124 195 8)">;</text><text x="1017" y="785"  fill="rgb(215 234 188)"> </text><text x="1020" y="785"  fill="rgb(248 247 250)">p</text><text x="1023" y="785"  fill="rgb(246 246 245)">r</text><text x="1026" y="785"  fill="rgb(246 246 246)">ivate sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset </text><text x="0" y="790"  fill="rgb(246 246 246)">= insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS</text><text x="513" y="790"  fill="rgb(246 246 245)">&quot;</text><text x="516" y="790"  fill="rgb(245 246 250)"> </text><text x="519" y="790"  fill="rgb(247 250 255)">&amp;</text><text x="522" y="790"  fill="rgb(249 219 94)">&amp;</text><text x="525" y="790"  fill="rgb(252 193 0)"> </text><text x="528" y="790"  fill="rgb(253 199 0)">k</text><text x="531" y="790"  fill="rgb(254 199 1)">e</text><text x="534" y="790"  fill="rgb(254 200 2)">y</text><text x="537" y="790"  fill="rgb(252 201 0)"> </text><text x="540" y="790"  fill="rgb(255 197 0)">!</text><text x="543" y="790"  fill="rgb(254 199 0)">=</text><text x="546" y="790"  fill="rgb(252 201 0)">=</text><text x="549" y="790"  fill="rgb(253 200 0)"> </text><text x="552" y="790"  fill="rgb(255 199 0)">&quot;</text><text x="555" y="790"  fill="rgb(254 199 0)">W</text><text x="558" y="790"  fill="rgb(255 198 0)">H</text><text x="561" y="790"  fill="rgb(255 199 0)">ERE&quot; &amp;&amp; </text><text x="585" y="790"  fill="rgb(255 198 0)">k</text><text x="588" y="790"  fill="rgb(255 199 0)">ey </text><text x="597" y="790"  fill="rgb(255 198 1)">!</text><text x="600" y="790"  fill="rgb(254 198 2)">=</text><text x="603" y="790"  fill="rgb(249 202 2)">=</text><text x="606" y="790"  fill="rgb(251 201 2)"> </text><text x="609" y="790"  fill="rgb(254 196 0)">&quot;</text><text x="612" y="790"  fill="rgb(252 200 2)">T</text><text x="615" y="790"  fill="rgb(253 200 0)">R</text><text x="618" y="790"  fill="rgb(252 196 0)">A</text><text x="621" y="790"  fill="rgb(247 235 190)">N</text><text x="624" y="790"  fill="rgb(245 247 253)">S</text><text x="627" y="790"  fill="rgb(246 245 245)">F</text><text x="630" y="790"  fill="rgb(246 246 246)">ORMATIONS&quot;) { throw ne</text><text x="696" y="790"  fill="rgb(250 250 247)">w</text><text x="699" y="790"  fill="rgb(121 173 229)"> </text><text x="702" y="790"  fill="rgb(0 129 219)">I</text><text x="705" y="790"  fill="rgb(0 148 230)">n</text><text x="708" y="790"  fill="rgb(0 150 233)">s</text><text x="711" y="790"  fill="rgb(1 146 224)">i</text><text x="714" y="790"  fill="rgb(0 147 220)">g</text><text x="717" y="790"  fill="rgb(0 149 228)">h</text><text x="720" y="790"  fill="rgb(0 150 229)">t</text><text x="723" y="790"  fill="rgb(0 149 227)">E</text><text x="726" y="790"  fill="rgb(1 147 227)">rr</text><text x="732" y="790"  fill="rgb(0 149 229)">o</text><text x="735" y="790"  fill="rgb(1 148 228)">r</text><text x="738" y="790"  fill="rgb(1 148 227)">(</text><text x="741" y="790"  fill="rgb(1 147 227)">)</text><text x="744" y="790"  fill="rgb(0 148 227)">;</text><text x="747" y="790"  fill="rgb(0 147 224)"> </text><text x="750" y="790"  fill="rgb(0 147 227)">}</text><text x="753" y="790"  fill="rgb(0 147 232)"> </text><text x="756" y="790"  fill="rgb(0 147 229)">}</text><text x="759" y="790"  fill="rgb(0 144 224)"> </text><text x="762" y="790"  fill="rgb(0 134 224)">t</text><text x="765" y="790"  fill="rgb(0 135 226)">h</text><text x="768" y="790"  fill="rgb(0 137 221)">i</text><text x="771" y="790"  fill="rgb(0 136 218)">s</text><text x="774" y="790"  fill="rgb(0 135 224)">.</text><text x="777" y="790"  fill="rgb(0 136 230)">v</text><text x="780" y="790"  fill="rgb(0 138 224)">a</text><text x="783" y="790"  fill="rgb(0 148 222)">l</text><text x="786" y="790"  fill="rgb(0 149 230)">i</text><text x="789" y="790"  fill="rgb(0 145 233)">d</text><text x="792" y="790"  fill="rgb(0 148 227)">a</text><text x="795" y="790"  fill="rgb(1 148 223)">t</text><text x="798" y="790"  fill="rgb(0 148 224)">e</text><text x="801" y="790"  fill="rgb(0 148 227)">W</text><text x="804" y="790"  fill="rgb(0 149 226)">h</text><text x="807" y="790"  fill="rgb(0 148 223)">e</text><text x="810" y="790"  fill="rgb(0 145 226)">r</text><text x="813" y="790"  fill="rgb(0 147 228)">e</text><text x="816" y="790"  fill="rgb(0 149 225)">(</text><text x="819" y="790"  fill="rgb(0 150 225)">q</text><text x="822" y="790"  fill="rgb(1 147 226)">.</text><text x="825" y="790"  fill="rgb(0 148 225)">W</text><text x="828" y="790"  fill="rgb(1 146 229)">H</text><text x="831" y="790"  fill="rgb(0 146 226)">E</text><text x="834" y="790"  fill="rgb(0 150 230)">R</text><text x="837" y="790"  fill="rgb(0 142 219)">E</text><text x="840" y="790"  fill="rgb(0 124 229)">)</text><text x="843" y="790"  fill="rgb(191 226 239)">;</text><text x="846" y="790"  fill="rgb(249 247 246)"> </text><text x="849" y="790"  fill="rgb(246 246 246)">if (q.TRANSFORMATIONS) { this.validateTra</text><text x="972" y="790"  fill="rgb(246 247 248)">n</text><text x="975" y="790"  fill="rgb(230 238 219)">s</text><text x="978" y="790"  fill="rgb(145 201 47)">f</text><text x="981" y="790"  fill="rgb(130 198 19)">o</text><text x="984" y="790"  fill="rgb(133 198 30)">r</text><text x="987" y="790"  fill="rgb(132 200 27)">m</text><text x="990" y="790"  fill="rgb(133 198 32)">a</text><text x="993" y="790"  fill="rgb(132 197 30)">t</text><text x="996" y="790"  fill="rgb(133 198 31)">i</text><text x="999" y="790"  fill="rgb(132 197 31)">o</text><text x="1002" y="790"  fill="rgb(132 198 32)">n</text><text x="1005" y="790"  fill="rgb(133 197 30)">s</text><text x="1008" y="790"  fill="rgb(132 198 31)">(</text><text x="1011" y="790"  fill="rgb(127 198 16)">q</text><text x="1014" y="790"  fill="rgb(145 201 70)">.</text><text x="1017" y="790"  fill="rgb(255 251 255)">T</text><text x="1020" y="790"  fill="rgb(245 245 245)">R</text><text x="1023" y="790"  fill="rgb(246 246 246)">ANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; ||</text><text x="0" y="795"  fill="rgb(246 246 246)"> Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isA</text><text x="516" y="795"  fill="rgb(246 245 245)">r</text><text x="519" y="795"  fill="rgb(245 245 252)">r</text><text x="522" y="795"  fill="rgb(248 255 255)">a</text><text x="525" y="795"  fill="rgb(253 234 142)">y</text><text x="528" y="795"  fill="rgb(250 193 0)">(</text><text x="531" y="795"  fill="rgb(254 197 0)">q</text><text x="534" y="795"  fill="rgb(255 200 2)">)</text><text x="537" y="795"  fill="rgb(254 200 1)"> </text><text x="540" y="795"  fill="rgb(255 198 0)">||</text><text x="546" y="795"  fill="rgb(254 198 0)"> </text><text x="549" y="795"  fill="rgb(255 197 0)">q</text><text x="552" y="795"  fill="rgb(255 198 0)">.</text><text x="555" y="795"  fill="rgb(254 199 0)">l</text><text x="558" y="795"  fill="rgb(254 198 0)">e</text><text x="561" y="795"  fill="rgb(255 199 0)">ngth &lt; 1</text><text x="585" y="795"  fill="rgb(255 198 0)">)</text><text x="588" y="795"  fill="rgb(255 199 0)"> { </text><text x="597" y="795"  fill="rgb(255 198 0)">t</text><text x="600" y="795"  fill="rgb(253 199 2)">h</text><text x="603" y="795"  fill="rgb(254 197 0)">r</text><text x="606" y="795"  fill="rgb(253 196 1)">o</text><text x="609" y="795"  fill="rgb(252 201 3)">w</text><text x="612" y="795"  fill="rgb(252 195 0)"> </text><text x="615" y="795"  fill="rgb(252 188 0)">n</text><text x="618" y="795"  fill="rgb(251 234 177)">e</text><text x="621" y="795"  fill="rgb(246 251 255)">w</text><text x="624" y="795"  fill="rgb(245 245 247)"> </text><text x="627" y="795"  fill="rgb(246 246 245)">I</text><text x="630" y="795"  fill="rgb(246 246 246)">nsightError(); // q sh</text><text x="696" y="795"  fill="rgb(250 250 248)">o</text><text x="699" y="795"  fill="rgb(91 163 220)">u</text><text x="702" y="795"  fill="rgb(0 131 223)">l</text><text x="705" y="795"  fill="rgb(0 141 233)">d</text><text x="708" y="795"  fill="rgb(0 145 223)"> </text><text x="711" y="795"  fill="rgb(0 151 226)">b</text><text x="714" y="795"  fill="rgb(0 149 233)">e</text><text x="717" y="795"  fill="rgb(0 148 231)"> </text><text x="720" y="795"  fill="rgb(0 145 226)">a</text><text x="723" y="795"  fill="rgb(0 145 225)">n</text><text x="726" y="795"  fill="rgb(1 147 227)"> </text><text x="729" y="795"  fill="rgb(1 148 227)">o</text><text x="732" y="795"  fill="rgb(1 148 226)">b</text><text x="735" y="795"  fill="rgb(1 147 229)">j</text><text x="738" y="795"  fill="rgb(1 148 227)">e</text><text x="741" y="795"  fill="rgb(2 148 228)">c</text><text x="744" y="795"  fill="rgb(0 150 229)">t</text><text x="747" y="795"  fill="rgb(1 148 224)">,</text><text x="750" y="795"  fill="rgb(0 146 225)"> </text><text x="753" y="795"  fill="rgb(0 142 227)">a</text><text x="756" y="795"  fill="rgb(0 134 228)">n</text><text x="759" y="795"  fill="rgb(0 131 213)">d</text><text x="762" y="795"  fill="rgb(124 196 227)"> </text><text x="765" y="795"  fill="rgb(187 219 240)">s</text><text x="768" y="795"  fill="rgb(175 220 239)">h</text><text x="771" y="795"  fill="rgb(182 223 241)">o</text><text x="774" y="795"  fill="rgb(205 226 241)">u</text><text x="777" y="795"  fill="rgb(204 225 240)">l</text><text x="780" y="795"  fill="rgb(81 159 216)">d</text><text x="783" y="795"  fill="rgb(0 127 225)"> </text><text x="786" y="795"  fill="rgb(0 137 224)">h</text><text x="789" y="795"  fill="rgb(0 143 212)">a</text><text x="792" y="795"  fill="rgb(0 148 229)">s</text><text x="795" y="795"  fill="rgb(0 148 237)"> </text><text x="798" y="795"  fill="rgb(0 144 231)">a</text><text x="801" y="795"  fill="rgb(1 143 229)">t</text><text x="804" y="795"  fill="rgb(0 145 229)"> </text><text x="807" y="795"  fill="rgb(1 146 227)">l</text><text x="810" y="795"  fill="rgb(0 150 224)">ea</text><text x="816" y="795"  fill="rgb(0 147 226)">st </text><text x="825" y="795"  fill="rgb(0 149 228)">o</text><text x="828" y="795"  fill="rgb(0 151 225)">n</text><text x="831" y="795"  fill="rgb(0 150 226)">e</text><text x="834" y="795"  fill="rgb(0 144 231)"> </text><text x="837" y="795"  fill="rgb(0 140 230)">e</text><text x="840" y="795"  fill="rgb(0 119 211)">l</text><text x="843" y="795"  fill="rgb(180 220 237)">e</text><text x="846" y="795"  fill="rgb(249 247 246)">m</text><text x="849" y="795"  fill="rgb(246 246 246)">ent } for (let key of q) { this.validateK</text><text x="972" y="795"  fill="rgb(247 246 248)">e</text><text x="975" y="795"  fill="rgb(232 241 221)">y</text><text x="978" y="795"  fill="rgb(150 205 64)">(</text><text x="981" y="795"  fill="rgb(127 196 17)">k</text><text x="984" y="795"  fill="rgb(132 197 32)">e</text><text x="987" y="795"  fill="rgb(132 197 29)">y</text><text x="990" y="795"  fill="rgb(133 198 31)">)</text><text x="993" y="795"  fill="rgb(132 197 32)">;</text><text x="996" y="795"  fill="rgb(133 198 30)"> </text><text x="999" y="795"  fill="rgb(132 197 31)">t</text><text x="1002" y="795"  fill="rgb(133 198 31)">h</text><text x="1005" y="795"  fill="rgb(132 198 31)">i</text><text x="1008" y="795"  fill="rgb(133 201 31)">s</text><text x="1011" y="795"  fill="rgb(116 190 0)">.</text><text x="1014" y="795"  fill="rgb(201 226 163)">t</text><text x="1017" y="795"  fill="rgb(249 247 252)">r</text><text x="1020" y="795"  fill="rgb(245 245 245)">a</text><text x="1023" y="795"  fill="rgb(246 246 246)">nsformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if </text><text x="0" y="800"  fill="rgb(246 246 246)">(splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(split</text><text x="519" y="800"  fill="rgb(245 243 243)">t</text><text x="522" y="800"  fill="rgb(225 175 174)">e</text><text x="525" y="800"  fill="rgb(234 232 255)">d</text><text x="528" y="800"  fill="rgb(247 254 231)">K</text><text x="531" y="800"  fill="rgb(246 205 37)">e</text><text x="534" y="800"  fill="rgb(249 192 0)">y</text><text x="537" y="800"  fill="rgb(254 191 0)">[</text><text x="540" y="800"  fill="rgb(252 199 0)">1</text><text x="543" y="800"  fill="rgb(251 207 0)">]</text><text x="546" y="800"  fill="rgb(255 199 1)">)</text><text x="549" y="800"  fill="rgb(255 198 1)">)</text><text x="552" y="800"  fill="rgb(255 199 0)">)</text><text x="555" y="800"  fill="rgb(255 198 0)">)</text><text x="558" y="800"  fill="rgb(254 199 0)"> </text><text x="561" y="800"  fill="rgb(255 199 0)">{ </text><text x="567" y="800"  fill="rgb(255 198 0)">t</text><text x="570" y="800"  fill="rgb(255 199 0)">hrow </text><text x="585" y="800"  fill="rgb(255 198 0)">n</text><text x="588" y="800"  fill="rgb(255 199 0)">e</text><text x="591" y="800"  fill="rgb(255 198 0)">w </text><text x="597" y="800"  fill="rgb(253 197 0)">I</text><text x="600" y="800"  fill="rgb(254 200 0)">n</text><text x="603" y="800"  fill="rgb(255 199 0)">s</text><text x="606" y="800"  fill="rgb(253 198 0)">i</text><text x="609" y="800"  fill="rgb(248 195 0)">g</text><text x="612" y="800"  fill="rgb(254 203 34)">h</text><text x="615" y="800"  fill="rgb(249 243 227)">t</text><text x="618" y="800"  fill="rgb(244 250 255)">E</text><text x="621" y="800"  fill="rgb(245 245 246)">r</text><text x="624" y="800"  fill="rgb(246 246 245)">r</text><text x="627" y="800"  fill="rgb(246 246 246)">or(); } } private valid</text><text x="696" y="800"  fill="rgb(245 245 245)">a</text><text x="699" y="800"  fill="rgb(255 255 252)">t</text><text x="702" y="800"  fill="rgb(91 193 216)">e</text><text x="705" y="800"  fill="rgb(40 146 225)">A</text><text x="708" y="800"  fill="rgb(0 122 222)">P</text><text x="711" y="800"  fill="rgb(0 127 229)">P</text><text x="714" y="800"  fill="rgb(0 138 229)">L</text><text x="717" y="800"  fill="rgb(0 140 218)">Y</text><text x="720" y="800"  fill="rgb(0 144 223)">(</text><text x="723" y="800"  fill="rgb(0 147 234)">q</text><text x="726" y="800"  fill="rgb(0 144 231)">:</text><text x="729" y="800"  fill="rgb(0 145 227)"> </text><text x="732" y="800"  fill="rgb(0 144 229)">a</text><text x="735" y="800"  fill="rgb(0 144 227)">n</text><text x="738" y="800"  fill="rgb(0 142 227)">y</text><text x="741" y="800"  fill="rgb(0 139 222)">)</text><text x="744" y="800"  fill="rgb(0 127 217)">:</text><text x="747" y="800"  fill="rgb(0 121 226)"> </text><text x="750" y="800"  fill="rgb(0 137 230)">v</text><text x="753" y="800"  fill="rgb(67 159 228)">o</text><text x="756" y="800"  fill="rgb(166 195 222)">i</text><text x="759" y="800"  fill="rgb(255 255 249)">d</text><text x="762" y="800"  fill="rgb(255 255 250)"> </text><text x="765" y="800"  fill="rgb(255 255 247)">{</text><text x="768" y="800"  fill="rgb(255 254 247)"> if </text><text x="780" y="800"  fill="rgb(255 255 253)">(</text><text x="783" y="800"  fill="rgb(218 227 241)">!</text><text x="786" y="800"  fill="rgb(103 177 236)">A</text><text x="789" y="800"  fill="rgb(39 151 228)">r</text><text x="792" y="800"  fill="rgb(0 123 216)">r</text><text x="795" y="800"  fill="rgb(0 123 211)">a</text><text x="798" y="800"  fill="rgb(0 137 216)">y</text><text x="801" y="800"  fill="rgb(0 142 227)">.</text><text x="804" y="800"  fill="rgb(0 143 230)">i</text><text x="807" y="800"  fill="rgb(0 142 232)">s</text><text x="810" y="800"  fill="rgb(0 143 226)">A</text><text x="813" y="800"  fill="rgb(0 143 225)">r</text><text x="816" y="800"  fill="rgb(0 144 229)">r</text><text x="819" y="800"  fill="rgb(0 144 230)">a</text><text x="822" y="800"  fill="rgb(0 144 228)">y</text><text x="825" y="800"  fill="rgb(0 140 226)">(</text><text x="828" y="800"  fill="rgb(0 134 220)">q</text><text x="831" y="800"  fill="rgb(0 120 222)">)</text><text x="834" y="800"  fill="rgb(0 132 221)">)</text><text x="837" y="800"  fill="rgb(67 166 224)"> </text><text x="840" y="800"  fill="rgb(198 222 244)">{</text><text x="843" y="800"  fill="rgb(255 253 248)"> </text><text x="846" y="800"  fill="rgb(245 245 245)">t</text><text x="849" y="800"  fill="rgb(246 246 246)">hrow new InsightError(); // q should be a</text><text x="972" y="800"  fill="rgb(247 246 248)">n</text><text x="975" y="800"  fill="rgb(232 240 220)"> </text><text x="978" y="800"  fill="rgb(150 204 64)">a</text><text x="981" y="800"  fill="rgb(128 197 17)">r</text><text x="984" y="800"  fill="rgb(132 199 33)">r</text><text x="987" y="800"  fill="rgb(132 198 29)">a</text><text x="990" y="800"  fill="rgb(133 197 33)">y</text><text x="993" y="800"  fill="rgb(133 198 30)">,</text><text x="996" y="800"  fill="rgb(133 198 32)"> </text><text x="999" y="800"  fill="rgb(133 197 35)">a</text><text x="1002" y="800"  fill="rgb(133 197 32)">n</text><text x="1005" y="800"  fill="rgb(133 198 30)">d</text><text x="1008" y="800"  fill="rgb(126 198 10)"> </text><text x="1011" y="800"  fill="rgb(138 194 27)">s</text><text x="1014" y="800"  fill="rgb(248 247 253)">h</text><text x="1017" y="800"  fill="rgb(246 245 246)">o</text><text x="1020" y="800"  fill="rgb(246 246 246)">uld have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: st</text><text x="0" y="805"  fill="rgb(246 246 246)">ring = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { thr</text><text x="519" y="805"  fill="rgb(246 249 249)">o</text><text x="522" y="805"  fill="rgb(242 211 213)">w</text><text x="525" y="805"  fill="rgb(206 0 0)"> </text><text x="528" y="805"  fill="rgb(244 232 243)">n</text><text x="531" y="805"  fill="rgb(248 255 255)">e</text><text x="534" y="805"  fill="rgb(244 234 153)">w</text><text x="537" y="805"  fill="rgb(249 199 9)"> </text><text x="540" y="805"  fill="rgb(255 193 0)">I</text><text x="543" y="805"  fill="rgb(254 195 0)">n</text><text x="546" y="805"  fill="rgb(251 200 0)">s</text><text x="549" y="805"  fill="rgb(252 200 0)">i</text><text x="552" y="805"  fill="rgb(255 199 0)">g</text><text x="555" y="805"  fill="rgb(254 198 0)">h</text><text x="558" y="805"  fill="rgb(253 198 0)">t</text><text x="561" y="805"  fill="rgb(254 198 0)">E</text><text x="564" y="805"  fill="rgb(255 198 0)">r</text><text x="567" y="805"  fill="rgb(255 199 0)">r</text><text x="570" y="805"  fill="rgb(255 198 0)">or(</text><text x="579" y="805"  fill="rgb(254 198 0)">)</text><text x="582" y="805"  fill="rgb(255 198 0)">;</text><text x="585" y="805"  fill="rgb(255 200 1)"> </text><text x="588" y="805"  fill="rgb(254 199 0)">} </text><text x="594" y="805"  fill="rgb(255 198 0)">t</text><text x="597" y="805"  fill="rgb(255 199 0)">h</text><text x="600" y="805"  fill="rgb(254 195 0)">i</text><text x="603" y="805"  fill="rgb(250 192 0)">s</text><text x="606" y="805"  fill="rgb(249 201 8)">.</text><text x="609" y="805"  fill="rgb(249 224 111)">t</text><text x="612" y="805"  fill="rgb(245 250 255)">r</text><text x="615" y="805"  fill="rgb(245 248 255)">a</text><text x="618" y="805"  fill="rgb(246 245 246)">n</text><text x="621" y="805"  fill="rgb(246 246 246)">sformationKey.push(applyk</text><text x="696" y="805"  fill="rgb(245 246 246)">e</text><text x="699" y="805"  fill="rgb(246 245 245)">y</text><text x="702" y="805"  fill="rgb(255 255 251)">)</text><text x="705" y="805"  fill="rgb(255 255 246)">;</text><text x="708" y="805"  fill="rgb(240 239 239)"> </text><text x="711" y="805"  fill="rgb(166 207 235)">i</text><text x="714" y="805"  fill="rgb(41 164 233)">f</text><text x="717" y="805"  fill="rgb(41 152 224)"> </text><text x="720" y="805"  fill="rgb(36 147 216)">(</text><text x="723" y="805"  fill="rgb(23 144 220)">A</text><text x="726" y="805"  fill="rgb(18 144 222)">r</text><text x="729" y="805"  fill="rgb(17 145 222)">r</text><text x="732" y="805"  fill="rgb(26 147 220)">a</text><text x="735" y="805"  fill="rgb(39 149 219)">y</text><text x="738" y="805"  fill="rgb(41 155 222)">.</text><text x="741" y="805"  fill="rgb(41 169 233)">i</text><text x="744" y="805"  fill="rgb(144 205 239)">s</text><text x="747" y="805"  fill="rgb(232 234 240)">A</text><text x="750" y="805"  fill="rgb(251 248 243)">r</text><text x="753" y="805"  fill="rgb(255 255 248)">r</text><text x="756" y="805"  fill="rgb(255 255 250)">a</text><text x="759" y="805"  fill="rgb(252 247 246)">y</text><text x="762" y="805"  fill="rgb(245 245 245)">(</text><text x="765" y="805"  fill="rgb(245 245 246)">crite</text><text x="780" y="805"  fill="rgb(245 245 245)">r</text><text x="783" y="805"  fill="rgb(255 253 247)">i</text><text x="786" y="805"  fill="rgb(255 255 247)">a</text><text x="789" y="805"  fill="rgb(255 254 247)">)</text><text x="792" y="805"  fill="rgb(240 239 246)"> </text><text x="795" y="805"  fill="rgb(204 227 240)">|</text><text x="798" y="805"  fill="rgb(58 183 231)">|</text><text x="801" y="805"  fill="rgb(41 160 221)"> </text><text x="804" y="805"  fill="rgb(40 152 221)">O</text><text x="807" y="805"  fill="rgb(31 149 220)">b</text><text x="810" y="805"  fill="rgb(21 145 221)">j</text><text x="813" y="805"  fill="rgb(13 142 223)">e</text><text x="816" y="805"  fill="rgb(19 146 223)">c</text><text x="819" y="805"  fill="rgb(30 148 218)">t</text><text x="822" y="805"  fill="rgb(39 149 218)">.</text><text x="825" y="805"  fill="rgb(41 156 222)">k</text><text x="828" y="805"  fill="rgb(41 175 234)">e</text><text x="831" y="805"  fill="rgb(196 222 243)">y</text><text x="834" y="805"  fill="rgb(250 244 244)">s</text><text x="837" y="805"  fill="rgb(255 255 248)">(</text><text x="840" y="805"  fill="rgb(255 254 247)">c</text><text x="843" y="805"  fill="rgb(245 245 245)">r</text><text x="846" y="805"  fill="rgb(246 246 246)">iteria).length &gt; 1) { throw new InsightErr</text><text x="972" y="805"  fill="rgb(246 247 248)">o</text><text x="975" y="805"  fill="rgb(229 239 218)">r</text><text x="978" y="805"  fill="rgb(146 203 45)">(</text><text x="981" y="805"  fill="rgb(130 199 21)">)</text><text x="984" y="805"  fill="rgb(133 198 32)">;</text><text x="987" y="805"  fill="rgb(133 199 27)"> </text><text x="990" y="805"  fill="rgb(133 198 33)">}</text><text x="993" y="805"  fill="rgb(133 197 34)"> </text><text x="996" y="805"  fill="rgb(133 197 33)">l</text><text x="999" y="805"  fill="rgb(133 199 23)">e</text><text x="1002" y="805"  fill="rgb(133 198 30)">t</text><text x="1005" y="805"  fill="rgb(134 197 35)"> </text><text x="1008" y="805"  fill="rgb(120 194 0)">a</text><text x="1011" y="805"  fill="rgb(211 228 197)">p</text><text x="1014" y="805"  fill="rgb(248 247 249)">p</text><text x="1017" y="805"  fill="rgb(245 246 245)">l</text><text x="1020" y="805"  fill="rgb(246 246 246)">ytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = cr</text><text x="0" y="810"  fill="rgb(246 246 246)">iteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfield</text><text x="519" y="810"  fill="rgb(245 245 245)">s</text><text x="522" y="810"  fill="rgb(249 255 255)">.</text><text x="525" y="810"  fill="rgb(231 157 155)">i</text><text x="528" y="810"  fill="rgb(218 0 0)">n</text><text x="531" y="810"  fill="rgb(231 189 191)">c</text><text x="534" y="810"  fill="rgb(248 255 255)">l</text><text x="537" y="810"  fill="rgb(246 254 255)">u</text><text x="540" y="810"  fill="rgb(249 229 179)">d</text><text x="543" y="810"  fill="rgb(248 208 46)">e</text><text x="546" y="810"  fill="rgb(252 188 0)">s</text><text x="549" y="810"  fill="rgb(253 190 0)">(</text><text x="552" y="810"  fill="rgb(254 196 0)">k</text><text x="555" y="810"  fill="rgb(251 198 0)">e</text><text x="558" y="810"  fill="rgb(249 201 0)">y</text><text x="561" y="810"  fill="rgb(254 200 0)">[</text><text x="564" y="810"  fill="rgb(254 199 2)">1</text><text x="567" y="810"  fill="rgb(254 199 0)">]</text><text x="570" y="810"  fill="rgb(254 201 0)">)</text><text x="573" y="810"  fill="rgb(253 200 0)">)</text><text x="576" y="810"  fill="rgb(254 200 0)">)</text><text x="579" y="810"  fill="rgb(254 198 2)"> </text><text x="582" y="810"  fill="rgb(252 200 0)">{</text><text x="585" y="810"  fill="rgb(253 198 0)"> </text><text x="588" y="810"  fill="rgb(251 195 0)">t</text><text x="591" y="810"  fill="rgb(252 195 0)">h</text><text x="594" y="810"  fill="rgb(253 195 0)">r</text><text x="597" y="810"  fill="rgb(251 189 0)">o</text><text x="600" y="810"  fill="rgb(250 201 0)">w</text><text x="603" y="810"  fill="rgb(244 231 174)"> </text><text x="606" y="810"  fill="rgb(245 250 255)">n</text><text x="609" y="810"  fill="rgb(245 252 255)">e</text><text x="612" y="810"  fill="rgb(245 246 251)">w</text><text x="615" y="810"  fill="rgb(245 246 245)"> </text><text x="618" y="810"  fill="rgb(246 246 245)">I</text><text x="621" y="810"  fill="rgb(246 246 246)">nsightError(); } } else if</text><text x="699" y="810"  fill="rgb(245 245 245)"> </text><text x="702" y="810"  fill="rgb(246 246 246)">(</text><text x="705" y="810"  fill="rgb(250 247 246)">t</text><text x="708" y="810"  fill="rgb(255 251 248)">h</text><text x="711" y="810"  fill="rgb(255 255 248)">i</text><text x="714" y="810"  fill="rgb(255 255 249)">s</text><text x="717" y="810"  fill="rgb(255 255 251)">.</text><text x="720" y="810"  fill="rgb(255 255 252)">m</text><text x="723" y="810"  fill="rgb(255 255 250)">s</text><text x="726" y="810"  fill="rgb(255 255 248)">t</text><text x="729" y="810"  fill="rgb(255 255 249)">o</text><text x="732" y="810"  fill="rgb(255 255 250)">k</text><text x="735" y="810"  fill="rgb(255 255 252)">e</text><text x="738" y="810"  fill="rgb(255 255 251)">n</text><text x="741" y="810"  fill="rgb(255 255 249)">.</text><text x="744" y="810"  fill="rgb(255 255 248)">i</text><text x="747" y="810"  fill="rgb(255 253 247)">n</text><text x="750" y="810"  fill="rgb(254 249 247)">c</text><text x="753" y="810"  fill="rgb(247 246 246)">l</text><text x="756" y="810"  fill="rgb(246 246 246)">u</text><text x="759" y="810"  fill="rgb(245 245 245)">d</text><text x="762" y="810"  fill="rgb(246 246 246)">es(app</text><text x="780" y="810"  fill="rgb(245 246 246)">l</text><text x="783" y="810"  fill="rgb(245 245 245)">y</text><text x="786" y="810"  fill="rgb(246 246 246)">t</text><text x="789" y="810"  fill="rgb(250 247 246)">o</text><text x="792" y="810"  fill="rgb(255 251 246)">k</text><text x="795" y="810"  fill="rgb(255 254 248)">e</text><text x="798" y="810"  fill="rgb(255 255 249)">n</text><text x="801" y="810"  fill="rgb(255 255 251)">))</text><text x="807" y="810"  fill="rgb(255 255 249)"> {</text><text x="813" y="810"  fill="rgb(255 255 248)"> i</text><text x="819" y="810"  fill="rgb(255 255 250)">f</text><text x="822" y="810"  fill="rgb(255 255 251)"> (</text><text x="828" y="810"  fill="rgb(255 255 249)">!</text><text x="831" y="810"  fill="rgb(255 255 247)">(</text><text x="834" y="810"  fill="rgb(255 250 247)">t</text><text x="837" y="810"  fill="rgb(247 246 246)">h</text><text x="840" y="810"  fill="rgb(245 245 246)">i</text><text x="843" y="810"  fill="rgb(245 246 246)">s</text><text x="846" y="810"  fill="rgb(246 246 246)">.validateIdstring(key[0]) &amp;&amp; (this.sfields</text><text x="972" y="810"  fill="rgb(247 247 248)">.</text><text x="975" y="810"  fill="rgb(227 236 216)">i</text><text x="978" y="810"  fill="rgb(136 200 3)">n</text><text x="981" y="810"  fill="rgb(130 198 21)">c</text><text x="984" y="810"  fill="rgb(132 198 32)">l</text><text x="987" y="810"  fill="rgb(133 198 31)">u</text><text x="990" y="810"  fill="rgb(132 198 33)">d</text><text x="993" y="810"  fill="rgb(132 198 27)">e</text><text x="996" y="810"  fill="rgb(132 197 37)">s</text><text x="999" y="810"  fill="rgb(132 200 25)">(</text><text x="1002" y="810"  fill="rgb(132 197 39)">k</text><text x="1005" y="810"  fill="rgb(129 197 12)">e</text><text x="1008" y="810"  fill="rgb(150 200 73)">y</text><text x="1011" y="810"  fill="rgb(238 244 232)">[</text><text x="1014" y="810"  fill="rgb(247 246 248)">1</text><text x="1017" y="810"  fill="rgb(245 246 245)">]</text><text x="1020" y="810"  fill="rgb(246 246 246)">) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { i</text><text x="0" y="815"  fill="rgb(246 246 246)">f (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateCol</text><text x="519" y="815"  fill="rgb(246 245 245)">u</text><text x="522" y="815"  fill="rgb(245 246 246)">m</text><text x="525" y="815"  fill="rgb(251 255 255)">n</text><text x="528" y="815"  fill="rgb(208 6 0)">s</text><text x="531" y="815"  fill="rgb(222 0 0)">(</text><text x="534" y="815"  fill="rgb(225 95 93)">q</text><text x="537" y="815"  fill="rgb(247 255 255)">:</text><text x="540" y="815"  fill="rgb(248 255 255)"> </text><text x="543" y="815"  fill="rgb(245 254 255)">a</text><text x="546" y="815"  fill="rgb(246 248 255)">n</text><text x="549" y="815"  fill="rgb(249 227 149)">y</text><text x="552" y="815"  fill="rgb(246 212 64)">)</text><text x="555" y="815"  fill="rgb(252 201 40)">:</text><text x="558" y="815"  fill="rgb(252 191 0)"> </text><text x="561" y="815"  fill="rgb(254 188 0)">v</text><text x="564" y="815"  fill="rgb(254 192 0)">o</text><text x="567" y="815"  fill="rgb(255 188 0)">i</text><text x="570" y="815"  fill="rgb(255 187 0)">d</text><text x="573" y="815"  fill="rgb(255 188 0)"> </text><text x="576" y="815"  fill="rgb(255 189 0)">{</text><text x="579" y="815"  fill="rgb(254 193 0)"> </text><text x="582" y="815"  fill="rgb(253 194 0)">i</text><text x="585" y="815"  fill="rgb(251 197 13)">f</text><text x="588" y="815"  fill="rgb(252 203 48)"> </text><text x="591" y="815"  fill="rgb(248 209 62)">(</text><text x="594" y="815"  fill="rgb(246 228 162)">!</text><text x="597" y="815"  fill="rgb(245 249 255)">q</text><text x="600" y="815"  fill="rgb(245 254 255)"> </text><text x="603" y="815"  fill="rgb(246 251 255)">|</text><text x="606" y="815"  fill="rgb(245 246 252)">|</text><text x="609" y="815"  fill="rgb(246 245 246)"> </text><text x="612" y="815"  fill="rgb(246 246 245)">q</text><text x="615" y="815"  fill="rgb(246 246 246)">.length &lt; 1) { throw new Insig</text><text x="705" y="815"  fill="rgb(245 246 246)">h</text><text x="708" y="815"  fill="rgb(245 245 245)">tErr</text><text x="720" y="815"  fill="rgb(246 245 245)">o</text><text x="723" y="815"  fill="rgb(249 246 246)">r</text><text x="726" y="815"  fill="rgb(250 247 246)">()</text><text x="732" y="815"  fill="rgb(248 246 246)">;</text><text x="735" y="815"  fill="rgb(245 245 245)"> } f</text><text x="747" y="815"  fill="rgb(245 245 246)">or</text><text x="753" y="815"  fill="rgb(246 246 246)"> (let mskey </text><text x="789" y="815"  fill="rgb(245 246 246)">o</text><text x="792" y="815"  fill="rgb(245 245 246)">f</text><text x="795" y="815"  fill="rgb(245 245 245)"> q) </text><text x="807" y="815"  fill="rgb(247 246 246)">{</text><text x="810" y="815"  fill="rgb(249 246 246)"> </text><text x="813" y="815"  fill="rgb(251 247 246)">i</text><text x="816" y="815"  fill="rgb(250 247 246)">f</text><text x="819" y="815"  fill="rgb(247 246 246)"> </text><text x="822" y="815"  fill="rgb(245 245 245)">(th</text><text x="831" y="815"  fill="rgb(245 245 246)">is</text><text x="837" y="815"  fill="rgb(246 246 246)">.transformatio</text><text x="879" y="815"  fill="rgb(245 245 245)">nK</text><text x="885" y="815"  fill="rgb(246 246 246)">ey.lengt</text><text x="909" y="815"  fill="rgb(245 245 245)">h </text><text x="915" y="815"  fill="rgb(246 245 245)">&gt;</text><text x="918" y="815"  fill="rgb(246 246 246)"> 0) { if (!this.tr</text><text x="972" y="815"  fill="rgb(248 247 247)">a</text><text x="975" y="815"  fill="rgb(224 235 214)">n</text><text x="978" y="815"  fill="rgb(128 195 0)">s</text><text x="981" y="815"  fill="rgb(132 197 29)">f</text><text x="984" y="815"  fill="rgb(133 197 32)">o</text><text x="987" y="815"  fill="rgb(131 198 28)">r</text><text x="990" y="815"  fill="rgb(132 196 39)">m</text><text x="993" y="815"  fill="rgb(133 200 21)">a</text><text x="996" y="815"  fill="rgb(133 200 25)">t</text><text x="999" y="815"  fill="rgb(131 196 40)">i</text><text x="1002" y="815"  fill="rgb(131 202 26)">o</text><text x="1005" y="815"  fill="rgb(114 192 0)">n</text><text x="1008" y="815"  fill="rgb(219 232 197)">K</text><text x="1011" y="815"  fill="rgb(252 248 255)">e</text><text x="1014" y="815"  fill="rgb(245 245 245)">y</text><text x="1017" y="815"  fill="rgb(246 246 246)">.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray</text><text x="0" y="820"  fill="rgb(246 246 246)">(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object</text><text x="522" y="820"  fill="rgb(246 245 245)">.</text><text x="525" y="820"  fill="rgb(245 250 250)">k</text><text x="528" y="820"  fill="rgb(246 217 215)">e</text><text x="531" y="820"  fill="rgb(214 0 0)">y</text><text x="534" y="820"  fill="rgb(218 0 0)">s</text><text x="537" y="820"  fill="rgb(223 46 41)">(</text><text x="540" y="820"  fill="rgb(238 211 204)">q</text><text x="543" y="820"  fill="rgb(249 255 255)">)</text><text x="546" y="820"  fill="rgb(246 252 255)">.</text><text x="549" y="820"  fill="rgb(245 251 255)">l</text><text x="552" y="820"  fill="rgb(245 252 255)">e</text><text x="555" y="820"  fill="rgb(245 251 255)">n</text><text x="558" y="820"  fill="rgb(244 249 241)">g</text><text x="561" y="820"  fill="rgb(247 242 220)">t</text><text x="564" y="820"  fill="rgb(247 238 220)">h</text><text x="567" y="820"  fill="rgb(247 238 202)"> </text><text x="570" y="820"  fill="rgb(247 235 209)">!</text><text x="573" y="820"  fill="rgb(248 236 215)">=</text><text x="576" y="820"  fill="rgb(249 236 219)">=</text><text x="579" y="820"  fill="rgb(248 238 221)"> </text><text x="582" y="820"  fill="rgb(248 242 224)">2</text><text x="585" y="820"  fill="rgb(245 247 249)">)</text><text x="588" y="820"  fill="rgb(245 252 255)"> </text><text x="591" y="820"  fill="rgb(245 253 255)">{</text><text x="594" y="820"  fill="rgb(245 251 255)"> </text><text x="597" y="820"  fill="rgb(245 247 254)">t</text><text x="600" y="820"  fill="rgb(245 246 247)">h</text><text x="603" y="820"  fill="rgb(246 245 245)">r</text><text x="606" y="820"  fill="rgb(246 246 246)">ow new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightErr</text><text x="867" y="820"  fill="rgb(246 245 245)">o</text><text x="870" y="820"  fill="rgb(245 245 245)">r(</text><text x="876" y="820"  fill="rgb(246 246 246)">)</text><text x="879" y="820"  fill="rgb(247 252 252)">;</text><text x="882" y="820"  fill="rgb(248 255 255)"> </text><text x="885" y="820"  fill="rgb(249 255 255)">}</text><text x="888" y="820"  fill="rgb(250 255 255)"> </text><text x="891" y="820"  fill="rgb(249 255 255)">le</text><text x="897" y="820"  fill="rgb(250 255 255)">t k</text><text x="906" y="820"  fill="rgb(249 255 255)">e</text><text x="909" y="820"  fill="rgb(248 255 255)">ys</text><text x="915" y="820"  fill="rgb(246 249 249)">:</text><text x="918" y="820"  fill="rgb(246 246 246)"> a</text><text x="924" y="820"  fill="rgb(245 245 245)">n</text><text x="927" y="820"  fill="rgb(246 245 245)">y</text><text x="930" y="820"  fill="rgb(246 246 246)"> = q.keys; if </text><text x="972" y="820"  fill="rgb(248 247 248)">(</text><text x="975" y="820"  fill="rgb(227 237 221)">!</text><text x="978" y="820"  fill="rgb(124 195 0)">A</text><text x="981" y="820"  fill="rgb(128 199 30)">r</text><text x="984" y="820"  fill="rgb(134 196 33)">r</text><text x="987" y="820"  fill="rgb(129 197 35)">a</text><text x="990" y="820"  fill="rgb(134 197 30)">y</text><text x="993" y="820"  fill="rgb(132 198 27)">.</text><text x="996" y="820"  fill="rgb(129 199 26)">i</text><text x="999" y="820"  fill="rgb(132 197 41)">s</text><text x="1002" y="820"  fill="rgb(127 192 0)">A</text><text x="1005" y="820"  fill="rgb(159 206 85)">r</text><text x="1008" y="820"  fill="rgb(255 252 255)">r</text><text x="1011" y="820"  fill="rgb(245 245 245)">a</text><text x="1014" y="820"  fill="rgb(246 246 246)">y(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public valida</text><text x="0" y="825"  fill="rgb(246 246 246)">teWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: a</text><text x="525" y="825"  fill="rgb(245 245 245)">n</text><text x="528" y="825"  fill="rgb(246 253 253)">y</text><text x="531" y="825"  fill="rgb(226 147 141)">)</text><text x="534" y="825"  fill="rgb(222 0 0)">:</text><text x="537" y="825"  fill="rgb(228 5 0)"> </text><text x="540" y="825"  fill="rgb(213 0 0)">v</text><text x="543" y="825"  fill="rgb(229 120 111)">o</text><text x="546" y="825"  fill="rgb(248 255 255)">i</text><text x="549" y="825"  fill="rgb(247 255 255)">d</text><text x="552" y="825"  fill="rgb(245 246 247)"> </text><text x="555" y="825"  fill="rgb(245 246 249)">{</text><text x="558" y="825"  fill="rgb(246 247 255)"> </text><text x="561" y="825"  fill="rgb(245 249 255)">if </text><text x="570" y="825"  fill="rgb(245 250 255)">(O</text><text x="576" y="825"  fill="rgb(245 249 255)">bj</text><text x="582" y="825"  fill="rgb(245 248 255)">e</text><text x="585" y="825"  fill="rgb(245 247 254)">c</text><text x="588" y="825"  fill="rgb(245 246 247)">t</text><text x="591" y="825"  fill="rgb(246 246 247)">.</text><text x="594" y="825"  fill="rgb(246 245 245)">ke</text><text x="600" y="825"  fill="rgb(246 246 245)">y</text><text x="603" y="825"  fill="rgb(246 246 246)">s(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(</text><text x="861" y="825"  fill="rgb(246 245 245)">q</text><text x="864" y="825"  fill="rgb(245 245 245)">)</text><text x="867" y="825"  fill="rgb(246 247 247)">[</text><text x="870" y="825"  fill="rgb(247 254 254)">0</text><text x="873" y="825"  fill="rgb(249 255 255)">]</text><text x="876" y="825"  fill="rgb(251 255 255)">;</text><text x="879" y="825"  fill="rgb(243 255 255)"> </text><text x="882" y="825"  fill="rgb(241 236 236)">l</text><text x="885" y="825"  fill="rgb(229 189 189)">e</text><text x="888" y="825"  fill="rgb(212 120 118)">t</text><text x="891" y="825"  fill="rgb(222 53 54)"> </text><text x="894" y="825"  fill="rgb(223 53 54)">v</text><text x="897" y="825"  fill="rgb(221 53 53)">a</text><text x="900" y="825"  fill="rgb(219 53 53)">l</text><text x="903" y="825"  fill="rgb(214 82 77)">u</text><text x="906" y="825"  fill="rgb(228 166 165)">e</text><text x="909" y="825"  fill="rgb(240 237 238)">:</text><text x="912" y="825"  fill="rgb(236 240 239)"> </text><text x="915" y="825"  fill="rgb(247 255 255)">a</text><text x="918" y="825"  fill="rgb(250 255 255)">n</text><text x="921" y="825"  fill="rgb(249 255 255)">y</text><text x="924" y="825"  fill="rgb(248 255 254)"> </text><text x="927" y="825"  fill="rgb(246 246 246)">=</text><text x="930" y="825"  fill="rgb(245 245 245)"> </text><text x="933" y="825"  fill="rgb(246 246 246)">Object.values</text><text x="972" y="825"  fill="rgb(248 247 247)">(</text><text x="975" y="825"  fill="rgb(182 219 125)">q</text><text x="978" y="825"  fill="rgb(123 193 0)">)</text><text x="981" y="825"  fill="rgb(136 198 29)">[</text><text x="984" y="825"  fill="rgb(131 196 44)">0</text><text x="987" y="825"  fill="rgb(133 198 28)">]</text><text x="990" y="825"  fill="rgb(131 199 27)">;</text><text x="993" y="825"  fill="rgb(134 199 18)"> </text><text x="996" y="825"  fill="rgb(133 194 48)">s</text><text x="999" y="825"  fill="rgb(127 199 7)">w</text><text x="1002" y="825"  fill="rgb(130 195 0)">i</text><text x="1005" y="825"  fill="rgb(243 244 245)">t</text><text x="1008" y="825"  fill="rgb(247 246 247)">c</text><text x="1011" y="825"  fill="rgb(245 246 245)">h</text><text x="1014" y="825"  fill="rgb(246 246 246)"> (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); bre</text><text x="0" y="830"  fill="rgb(246 246 246)">ak; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new Insig</text><text x="525" y="830"  fill="rgb(246 245 245)">h</text><text x="528" y="830"  fill="rgb(246 249 249)">t</text><text x="531" y="830"  fill="rgb(248 243 243)">E</text><text x="534" y="830"  fill="rgb(225 69 72)">r</text><text x="537" y="830"  fill="rgb(214 15 0)">r</text><text x="540" y="830"  fill="rgb(222 33 17)">o</text><text x="543" y="830"  fill="rgb(217 0 0)">r</text><text x="546" y="830"  fill="rgb(218 48 50)">(</text><text x="549" y="830"  fill="rgb(242 239 240)">)</text><text x="552" y="830"  fill="rgb(249 255 255)">;</text><text x="555" y="830"  fill="rgb(246 251 251)"> </text><text x="558" y="830"  fill="rgb(245 245 245)">}</text><text x="561" y="830"  fill="rgb(246 245 245)"> this.va</text><text x="585" y="830"  fill="rgb(246 246 245)">l</text><text x="588" y="830"  fill="rgb(246 246 246)">idateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;objec</text><text x="852" y="830"  fill="rgb(246 245 245)">t</text><text x="855" y="830"  fill="rgb(245 245 245)">&quot;</text><text x="858" y="830"  fill="rgb(246 246 246)">)</text><text x="861" y="830"  fill="rgb(247 255 255)"> </text><text x="864" y="830"  fill="rgb(249 255 255)">{ </text><text x="870" y="830"  fill="rgb(241 252 252)">t</text><text x="873" y="830"  fill="rgb(234 136 138)">h</text><text x="876" y="830"  fill="rgb(219 50 53)">r</text><text x="879" y="830"  fill="rgb(217 14 12)">o</text><text x="882" y="830"  fill="rgb(212 0 0)">w</text><text x="885" y="830"  fill="rgb(217 0 0)"> </text><text x="888" y="830"  fill="rgb(224 0 0)">n</text><text x="891" y="830"  fill="rgb(226 8 0)">e</text><text x="894" y="830"  fill="rgb(227 11 0)">w</text><text x="897" y="830"  fill="rgb(225 11 3)"> </text><text x="900" y="830"  fill="rgb(222 10 4)">I</text><text x="903" y="830"  fill="rgb(220 4 0)">n</text><text x="906" y="830"  fill="rgb(220 0 0)">s</text><text x="909" y="830"  fill="rgb(221 0 0)">i</text><text x="912" y="830"  fill="rgb(218 0 0)">g</text><text x="915" y="830"  fill="rgb(216 32 33)">h</text><text x="918" y="830"  fill="rgb(221 61 58)">t</text><text x="921" y="830"  fill="rgb(231 121 123)">E</text><text x="924" y="830"  fill="rgb(240 246 252)">r</text><text x="927" y="830"  fill="rgb(249 255 255)">r</text><text x="930" y="830"  fill="rgb(248 255 255)">o</text><text x="933" y="830"  fill="rgb(246 247 247)">r</text><text x="936" y="830"  fill="rgb(245 245 245)">(</text><text x="939" y="830"  fill="rgb(246 246 246)">); } if (O</text><text x="969" y="830"  fill="rgb(245 245 245)">b</text><text x="972" y="830"  fill="rgb(249 247 251)">j</text><text x="975" y="830"  fill="rgb(141 203 16)">e</text><text x="978" y="830"  fill="rgb(128 196 28)">c</text><text x="981" y="830"  fill="rgb(135 199 26)">t</text><text x="984" y="830"  fill="rgb(130 200 28)">.</text><text x="987" y="830"  fill="rgb(135 197 34)">k</text><text x="990" y="830"  fill="rgb(133 197 27)">e</text><text x="993" y="830"  fill="rgb(131 197 38)">y</text><text x="996" y="830"  fill="rgb(130 201 28)">s</text><text x="999" y="830"  fill="rgb(120 190 2)">(</text><text x="1002" y="830"  fill="rgb(215 229 210)">v</text><text x="1005" y="830"  fill="rgb(251 249 253)">a</text><text x="1008" y="830"  fill="rgb(245 245 245)">l</text><text x="1011" y="830"  fill="rgb(246 246 246)">ue).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring</text><text x="0" y="835"  fill="rgb(246 246 246)">: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1</text><text x="528" y="835"  fill="rgb(246 245 245)">)</text><text x="531" y="835"  fill="rgb(246 254 254)">.</text><text x="534" y="835"  fill="rgb(244 237 234)">i</text><text x="537" y="835"  fill="rgb(216 0 0)">n</text><text x="540" y="835"  fill="rgb(223 23 15)">c</text><text x="543" y="835"  fill="rgb(221 32 31)">l</text><text x="546" y="835"  fill="rgb(221 12 0)">u</text><text x="549" y="835"  fill="rgb(215 0 0)">d</text><text x="552" y="835"  fill="rgb(234 126 130)">e</text><text x="555" y="835"  fill="rgb(250 255 255)">s</text><text x="558" y="835"  fill="rgb(248 255 255)">(</text><text x="561" y="835"  fill="rgb(246 246 246)">&quot;</text><text x="564" y="835"  fill="rgb(246 245 245)">*</text><text x="567" y="835"  fill="rgb(245 245 245)">&quot;</text><text x="570" y="835"  fill="rgb(246 246 246)">)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new Insig</text><text x="843" y="835"  fill="rgb(245 245 245)">ht</text><text x="849" y="835"  fill="rgb(246 246 246)">E</text><text x="852" y="835"  fill="rgb(246 249 250)">r</text><text x="855" y="835"  fill="rgb(249 255 255)">r</text><text x="858" y="835"  fill="rgb(250 255 255)">o</text><text x="861" y="835"  fill="rgb(245 245 245)">r</text><text x="864" y="835"  fill="rgb(237 175 175)">(</text><text x="867" y="835"  fill="rgb(218 46 36)">)</text><text x="870" y="835"  fill="rgb(214 0 0)">;</text><text x="873" y="835"  fill="rgb(222 0 0)"> </text><text x="876" y="835"  fill="rgb(221 10 0)">}</text><text x="879" y="835"  fill="rgb(223 19 5)"> </text><text x="882" y="835"  fill="rgb(227 31 26)">}</text><text x="885" y="835"  fill="rgb(225 30 27)"> </text><text x="888" y="835"  fill="rgb(224 31 23)">}</text><text x="891" y="835"  fill="rgb(220 32 20)"> </text><text x="894" y="835"  fill="rgb(221 31 18)">}</text><text x="897" y="835"  fill="rgb(221 31 17)"> </text><text x="900" y="835"  fill="rgb(224 29 16)">p</text><text x="903" y="835"  fill="rgb(226 28 26)">r</text><text x="906" y="835"  fill="rgb(218 34 24)">i</text><text x="909" y="835"  fill="rgb(220 34 19)">v</text><text x="912" y="835"  fill="rgb(224 33 19)">a</text><text x="915" y="835"  fill="rgb(226 12 4)">t</text><text x="918" y="835"  fill="rgb(224 8 2)">e</text><text x="921" y="835"  fill="rgb(215 0 0)"> </text><text x="924" y="835"  fill="rgb(219 0 0)">v</text><text x="927" y="835"  fill="rgb(228 93 95)">a</text><text x="930" y="835"  fill="rgb(239 229 228)">l</text><text x="933" y="835"  fill="rgb(249 255 255)">i</text><text x="936" y="835"  fill="rgb(248 255 255)">d</text><text x="939" y="835"  fill="rgb(246 246 246)">a</text><text x="942" y="835"  fill="rgb(245 245 245)">t</text><text x="945" y="835"  fill="rgb(246 246 246)">eGTLTEQ(</text><text x="969" y="835"  fill="rgb(246 245 246)">v</text><text x="972" y="835"  fill="rgb(250 247 248)">a</text><text x="975" y="835"  fill="rgb(115 195 0)">l</text><text x="978" y="835"  fill="rgb(128 200 36)">u</text><text x="981" y="835"  fill="rgb(134 197 26)">e</text><text x="984" y="835"  fill="rgb(131 199 30)">:</text><text x="987" y="835"  fill="rgb(131 198 34)"> </text><text x="990" y="835"  fill="rgb(136 198 25)">a</text><text x="993" y="835"  fill="rgb(131 202 32)">n</text><text x="996" y="835"  fill="rgb(114 191 0)">y</text><text x="999" y="835"  fill="rgb(188 217 153)">)</text><text x="1002" y="835"  fill="rgb(255 251 255)">:</text><text x="1005" y="835"  fill="rgb(246 245 246)"> </text><text x="1008" y="835"  fill="rgb(246 246 246)">void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !=</text><text x="0" y="840"  fill="rgb(246 246 246)">= 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || </text><text x="531" y="840"  fill="rgb(245 245 245)">!</text><text x="534" y="840"  fill="rgb(248 255 255)">t</text><text x="537" y="840"  fill="rgb(232 177 174)">h</text><text x="540" y="840"  fill="rgb(218 0 0)">i</text><text x="543" y="840"  fill="rgb(224 31 19)">s</text><text x="546" y="840"  fill="rgb(223 30 21)">.</text><text x="549" y="840"  fill="rgb(223 28 18)">v</text><text x="552" y="840"  fill="rgb(219 0 0)">a</text><text x="555" y="840"  fill="rgb(216 28 30)">l</text><text x="558" y="840"  fill="rgb(238 202 206)">i</text><text x="561" y="840"  fill="rgb(250 255 255)">d</text><text x="564" y="840"  fill="rgb(248 255 255)">a</text><text x="567" y="840"  fill="rgb(246 247 247)">t</text><text x="570" y="840"  fill="rgb(245 245 245)">e</text><text x="573" y="840"  fill="rgb(246 246 246)">Idstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } </text><text x="837" y="840"  fill="rgb(246 245 245)">p</text><text x="840" y="840"  fill="rgb(245 245 245)">r</text><text x="843" y="840"  fill="rgb(246 248 248)">i</text><text x="846" y="840"  fill="rgb(248 255 255)">v</text><text x="849" y="840"  fill="rgb(250 255 255)">a</text><text x="852" y="840"  fill="rgb(247 255 255)">t</text><text x="855" y="840"  fill="rgb(229 192 192)">e</text><text x="858" y="840"  fill="rgb(221 55 57)"> </text><text x="861" y="840"  fill="rgb(213 1 3)">v</text><text x="864" y="840"  fill="rgb(214 0 0)">a</text><text x="867" y="840"  fill="rgb(223 2 0)">l</text><text x="870" y="840"  fill="rgb(224 28 17)">i</text><text x="873" y="840"  fill="rgb(221 31 22)">d</text><text x="876" y="840"  fill="rgb(222 31 21)">a</text><text x="879" y="840"  fill="rgb(224 29 20)">t</text><text x="882" y="840"  fill="rgb(224 29 21)">e</text><text x="885" y="840"  fill="rgb(220 31 17)">A</text><text x="888" y="840"  fill="rgb(222 28 18)">N</text><text x="891" y="840"  fill="rgb(225 27 20)">D</text><text x="894" y="840"  fill="rgb(227 27 23)">O</text><text x="897" y="840"  fill="rgb(223 28 23)">R</text><text x="900" y="840"  fill="rgb(223 28 24)">(</text><text x="903" y="840"  fill="rgb(222 28 19)">v</text><text x="906" y="840"  fill="rgb(222 29 21)">a</text><text x="909" y="840"  fill="rgb(225 28 21)">l</text><text x="912" y="840"  fill="rgb(226 27 21)">u</text><text x="915" y="840"  fill="rgb(223 30 21)">e</text><text x="918" y="840"  fill="rgb(220 32 23)">:</text><text x="921" y="840"  fill="rgb(229 29 21)"> </text><text x="924" y="840"  fill="rgb(224 28 17)">a</text><text x="927" y="840"  fill="rgb(212 0 0)">n</text><text x="930" y="840"  fill="rgb(230 0 0)">y</text><text x="933" y="840"  fill="rgb(217 91 80)">)</text><text x="936" y="840"  fill="rgb(240 245 241)">:</text><text x="939" y="840"  fill="rgb(248 255 255)"> </text><text x="942" y="840"  fill="rgb(245 245 245)">v</text><text x="945" y="840"  fill="rgb(246 245 245)">o</text><text x="948" y="840"  fill="rgb(246 246 246)">id { i</text><text x="966" y="840"  fill="rgb(246 246 245)">f</text><text x="969" y="840"  fill="rgb(249 248 251)"> </text><text x="972" y="840"  fill="rgb(201 226 158)">(</text><text x="975" y="840"  fill="rgb(120 192 0)">!</text><text x="978" y="840"  fill="rgb(128 201 27)">A</text><text x="981" y="840"  fill="rgb(135 197 35)">r</text><text x="984" y="840"  fill="rgb(130 196 40)">r</text><text x="987" y="840"  fill="rgb(132 200 25)">a</text><text x="990" y="840"  fill="rgb(133 199 37)">y</text><text x="993" y="840"  fill="rgb(120 192 0)">.</text><text x="996" y="840"  fill="rgb(150 200 67)">i</text><text x="999" y="840"  fill="rgb(255 253 255)">s</text><text x="1002" y="840"  fill="rgb(246 245 247)">A</text><text x="1005" y="840"  fill="rgb(245 245 245)">r</text><text x="1008" y="840"  fill="rgb(246 246 246)">ray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string):</text><text x="0" y="845"  fill="rgb(246 246 246)"> boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insigh</text><text x="534" y="845"  fill="rgb(245 245 245)">t</text><text x="537" y="845"  fill="rgb(249 255 255)">D</text><text x="540" y="845"  fill="rgb(229 173 174)">a</text><text x="543" y="845"  fill="rgb(213 0 0)">t</text><text x="546" y="845"  fill="rgb(222 34 19)">a</text><text x="549" y="845"  fill="rgb(233 24 19)">s</text><text x="552" y="845"  fill="rgb(219 32 27)">e</text><text x="555" y="845"  fill="rgb(221 23 6)">t</text><text x="558" y="845"  fill="rgb(215 0 0)">.</text><text x="561" y="845"  fill="rgb(226 75 78)">k</text><text x="564" y="845"  fill="rgb(234 220 220)">i</text><text x="567" y="845"  fill="rgb(250 255 255)">n</text><text x="570" y="845"  fill="rgb(249 255 255)">d</text><text x="573" y="845"  fill="rgb(246 246 246)"> </text><text x="576" y="845"  fill="rgb(245 245 245)">=</text><text x="579" y="845"  fill="rgb(246 246 246)">== InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields =</text><text x="825" y="845"  fill="rgb(246 246 245)"> </text><text x="828" y="845"  fill="rgb(245 245 245)">th</text><text x="834" y="845"  fill="rgb(247 249 250)">i</text><text x="837" y="845"  fill="rgb(247 255 255)">s</text><text x="840" y="845"  fill="rgb(250 255 255)">.</text><text x="843" y="845"  fill="rgb(248 255 255)">c</text><text x="846" y="845"  fill="rgb(238 217 220)">o</text><text x="849" y="845"  fill="rgb(221 85 89)">u</text><text x="852" y="845"  fill="rgb(215 23 22)">r</text><text x="855" y="845"  fill="rgb(224 0 0)">s</text><text x="858" y="845"  fill="rgb(222 13 0)">e</text><text x="861" y="845"  fill="rgb(222 25 15)">s</text><text x="864" y="845"  fill="rgb(231 26 24)">f</text><text x="867" y="845"  fill="rgb(222 31 21)">i</text><text x="870" y="845"  fill="rgb(221 29 19)">e</text><text x="873" y="845"  fill="rgb(222 29 19)">l</text><text x="876" y="845"  fill="rgb(223 28 20)">d</text><text x="879" y="845"  fill="rgb(222 28 20)">s</text><text x="882" y="845"  fill="rgb(222 29 19)">;</text><text x="885" y="845"  fill="rgb(223 28 20)"> </text><text x="888" y="845"  fill="rgb(223 29 20)">}</text><text x="891" y="845"  fill="rgb(221 29 19)"> </text><text x="894" y="845"  fill="rgb(222 29 19)">e</text><text x="897" y="845"  fill="rgb(223 28 18)">l</text><text x="900" y="845"  fill="rgb(222 29 19)">s</text><text x="903" y="845"  fill="rgb(222 29 20)">e</text><text x="906" y="845"  fill="rgb(223 28 18)"> </text><text x="909" y="845"  fill="rgb(222 29 19)">{</text><text x="912" y="845"  fill="rgb(221 29 19)"> t</text><text x="918" y="845"  fill="rgb(223 28 19)">h</text><text x="921" y="845"  fill="rgb(221 29 20)">i</text><text x="924" y="845"  fill="rgb(222 29 20)">s</text><text x="927" y="845"  fill="rgb(224 30 21)">.</text><text x="930" y="845"  fill="rgb(219 28 16)">m</text><text x="933" y="845"  fill="rgb(224 0 0)">f</text><text x="936" y="845"  fill="rgb(218 0 0)">i</text><text x="939" y="845"  fill="rgb(231 178 176)">e</text><text x="942" y="845"  fill="rgb(252 255 255)">l</text><text x="945" y="845"  fill="rgb(246 249 249)">d</text><text x="948" y="845"  fill="rgb(245 245 245)">s</text><text x="951" y="845"  fill="rgb(246 246 246)"> = th</text><text x="966" y="845"  fill="rgb(245 245 245)">i</text><text x="969" y="845"  fill="rgb(255 250 255)">s</text><text x="972" y="845"  fill="rgb(165 207 126)">.</text><text x="975" y="845"  fill="rgb(129 197 0)">r</text><text x="978" y="845"  fill="rgb(134 198 30)">o</text><text x="981" y="845"  fill="rgb(133 198 32)">o</text><text x="984" y="845"  fill="rgb(133 198 34)">m</text><text x="987" y="845"  fill="rgb(132 196 38)">m</text><text x="990" y="845"  fill="rgb(115 201 0)">f</text><text x="993" y="845"  fill="rgb(146 198 49)">i</text><text x="996" y="845"  fill="rgb(254 247 255)">e</text><text x="999" y="845"  fill="rgb(247 246 248)">l</text><text x="1002" y="845"  fill="rgb(245 246 245)">d</text><text x="1005" y="845"  fill="rgb(246 246 246)">s; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQue</text><text x="0" y="850"  fill="rgb(246 246 246)">ry; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;</text><text x="534" y="850"  fill="rgb(246 245 245)">,</text><text x="537" y="850"  fill="rgb(246 247 247)"> </text><text x="540" y="850"  fill="rgb(250 255 255)">&quot;</text><text x="543" y="850"  fill="rgb(223 131 122)">p</text><text x="546" y="850"  fill="rgb(224 0 0)">a</text><text x="549" y="850"  fill="rgb(221 33 21)">s</text><text x="552" y="850"  fill="rgb(225 27 23)">s</text><text x="555" y="850"  fill="rgb(227 27 22)">&quot;</text><text x="558" y="850"  fill="rgb(225 32 19)">,</text><text x="561" y="850"  fill="rgb(212 10 0)"> </text><text x="564" y="850"  fill="rgb(229 0 0)">&quot;</text><text x="567" y="850"  fill="rgb(220 45 42)">f</text><text x="570" y="850"  fill="rgb(236 224 223)">a</text><text x="573" y="850"  fill="rgb(249 255 255)">i</text><text x="576" y="850"  fill="rgb(247 254 254)">l</text><text x="579" y="850"  fill="rgb(246 246 246)">&quot;</text><text x="582" y="850"  fill="rgb(246 245 245)">, </text><text x="588" y="850"  fill="rgb(246 246 246)">&quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, </text><text x="816" y="850"  fill="rgb(246 245 245)">&quot;</text><text x="819" y="850"  fill="rgb(245 245 245)">in</text><text x="825" y="850"  fill="rgb(246 247 247)">s</text><text x="828" y="850"  fill="rgb(248 255 255)">t</text><text x="831" y="850"  fill="rgb(250 255 255)">r</text><text x="834" y="850"  fill="rgb(244 255 255)">u</text><text x="837" y="850"  fill="rgb(239 231 230)">c</text><text x="840" y="850"  fill="rgb(229 141 141)">t</text><text x="843" y="850"  fill="rgb(214 0 0)">o</text><text x="846" y="850"  fill="rgb(218 0 0)">r</text><text x="849" y="850"  fill="rgb(221 2 0)">&quot;</text><text x="852" y="850"  fill="rgb(218 17 4)">,</text><text x="855" y="850"  fill="rgb(219 33 21)"> </text><text x="858" y="850"  fill="rgb(230 24 25)">&quot;</text><text x="861" y="850"  fill="rgb(226 26 24)">t</text><text x="864" y="850"  fill="rgb(216 32 18)">i</text><text x="867" y="850"  fill="rgb(222 29 19)">t</text><text x="870" y="850"  fill="rgb(223 29 20)">l</text><text x="873" y="850"  fill="rgb(223 29 19)">e</text><text x="876" y="850"  fill="rgb(223 28 20)">&quot;</text><text x="879" y="850"  fill="rgb(223 29 20)">, &quot;uui</text><text x="897" y="850"  fill="rgb(222 29 20)">d</text><text x="900" y="850"  fill="rgb(223 29 20)">&quot;]; privat</text><text x="930" y="850"  fill="rgb(225 28 20)">e</text><text x="933" y="850"  fill="rgb(222 32 23)"> </text><text x="936" y="850"  fill="rgb(224 26 12)">r</text><text x="939" y="850"  fill="rgb(220 0 0)">e</text><text x="942" y="850"  fill="rgb(221 112 105)">a</text><text x="945" y="850"  fill="rgb(247 255 255)">d</text><text x="948" y="850"  fill="rgb(246 249 249)">o</text><text x="951" y="850"  fill="rgb(246 245 245)">n</text><text x="954" y="850"  fill="rgb(246 246 246)">ly </text><text x="963" y="850"  fill="rgb(245 246 245)">r</text><text x="966" y="850"  fill="rgb(248 247 250)">o</text><text x="969" y="850"  fill="rgb(220 234 194)">o</text><text x="972" y="850"  fill="rgb(134 196 9)">m</text><text x="975" y="850"  fill="rgb(131 198 28)">m</text><text x="978" y="850"  fill="rgb(133 197 34)">f</text><text x="981" y="850"  fill="rgb(133 197 29)">i</text><text x="984" y="850"  fill="rgb(131 199 23)">e</text><text x="987" y="850"  fill="rgb(128 198 10)">l</text><text x="990" y="850"  fill="rgb(134 195 45)">d</text><text x="993" y="850"  fill="rgb(238 242 241)">s</text><text x="996" y="850"  fill="rgb(249 248 252)">:</text><text x="999" y="850"  fill="rgb(245 245 245)"> </text><text x="1002" y="850"  fill="rgb(246 246 246)">string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonl</text><text x="0" y="855"  fill="rgb(246 246 246)">y mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keys</text><text x="537" y="855"  fill="rgb(245 245 245)">I</text><text x="540" y="855"  fill="rgb(245 247 248)">n</text><text x="543" y="855"  fill="rgb(249 255 255)">Q</text><text x="546" y="855"  fill="rgb(218 107 103)">u</text><text x="549" y="855"  fill="rgb(217 0 0)">e</text><text x="552" y="855"  fill="rgb(221 35 21)">r</text><text x="555" y="855"  fill="rgb(227 27 21)">y</text><text x="558" y="855"  fill="rgb(223 28 24)">:</text><text x="561" y="855"  fill="rgb(219 29 24)"> </text><text x="564" y="855"  fill="rgb(217 32 18)">s</text><text x="567" y="855"  fill="rgb(222 1 0)">t</text><text x="570" y="855"  fill="rgb(219 0 0)">r</text><text x="573" y="855"  fill="rgb(221 58 54)">i</text><text x="576" y="855"  fill="rgb(243 255 255)">n</text><text x="579" y="855"  fill="rgb(250 255 255)">g</text><text x="582" y="855"  fill="rgb(249 255 255)">[</text><text x="585" y="855"  fill="rgb(245 245 245)">];</text><text x="591" y="855"  fill="rgb(246 245 245)"> </text><text x="594" y="855"  fill="rgb(246 246 246)">// all keys appeared in columns after being validated private transforma</text><text x="810" y="855"  fill="rgb(246 245 245)">t</text><text x="813" y="855"  fill="rgb(245 245 245)">i</text><text x="816" y="855"  fill="rgb(245 246 246)">o</text><text x="819" y="855"  fill="rgb(248 255 255)">n</text><text x="822" y="855"  fill="rgb(250 255 255)">K</text><text x="825" y="855"  fill="rgb(249 255 255)">e</text><text x="828" y="855"  fill="rgb(240 255 252)">y</text><text x="831" y="855"  fill="rgb(231 164 159)">:</text><text x="834" y="855"  fill="rgb(214 26 25)"> </text><text x="837" y="855"  fill="rgb(221 0 0)">s</text><text x="840" y="855"  fill="rgb(218 0 0)">t</text><text x="843" y="855"  fill="rgb(225 23 21)">r</text><text x="846" y="855"  fill="rgb(227 29 16)">i</text><text x="849" y="855"  fill="rgb(223 29 29)">n</text><text x="852" y="855"  fill="rgb(223 30 24)">g</text><text x="855" y="855"  fill="rgb(221 29 16)">[</text><text x="858" y="855"  fill="rgb(218 30 21)">]</text><text x="861" y="855"  fill="rgb(223 28 22)">;</text><text x="864" y="855"  fill="rgb(222 29 17)"> </text><text x="867" y="855"  fill="rgb(223 28 19)">/</text><text x="870" y="855"  fill="rgb(222 29 20)">/</text><text x="873" y="855"  fill="rgb(223 29 19)"> </text><text x="876" y="855"  fill="rgb(222 29 19)">k</text><text x="879" y="855"  fill="rgb(223 29 20)">eys appeared in t</text><text x="930" y="855"  fill="rgb(222 28 18)">r</text><text x="933" y="855"  fill="rgb(222 28 19)">a</text><text x="936" y="855"  fill="rgb(221 29 23)">n</text><text x="939" y="855"  fill="rgb(222 30 18)">s</text><text x="942" y="855"  fill="rgb(216 0 0)">f</text><text x="945" y="855"  fill="rgb(226 123 126)">o</text><text x="948" y="855"  fill="rgb(248 255 255)">r</text><text x="951" y="855"  fill="rgb(245 246 246)">m</text><text x="954" y="855"  fill="rgb(246 246 246)">ati</text><text x="963" y="855"  fill="rgb(245 245 245)">o</text><text x="966" y="855"  fill="rgb(250 248 250)">n</text><text x="969" y="855"  fill="rgb(201 224 188)">,</text><text x="972" y="855"  fill="rgb(123 195 0)"> </text><text x="975" y="855"  fill="rgb(130 198 38)">i</text><text x="978" y="855"  fill="rgb(131 198 33)">f</text><text x="981" y="855"  fill="rgb(134 199 25)"> </text><text x="984" y="855"  fill="rgb(128 196 18)">t</text><text x="987" y="855"  fill="rgb(109 187 0)">h</text><text x="990" y="855"  fill="rgb(233 241 220)">e</text><text x="993" y="855"  fill="rgb(254 249 255)">r</text><text x="996" y="855"  fill="rgb(245 245 245)">e</text><text x="999" y="855"  fill="rgb(246 246 245)"> </text><text x="1002" y="855"  fill="rgb(246 246 246)">is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQ</text><text x="0" y="860"  fill="rgb(246 246 246)">uery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw</text><text x="540" y="860"  fill="rgb(246 245 245)"> </text><text x="543" y="860"  fill="rgb(247 249 249)">n</text><text x="546" y="860"  fill="rgb(249 255 255)">e</text><text x="549" y="860"  fill="rgb(218 124 120)">w</text><text x="552" y="860"  fill="rgb(224 0 0)"> </text><text x="555" y="860"  fill="rgb(226 36 16)">I</text><text x="558" y="860"  fill="rgb(221 30 20)">n</text><text x="561" y="860"  fill="rgb(229 26 19)">s</text><text x="564" y="860"  fill="rgb(228 27 18)">i</text><text x="567" y="860"  fill="rgb(221 32 23)">g</text><text x="570" y="860"  fill="rgb(219 28 13)">h</text><text x="573" y="860"  fill="rgb(225 0 0)">t</text><text x="576" y="860"  fill="rgb(227 0 0)">E</text><text x="579" y="860"  fill="rgb(219 77 78)">r</text><text x="582" y="860"  fill="rgb(227 207 206)">r</text><text x="585" y="860"  fill="rgb(253 255 255)">o</text><text x="588" y="860"  fill="rgb(250 255 255)">r</text><text x="591" y="860"  fill="rgb(246 252 252)">(</text><text x="594" y="860"  fill="rgb(246 246 246)">)</text><text x="597" y="860"  fill="rgb(245 245 245)">;</text><text x="600" y="860"  fill="rgb(246 246 246)"> } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !</text><text x="801" y="860"  fill="rgb(245 245 245)">=</text><text x="804" y="860"  fill="rgb(246 247 247)">=</text><text x="807" y="860"  fill="rgb(246 249 249)"> </text><text x="810" y="860"  fill="rgb(248 255 255)">&quot;</text><text x="813" y="860"  fill="rgb(251 255 255)">W</text><text x="816" y="860"  fill="rgb(253 255 255)">H</text><text x="819" y="860"  fill="rgb(239 234 236)">E</text><text x="822" y="860"  fill="rgb(223 160 160)">R</text><text x="825" y="860"  fill="rgb(220 58 57)">E</text><text x="828" y="860"  fill="rgb(214 0 0)">&quot;</text><text x="831" y="860"  fill="rgb(221 0 0)"> </text><text x="834" y="860"  fill="rgb(221 20 9)">&amp;</text><text x="837" y="860"  fill="rgb(221 26 14)">&amp;</text><text x="840" y="860"  fill="rgb(228 29 19)"> </text><text x="843" y="860"  fill="rgb(223 29 16)">k</text><text x="846" y="860"  fill="rgb(219 29 21)">e</text><text x="849" y="860"  fill="rgb(222 29 19)">y</text><text x="852" y="860"  fill="rgb(225 28 17)"> !</text><text x="858" y="860"  fill="rgb(223 28 19)">=</text><text x="861" y="860"  fill="rgb(221 29 19)">=</text><text x="864" y="860"  fill="rgb(224 28 20)"> </text><text x="867" y="860"  fill="rgb(222 29 20)">&quot;</text><text x="870" y="860"  fill="rgb(223 29 20)">TRANSFORMATIONS&quot;) { </text><text x="930" y="860"  fill="rgb(223 29 21)">t</text><text x="933" y="860"  fill="rgb(223 28 19)">h</text><text x="936" y="860"  fill="rgb(217 32 21)">r</text><text x="939" y="860"  fill="rgb(228 25 18)">o</text><text x="942" y="860"  fill="rgb(221 34 26)">w</text><text x="945" y="860"  fill="rgb(214 0 0)"> </text><text x="948" y="860"  fill="rgb(234 181 177)">n</text><text x="951" y="860"  fill="rgb(246 252 252)">e</text><text x="954" y="860"  fill="rgb(246 245 245)">w</text><text x="957" y="860"  fill="rgb(246 246 246)"> I</text><text x="963" y="860"  fill="rgb(246 246 247)">n</text><text x="966" y="860"  fill="rgb(242 243 245)">s</text><text x="969" y="860"  fill="rgb(132 195 16)">i</text><text x="972" y="860"  fill="rgb(123 201 27)">g</text><text x="975" y="860"  fill="rgb(136 196 32)">h</text><text x="978" y="860"  fill="rgb(143 195 32)">t</text><text x="981" y="860"  fill="rgb(122 200 2)">E</text><text x="984" y="860"  fill="rgb(127 192 21)">r</text><text x="987" y="860"  fill="rgb(229 240 226)">r</text><text x="990" y="860"  fill="rgb(253 249 255)">o</text><text x="993" y="860"  fill="rgb(245 245 245)">r</text><text x="996" y="860"  fill="rgb(246 246 246)">(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q</text><text x="0" y="865"  fill="rgb(246 246 246)">: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.v</text><text x="543" y="865"  fill="rgb(245 245 245)">a</text><text x="546" y="865"  fill="rgb(246 249 249)">l</text><text x="549" y="865"  fill="rgb(250 255 255)">i</text><text x="552" y="865"  fill="rgb(227 106 108)">d</text><text x="555" y="865"  fill="rgb(215 0 0)">a</text><text x="558" y="865"  fill="rgb(219 31 21)">t</text><text x="561" y="865"  fill="rgb(232 25 28)">e</text><text x="564" y="865"  fill="rgb(216 31 18)">A</text><text x="567" y="865"  fill="rgb(223 28 23)">P</text><text x="570" y="865"  fill="rgb(234 24 26)">P</text><text x="573" y="865"  fill="rgb(218 34 21)">L</text><text x="576" y="865"  fill="rgb(212 36 17)">Y</text><text x="579" y="865"  fill="rgb(225 3 0)">(</text><text x="582" y="865"  fill="rgb(223 0 0)">q</text><text x="585" y="865"  fill="rgb(212 28 25)">.</text><text x="588" y="865"  fill="rgb(232 164 165)">A</text><text x="591" y="865"  fill="rgb(247 255 255)">P</text><text x="594" y="865"  fill="rgb(249 255 255)">P</text><text x="597" y="865"  fill="rgb(248 255 255)">L</text><text x="600" y="865"  fill="rgb(246 246 246)">Y</text><text x="603" y="865"  fill="rgb(245 245 245)">)</text><text x="606" y="865"  fill="rgb(246 246 246)">;</text><text x="609" y="865"  fill="rgb(246 245 245)"> </text><text x="612" y="865"  fill="rgb(246 246 246)">} private validateGROUP(q: any): void { if (!Array.isArray</text><text x="786" y="865"  fill="rgb(245 245 245)">(</text><text x="789" y="865"  fill="rgb(246 245 245)">q</text><text x="792" y="865"  fill="rgb(245 246 246)">)</text><text x="795" y="865"  fill="rgb(246 246 246)"> </text><text x="798" y="865"  fill="rgb(245 247 247)">|</text><text x="801" y="865"  fill="rgb(251 255 255)">|</text><text x="804" y="865"  fill="rgb(247 255 255)"> </text><text x="807" y="865"  fill="rgb(248 255 255)">q</text><text x="810" y="865"  fill="rgb(237 197 199)">.</text><text x="813" y="865"  fill="rgb(223 134 133)">l</text><text x="816" y="865"  fill="rgb(209 0 0)">e</text><text x="819" y="865"  fill="rgb(223 0 0)">n</text><text x="822" y="865"  fill="rgb(226 0 0)">g</text><text x="825" y="865"  fill="rgb(217 10 0)">t</text><text x="828" y="865"  fill="rgb(222 34 25)">h</text><text x="831" y="865"  fill="rgb(222 33 23)"> </text><text x="834" y="865"  fill="rgb(223 29 18)">&lt;</text><text x="837" y="865"  fill="rgb(222 29 19)"> </text><text x="840" y="865"  fill="rgb(222 28 20)">1</text><text x="843" y="865"  fill="rgb(222 29 20)">)</text><text x="846" y="865"  fill="rgb(223 28 19)"> {</text><text x="852" y="865"  fill="rgb(222 29 20)"> t</text><text x="858" y="865"  fill="rgb(223 29 20)">h</text><text x="861" y="865"  fill="rgb(223 28 20)">r</text><text x="864" y="865"  fill="rgb(222 29 20)">o</text><text x="867" y="865"  fill="rgb(223 29 20)">w new InsightError();</text><text x="930" y="865"  fill="rgb(223 28 19)"> </text><text x="933" y="865"  fill="rgb(223 29 20)">/</text><text x="936" y="865"  fill="rgb(228 26 19)">/</text><text x="939" y="865"  fill="rgb(216 33 18)"> </text><text x="942" y="865"  fill="rgb(233 24 20)">q</text><text x="945" y="865"  fill="rgb(224 10 0)"> </text><text x="948" y="865"  fill="rgb(221 64 66)">s</text><text x="951" y="865"  fill="rgb(248 255 255)">h</text><text x="954" y="865"  fill="rgb(245 245 245)">o</text><text x="957" y="865"  fill="rgb(246 246 246)">u</text><text x="960" y="865"  fill="rgb(245 245 245)">l</text><text x="963" y="865"  fill="rgb(251 248 255)">d</text><text x="966" y="865"  fill="rgb(193 222 138)"> </text><text x="969" y="865"  fill="rgb(121 191 0)">b</text><text x="972" y="865"  fill="rgb(134 197 29)">e</text><text x="975" y="865"  fill="rgb(131 201 37)"> </text><text x="978" y="865"  fill="rgb(121 197 18)">a</text><text x="981" y="865"  fill="rgb(132 193 12)">n</text><text x="984" y="865"  fill="rgb(232 239 224)"> </text><text x="987" y="865"  fill="rgb(254 249 255)">o</text><text x="990" y="865"  fill="rgb(245 245 246)">b</text><text x="993" y="865"  fill="rgb(246 246 246)">ject, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } pr</text><text x="0" y="870"  fill="rgb(246 246 246)">ivate validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey</text><text x="546" y="870"  fill="rgb(245 245 245)">[</text><text x="549" y="870"  fill="rgb(246 249 249)">0</text><text x="552" y="870"  fill="rgb(248 255 255)">]</text><text x="555" y="870"  fill="rgb(225 113 114)">)</text><text x="558" y="870"  fill="rgb(220 0 0)"> </text><text x="561" y="870"  fill="rgb(230 31 21)">&amp;</text><text x="564" y="870"  fill="rgb(226 28 18)">&amp;</text><text x="567" y="870"  fill="rgb(221 31 15)"> </text><text x="570" y="870"  fill="rgb(219 31 19)">(</text><text x="573" y="870"  fill="rgb(227 25 26)">t</text><text x="576" y="870"  fill="rgb(228 25 27)">h</text><text x="579" y="870"  fill="rgb(224 28 25)">i</text><text x="582" y="870"  fill="rgb(227 27 18)">s</text><text x="585" y="870"  fill="rgb(229 8 0)">.</text><text x="588" y="870"  fill="rgb(217 0 0)">m</text><text x="591" y="870"  fill="rgb(214 20 22)">f</text><text x="594" y="870"  fill="rgb(226 152 148)">i</text><text x="597" y="870"  fill="rgb(241 251 252)">e</text><text x="600" y="870"  fill="rgb(252 255 255)">l</text><text x="603" y="870"  fill="rgb(250 255 255)">d</text><text x="606" y="870"  fill="rgb(248 255 255)">s</text><text x="609" y="870"  fill="rgb(246 246 246)">.</text><text x="612" y="870"  fill="rgb(245 245 245)">i</text><text x="615" y="870"  fill="rgb(246 245 245)">n</text><text x="618" y="870"  fill="rgb(246 246 246)">cludes(splittedKey[1]) || this.sfields.includes(split</text><text x="777" y="870"  fill="rgb(246 245 245)">t</text><text x="780" y="870"  fill="rgb(245 245 245)">ed</text><text x="786" y="870"  fill="rgb(247 250 251)">K</text><text x="789" y="870"  fill="rgb(247 255 255)">e</text><text x="792" y="870"  fill="rgb(250 255 255)">y</text><text x="795" y="870"  fill="rgb(251 255 255)">[</text><text x="798" y="870"  fill="rgb(254 255 255)">1</text><text x="801" y="870"  fill="rgb(223 194 192)">]</text><text x="804" y="870"  fill="rgb(229 131 131)">)</text><text x="807" y="870"  fill="rgb(222 33 34)">)</text><text x="810" y="870"  fill="rgb(208 0 0)">)</text><text x="813" y="870"  fill="rgb(218 0 0)">)</text><text x="816" y="870"  fill="rgb(230 17 11)"> </text><text x="819" y="870"  fill="rgb(225 28 18)">{</text><text x="822" y="870"  fill="rgb(221 31 19)"> </text><text x="825" y="870"  fill="rgb(220 31 19)">t</text><text x="828" y="870"  fill="rgb(224 27 20)">h</text><text x="831" y="870"  fill="rgb(225 27 21)">r</text><text x="834" y="870"  fill="rgb(222 28 19)">o</text><text x="837" y="870"  fill="rgb(223 29 20)">w</text><text x="840" y="870"  fill="rgb(222 29 19)"> </text><text x="843" y="870"  fill="rgb(223 29 20)">new Ins</text><text x="864" y="870"  fill="rgb(222 29 20)">i</text><text x="867" y="870"  fill="rgb(223 29 20)">ghtError(); } } priva</text><text x="930" y="870"  fill="rgb(223 29 19)">t</text><text x="933" y="870"  fill="rgb(223 29 21)">e</text><text x="936" y="870"  fill="rgb(225 27 15)"> </text><text x="939" y="870"  fill="rgb(218 30 19)">v</text><text x="942" y="870"  fill="rgb(217 31 17)">a</text><text x="945" y="870"  fill="rgb(228 24 10)">l</text><text x="948" y="870"  fill="rgb(219 7 7)">i</text><text x="951" y="870"  fill="rgb(233 189 187)">d</text><text x="954" y="870"  fill="rgb(246 249 249)">a</text><text x="957" y="870"  fill="rgb(246 246 246)">t</text><text x="960" y="870"  fill="rgb(246 245 245)">e</text><text x="963" y="870"  fill="rgb(255 254 255)">A</text><text x="966" y="870"  fill="rgb(121 189 0)">P</text><text x="969" y="870"  fill="rgb(128 198 26)">P</text><text x="972" y="870"  fill="rgb(140 195 40)">L</text><text x="975" y="870"  fill="rgb(119 195 0)">Y</text><text x="978" y="870"  fill="rgb(115 192 0)">(</text><text x="981" y="870"  fill="rgb(234 241 228)">q</text><text x="984" y="870"  fill="rgb(255 250 255)">:</text><text x="987" y="870"  fill="rgb(245 245 245)"> </text><text x="990" y="870"  fill="rgb(245 246 245)">a</text><text x="993" y="870"  fill="rgb(246 246 246)">ny): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule</text><text x="0" y="875"  fill="rgb(246 246 246)">) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 |</text><text x="549" y="875"  fill="rgb(246 245 245)">|</text><text x="552" y="875"  fill="rgb(246 249 249)"> </text><text x="555" y="875"  fill="rgb(251 255 255)">a</text><text x="558" y="875"  fill="rgb(228 184 186)">p</text><text x="561" y="875"  fill="rgb(214 0 0)">p</text><text x="564" y="875"  fill="rgb(220 23 7)">l</text><text x="567" y="875"  fill="rgb(230 28 25)">y</text><text x="570" y="875"  fill="rgb(213 34 13)">k</text><text x="573" y="875"  fill="rgb(227 28 16)">e</text><text x="576" y="875"  fill="rgb(226 27 20)">y</text><text x="579" y="875"  fill="rgb(216 33 18)">.</text><text x="582" y="875"  fill="rgb(227 28 18)">i</text><text x="585" y="875"  fill="rgb(223 29 23)">n</text><text x="588" y="875"  fill="rgb(215 36 24)">c</text><text x="591" y="875"  fill="rgb(223 23 5)">l</text><text x="594" y="875"  fill="rgb(227 0 0)">u</text><text x="597" y="875"  fill="rgb(214 0 0)">d</text><text x="600" y="875"  fill="rgb(212 17 17)">e</text><text x="603" y="875"  fill="rgb(229 158 158)">s</text><text x="606" y="875"  fill="rgb(240 241 241)">(</text><text x="609" y="875"  fill="rgb(249 255 255)">&quot;_</text><text x="615" y="875"  fill="rgb(247 255 255)">&quot;</text><text x="618" y="875"  fill="rgb(246 249 249)">)</text><text x="621" y="875"  fill="rgb(246 247 247)"> </text><text x="624" y="875"  fill="rgb(245 245 245)">||</text><text x="630" y="875"  fill="rgb(246 246 246)"> this.transformationKey.includes(applykey)) </text><text x="762" y="875"  fill="rgb(245 245 245)">{ </text><text x="768" y="875"  fill="rgb(246 246 246)">t</text><text x="771" y="875"  fill="rgb(246 247 247)">h</text><text x="774" y="875"  fill="rgb(247 251 252)">r</text><text x="777" y="875"  fill="rgb(248 255 255)">o</text><text x="780" y="875"  fill="rgb(251 255 255)">w</text><text x="783" y="875"  fill="rgb(250 255 255)"> </text><text x="786" y="875"  fill="rgb(242 255 255)">n</text><text x="789" y="875"  fill="rgb(242 243 243)">e</text><text x="792" y="875"  fill="rgb(229 115 120)">w</text><text x="795" y="875"  fill="rgb(218 65 68)"> </text><text x="798" y="875"  fill="rgb(208 0 0)">I</text><text x="801" y="875"  fill="rgb(222 0 0)">ns</text><text x="807" y="875"  fill="rgb(225 19 9)">i</text><text x="810" y="875"  fill="rgb(231 28 26)">g</text><text x="813" y="875"  fill="rgb(228 28 22)">h</text><text x="816" y="875"  fill="rgb(219 31 20)">t</text><text x="819" y="875"  fill="rgb(221 29 21)">E</text><text x="822" y="875"  fill="rgb(224 27 21)">r</text><text x="825" y="875"  fill="rgb(228 26 18)">r</text><text x="828" y="875"  fill="rgb(221 30 19)">o</text><text x="831" y="875"  fill="rgb(220 29 19)">r</text><text x="834" y="875"  fill="rgb(223 29 19)">(</text><text x="837" y="875"  fill="rgb(222 29 20)">)</text><text x="840" y="875"  fill="rgb(223 29 18)">;</text><text x="843" y="875"  fill="rgb(223 29 20)"> } this.transformationKey.push</text><text x="933" y="875"  fill="rgb(222 29 19)">(</text><text x="936" y="875"  fill="rgb(223 29 19)">a</text><text x="939" y="875"  fill="rgb(223 28 22)">p</text><text x="942" y="875"  fill="rgb(231 24 20)">p</text><text x="945" y="875"  fill="rgb(218 31 23)">l</text><text x="948" y="875"  fill="rgb(217 0 0)">y</text><text x="951" y="875"  fill="rgb(235 159 156)">k</text><text x="954" y="875"  fill="rgb(247 251 251)">e</text><text x="957" y="875"  fill="rgb(245 245 245)">y</text><text x="960" y="875"  fill="rgb(255 252 255)">)</text><text x="963" y="875"  fill="rgb(183 212 142)">;</text><text x="966" y="875"  fill="rgb(119 197 0)"> </text><text x="969" y="875"  fill="rgb(131 200 35)">i</text><text x="972" y="875"  fill="rgb(112 194 0)">f</text><text x="975" y="875"  fill="rgb(159 202 103)"> </text><text x="978" y="875"  fill="rgb(255 249 255)">(</text><text x="981" y="875"  fill="rgb(254 249 255)">A</text><text x="984" y="875"  fill="rgb(245 245 244)">r</text><text x="987" y="875"  fill="rgb(246 246 246)">ray.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !t</text><text x="0" y="880"  fill="rgb(246 246 246)">his.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken</text><text x="552" y="880"  fill="rgb(246 245 245)">.</text><text x="555" y="880"  fill="rgb(246 247 247)">i</text><text x="558" y="880"  fill="rgb(250 255 255)">n</text><text x="561" y="880"  fill="rgb(238 214 214)">c</text><text x="564" y="880"  fill="rgb(222 0 0)">l</text><text x="567" y="880"  fill="rgb(220 8 0)">u</text><text x="570" y="880"  fill="rgb(225 32 28)">d</text><text x="573" y="880"  fill="rgb(225 26 26)">e</text><text x="576" y="880"  fill="rgb(215 33 18)">s</text><text x="579" y="880"  fill="rgb(224 27 17)">(</text><text x="582" y="880"  fill="rgb(224 27 21)">a</text><text x="585" y="880"  fill="rgb(223 28 20)">p</text><text x="588" y="880"  fill="rgb(223 28 18)">p</text><text x="591" y="880"  fill="rgb(223 28 20)">l</text><text x="594" y="880"  fill="rgb(222 32 22)">y</text><text x="597" y="880"  fill="rgb(222 33 22)">t</text><text x="600" y="880"  fill="rgb(226 15 11)">o</text><text x="603" y="880"  fill="rgb(222 0 0)">k</text><text x="606" y="880"  fill="rgb(213 0 0)">e</text><text x="609" y="880"  fill="rgb(227 69 64)">n</text><text x="612" y="880"  fill="rgb(233 149 148)">)</text><text x="615" y="880"  fill="rgb(242 212 216)">)</text><text x="618" y="880"  fill="rgb(248 255 255)"> </text><text x="621" y="880"  fill="rgb(249 255 255)">{</text><text x="624" y="880"  fill="rgb(248 255 255)"> i</text><text x="630" y="880"  fill="rgb(245 246 246)">f</text><text x="633" y="880"  fill="rgb(246 246 246)"> </text><text x="636" y="880"  fill="rgb(246 245 245)">(!</text><text x="642" y="880"  fill="rgb(245 245 245)">(t</text><text x="648" y="880"  fill="rgb(246 245 245)">h</text><text x="651" y="880"  fill="rgb(246 246 246)">is.validateIdstring(key[0]) &amp;</text><text x="738" y="880"  fill="rgb(246 245 245)">&amp;</text><text x="741" y="880"  fill="rgb(245 245 245)"> t</text><text x="747" y="880"  fill="rgb(246 245 245)">his</text><text x="756" y="880"  fill="rgb(246 246 246)">.</text><text x="759" y="880"  fill="rgb(245 246 246)">m</text><text x="762" y="880"  fill="rgb(248 253 253)">f</text><text x="765" y="880"  fill="rgb(249 255 255)">i</text><text x="768" y="880"  fill="rgb(248 255 255)">e</text><text x="771" y="880"  fill="rgb(249 255 255)">l</text><text x="774" y="880"  fill="rgb(244 255 255)">d</text><text x="777" y="880"  fill="rgb(239 212 213)">s</text><text x="780" y="880"  fill="rgb(223 158 157)">.</text><text x="783" y="880"  fill="rgb(228 79 82)">i</text><text x="786" y="880"  fill="rgb(224 23 11)">n</text><text x="789" y="880"  fill="rgb(216 0 0)">c</text><text x="792" y="880"  fill="rgb(219 0 0)">l</text><text x="795" y="880"  fill="rgb(222 8 0)">u</text><text x="798" y="880"  fill="rgb(224 32 21)">d</text><text x="801" y="880"  fill="rgb(223 32 23)">e</text><text x="804" y="880"  fill="rgb(222 30 22)">s</text><text x="807" y="880"  fill="rgb(221 29 19)">(</text><text x="810" y="880"  fill="rgb(222 29 19)">k</text><text x="813" y="880"  fill="rgb(222 29 20)">e</text><text x="816" y="880"  fill="rgb(223 28 19)">y</text><text x="819" y="880"  fill="rgb(223 29 19)">[</text><text x="822" y="880"  fill="rgb(222 29 19)">1</text><text x="825" y="880"  fill="rgb(221 29 20)">]</text><text x="828" y="880"  fill="rgb(223 28 20)">)</text><text x="831" y="880"  fill="rgb(223 28 19)">)</text><text x="834" y="880"  fill="rgb(223 29 19)">)</text><text x="837" y="880"  fill="rgb(223 29 20)"> { throw new InsightError(); } </text><text x="930" y="880"  fill="rgb(222 29 19)">}</text><text x="933" y="880"  fill="rgb(222 29 20)"> </text><text x="936" y="880"  fill="rgb(223 28 20)">e</text><text x="939" y="880"  fill="rgb(223 28 18)">l</text><text x="942" y="880"  fill="rgb(227 26 22)">s</text><text x="945" y="880"  fill="rgb(221 30 13)">e</text><text x="948" y="880"  fill="rgb(221 0 0)"> </text><text x="951" y="880"  fill="rgb(234 163 161)">i</text><text x="954" y="880"  fill="rgb(246 251 250)">f</text><text x="957" y="880"  fill="rgb(249 247 250)"> </text><text x="960" y="880"  fill="rgb(230 236 225)">(</text><text x="963" y="880"  fill="rgb(138 195 51)">t</text><text x="966" y="880"  fill="rgb(126 202 10)">h</text><text x="969" y="880"  fill="rgb(118 191 0)">i</text><text x="972" y="880"  fill="rgb(168 208 96)">s</text><text x="975" y="880"  fill="rgb(255 251 255)">.</text><text x="978" y="880"  fill="rgb(248 247 251)">m</text><text x="981" y="880"  fill="rgb(245 245 245)">s</text><text x="984" y="880"  fill="rgb(246 246 246)">token.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public valid</text><text x="0" y="885"  fill="rgb(246 246 246)">ateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COL</text><text x="555" y="885"  fill="rgb(245 245 245)">U</text><text x="558" y="885"  fill="rgb(245 246 246)">M</text><text x="561" y="885"  fill="rgb(247 255 255)">N</text><text x="564" y="885"  fill="rgb(239 227 228)">S</text><text x="567" y="885"  fill="rgb(214 31 35)">)</text><text x="570" y="885"  fill="rgb(224 0 0)">;</text><text x="573" y="885"  fill="rgb(225 34 20)"> </text><text x="576" y="885"  fill="rgb(221 31 16)">i</text><text x="579" y="885"  fill="rgb(216 32 21)">f</text><text x="582" y="885"  fill="rgb(229 25 21)"> </text><text x="585" y="885"  fill="rgb(222 29 19)">(</text><text x="588" y="885"  fill="rgb(222 29 20)">q</text><text x="591" y="885"  fill="rgb(222 29 18)">.</text><text x="594" y="885"  fill="rgb(222 29 19)">OR</text><text x="600" y="885"  fill="rgb(224 28 17)">D</text><text x="603" y="885"  fill="rgb(226 29 18)">E</text><text x="606" y="885"  fill="rgb(221 30 17)">R</text><text x="609" y="885"  fill="rgb(220 4 0)">)</text><text x="612" y="885"  fill="rgb(220 0 0)"> </text><text x="615" y="885"  fill="rgb(210 0 0)">{</text><text x="618" y="885"  fill="rgb(218 38 38)"> </text><text x="621" y="885"  fill="rgb(220 130 121)">t</text><text x="624" y="885"  fill="rgb(236 205 203)">h</text><text x="627" y="885"  fill="rgb(237 247 247)">i</text><text x="630" y="885"  fill="rgb(253 255 255)">s</text><text x="633" y="885"  fill="rgb(250 255 255)">.</text><text x="636" y="885"  fill="rgb(248 255 255)">va</text><text x="642" y="885"  fill="rgb(247 252 252)">l</text><text x="645" y="885"  fill="rgb(247 250 250)">i</text><text x="648" y="885"  fill="rgb(246 247 247)">d</text><text x="651" y="885"  fill="rgb(245 245 245)">ate</text><text x="660" y="885"  fill="rgb(246 246 246)">Order(q.ORDER); } } pr</text><text x="726" y="885"  fill="rgb(246 245 245)">i</text><text x="729" y="885"  fill="rgb(245 245 245)">vat</text><text x="738" y="885"  fill="rgb(246 247 247)">e</text><text x="741" y="885"  fill="rgb(247 250 250)"> </text><text x="744" y="885"  fill="rgb(246 251 251)">v</text><text x="747" y="885"  fill="rgb(248 255 255)">a</text><text x="750" y="885"  fill="rgb(249 255 255)">l</text><text x="753" y="885"  fill="rgb(248 255 255)">i</text><text x="756" y="885"  fill="rgb(251 255 255)">d</text><text x="759" y="885"  fill="rgb(252 255 255)">a</text><text x="762" y="885"  fill="rgb(240 255 255)">t</text><text x="765" y="885"  fill="rgb(233 216 216)">e</text><text x="768" y="885"  fill="rgb(228 159 162)">C</text><text x="771" y="885"  fill="rgb(221 47 50)">o</text><text x="774" y="885"  fill="rgb(221 20 19)">l</text><text x="777" y="885"  fill="rgb(218 0 0)">u</text><text x="780" y="885"  fill="rgb(224 0 0)">m</text><text x="783" y="885"  fill="rgb(221 0 0)">n</text><text x="786" y="885"  fill="rgb(223 19 8)">s</text><text x="789" y="885"  fill="rgb(227 27 18)">(</text><text x="792" y="885"  fill="rgb(228 28 31)">q</text><text x="795" y="885"  fill="rgb(225 28 24)">:</text><text x="798" y="885"  fill="rgb(222 30 19)"> </text><text x="801" y="885"  fill="rgb(222 29 18)">a</text><text x="804" y="885"  fill="rgb(222 29 20)">n</text><text x="807" y="885"  fill="rgb(223 28 20)">y</text><text x="810" y="885"  fill="rgb(222 29 19)">):</text><text x="816" y="885"  fill="rgb(223 28 20)"> v</text><text x="822" y="885"  fill="rgb(223 29 20)">o</text><text x="825" y="885"  fill="rgb(223 28 20)">id</text><text x="831" y="885"  fill="rgb(223 29 20)"> { if (!q || q.length &lt; 1) { thro</text><text x="930" y="885"  fill="rgb(223 29 21)">w</text><text x="933" y="885"  fill="rgb(223 29 19)"> </text><text x="936" y="885"  fill="rgb(221 30 21)">n</text><text x="939" y="885"  fill="rgb(220 31 20)">e</text><text x="942" y="885"  fill="rgb(223 27 19)">w</text><text x="945" y="885"  fill="rgb(225 28 17)"> </text><text x="948" y="885"  fill="rgb(225 0 0)">I</text><text x="951" y="885"  fill="rgb(230 163 161)">n</text><text x="954" y="885"  fill="rgb(247 251 251)">s</text><text x="957" y="885"  fill="rgb(250 248 254)">i</text><text x="960" y="885"  fill="rgb(165 211 88)">g</text><text x="963" y="885"  fill="rgb(114 194 0)">h</text><text x="966" y="885"  fill="rgb(115 187 0)">t</text><text x="969" y="885"  fill="rgb(190 219 150)">E</text><text x="972" y="885"  fill="rgb(255 254 255)">r</text><text x="975" y="885"  fill="rgb(248 247 250)">r</text><text x="978" y="885"  fill="rgb(245 245 245)">o</text><text x="981" y="885"  fill="rgb(246 246 246)">r(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } thi</text><text x="0" y="890"  fill="rgb(246 246 246)">s.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(</text><text x="558" y="890"  fill="rgb(246 245 245)">q</text><text x="561" y="890"  fill="rgb(246 246 246)">)</text><text x="564" y="890"  fill="rgb(248 255 255)">)</text><text x="567" y="890"  fill="rgb(253 255 255)"> </text><text x="570" y="890"  fill="rgb(219 68 66)">{</text><text x="573" y="890"  fill="rgb(217 0 0)"> </text><text x="576" y="890"  fill="rgb(232 14 14)">t</text><text x="579" y="890"  fill="rgb(224 30 23)">h</text><text x="582" y="890"  fill="rgb(219 32 13)">r</text><text x="585" y="890"  fill="rgb(224 28 22)">o</text><text x="588" y="890"  fill="rgb(221 29 19)">w</text><text x="591" y="890"  fill="rgb(222 28 20)"> </text><text x="594" y="890"  fill="rgb(223 28 22)">n</text><text x="597" y="890"  fill="rgb(222 29 18)">e</text><text x="600" y="890"  fill="rgb(221 30 19)">w</text><text x="603" y="890"  fill="rgb(223 30 22)"> </text><text x="606" y="890"  fill="rgb(227 28 21)">I</text><text x="609" y="890"  fill="rgb(226 30 20)">n</text><text x="612" y="890"  fill="rgb(225 30 23)">s</text><text x="615" y="890"  fill="rgb(225 31 29)">i</text><text x="618" y="890"  fill="rgb(225 15 14)">g</text><text x="621" y="890"  fill="rgb(227 0 0)">h</text><text x="624" y="890"  fill="rgb(218 0 0)">tE</text><text x="630" y="890"  fill="rgb(217 0 0)">r</text><text x="633" y="890"  fill="rgb(220 76 80)">r</text><text x="636" y="890"  fill="rgb(234 131 134)">o</text><text x="639" y="890"  fill="rgb(233 199 196)">r</text><text x="642" y="890"  fill="rgb(244 255 255)">(</text><text x="645" y="890"  fill="rgb(245 255 255)">)</text><text x="648" y="890"  fill="rgb(248 255 255)">;</text><text x="651" y="890"  fill="rgb(250 255 255)"> } </text><text x="660" y="890"  fill="rgb(246 255 255)">} </text><text x="666" y="890"  fill="rgb(247 255 255)">e</text><text x="669" y="890"  fill="rgb(247 252 252)">l</text><text x="672" y="890"  fill="rgb(246 248 248)">s</text><text x="675" y="890"  fill="rgb(246 247 247)">e</text><text x="678" y="890"  fill="rgb(246 246 247)"> </text><text x="681" y="890"  fill="rgb(246 246 246)">{ if (!q.</text><text x="708" y="890"  fill="rgb(246 247 247)">d</text><text x="711" y="890"  fill="rgb(246 248 248)">i</text><text x="714" y="890"  fill="rgb(247 250 251)">r</text><text x="717" y="890"  fill="rgb(247 254 254)"> </text><text x="720" y="890"  fill="rgb(246 255 255)">||</text><text x="726" y="890"  fill="rgb(247 255 255)"> </text><text x="729" y="890"  fill="rgb(251 255 255)">!</text><text x="732" y="890"  fill="rgb(250 255 255)">q</text><text x="735" y="890"  fill="rgb(251 255 255)">.</text><text x="738" y="890"  fill="rgb(248 255 255)">k</text><text x="741" y="890"  fill="rgb(246 255 255)">e</text><text x="744" y="890"  fill="rgb(247 255 255)">y</text><text x="747" y="890"  fill="rgb(234 230 230)">s</text><text x="750" y="890"  fill="rgb(232 131 133)"> </text><text x="753" y="890"  fill="rgb(233 120 122)">|</text><text x="756" y="890"  fill="rgb(215 54 55)">|</text><text x="759" y="890"  fill="rgb(215 0 0)"> </text><text x="762" y="890"  fill="rgb(218 0 0)">Ob</text><text x="768" y="890"  fill="rgb(224 0 0)">j</text><text x="771" y="890"  fill="rgb(222 16 0)">e</text><text x="774" y="890"  fill="rgb(223 20 15)">c</text><text x="777" y="890"  fill="rgb(223 32 28)">t</text><text x="780" y="890"  fill="rgb(219 33 20)">.</text><text x="783" y="890"  fill="rgb(221 32 21)">k</text><text x="786" y="890"  fill="rgb(224 28 21)">e</text><text x="789" y="890"  fill="rgb(223 28 18)">y</text><text x="792" y="890"  fill="rgb(219 32 11)">s</text><text x="795" y="890"  fill="rgb(221 30 17)">(</text><text x="798" y="890"  fill="rgb(224 28 20)">q</text><text x="801" y="890"  fill="rgb(222 29 20)">)</text><text x="804" y="890"  fill="rgb(223 29 19)">.</text><text x="807" y="890"  fill="rgb(223 29 20)">length !== 2) { throw new InsightEr</text><text x="912" y="890"  fill="rgb(223 29 19)">r</text><text x="915" y="890"  fill="rgb(223 29 20)">or();</text><text x="930" y="890"  fill="rgb(222 29 19)"> </text><text x="933" y="890"  fill="rgb(223 29 18)">}</text><text x="936" y="890"  fill="rgb(226 26 26)"> </text><text x="939" y="890"  fill="rgb(225 27 20)">i</text><text x="942" y="890"  fill="rgb(221 30 19)">f</text><text x="945" y="890"  fill="rgb(222 26 18)"> </text><text x="948" y="890"  fill="rgb(218 23 12)">(</text><text x="951" y="890"  fill="rgb(234 206 208)">q</text><text x="954" y="890"  fill="rgb(255 252 255)">.</text><text x="957" y="890"  fill="rgb(210 229 177)">d</text><text x="960" y="890"  fill="rgb(93 180 0)">i</text><text x="963" y="890"  fill="rgb(134 193 38)">r</text><text x="966" y="890"  fill="rgb(241 240 243)"> </text><text x="969" y="890"  fill="rgb(255 253 255)">!</text><text x="972" y="890"  fill="rgb(246 246 247)">=</text><text x="975" y="890"  fill="rgb(245 245 245)">=</text><text x="978" y="890"  fill="rgb(246 246 246)"> &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if </text><text x="0" y="895"  fill="rgb(246 246 246)">(!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).</text><text x="564" y="895"  fill="rgb(246 245 245)">l</text><text x="567" y="895"  fill="rgb(245 247 247)">e</text><text x="570" y="895"  fill="rgb(249 255 255)">n</text><text x="573" y="895"  fill="rgb(228 174 170)">g</text><text x="576" y="895"  fill="rgb(212 0 0)">t</text><text x="579" y="895"  fill="rgb(225 0 0)">h</text><text x="582" y="895"  fill="rgb(223 30 23)"> </text><text x="585" y="895"  fill="rgb(223 29 16)">!</text><text x="588" y="895"  fill="rgb(225 26 19)">=</text><text x="591" y="895"  fill="rgb(218 31 19)">=</text><text x="594" y="895"  fill="rgb(222 29 17)"> </text><text x="597" y="895"  fill="rgb(223 28 23)">0</text><text x="600" y="895"  fill="rgb(224 27 23)">)</text><text x="603" y="895"  fill="rgb(224 27 21)"> </text><text x="606" y="895"  fill="rgb(223 28 18)">{</text><text x="609" y="895"  fill="rgb(221 30 18)"> </text><text x="612" y="895"  fill="rgb(217 32 18)">t</text><text x="615" y="895"  fill="rgb(222 28 18)">h</text><text x="618" y="895"  fill="rgb(224 28 16)">i</text><text x="621" y="895"  fill="rgb(222 32 19)">s</text><text x="624" y="895"  fill="rgb(222 34 24)">.</text><text x="627" y="895"  fill="rgb(222 30 27)">v</text><text x="630" y="895"  fill="rgb(223 18 11)">a</text><text x="633" y="895"  fill="rgb(221 5 0)">l</text><text x="636" y="895"  fill="rgb(221 0 0)">i</text><text x="639" y="895"  fill="rgb(223 0 0)">d</text><text x="642" y="895"  fill="rgb(220 0 0)">a</text><text x="645" y="895"  fill="rgb(213 0 0)">t</text><text x="648" y="895"  fill="rgb(219 89 89)">e</text><text x="651" y="895"  fill="rgb(227 123 122)">F</text><text x="654" y="895"  fill="rgb(226 134 134)">i</text><text x="657" y="895"  fill="rgb(227 177 176)">l</text><text x="660" y="895"  fill="rgb(245 222 224)">t</text><text x="663" y="895"  fill="rgb(245 225 228)">e</text><text x="666" y="895"  fill="rgb(245 240 241)">r</text><text x="669" y="895"  fill="rgb(244 255 255)">(</text><text x="672" y="895"  fill="rgb(247 255 255)">q</text><text x="675" y="895"  fill="rgb(248 255 255)">)</text><text x="678" y="895"  fill="rgb(249 255 255)">;</text><text x="681" y="895"  fill="rgb(248 255 255)"> }</text><text x="687" y="895"  fill="rgb(247 255 255)"> </text><text x="690" y="895"  fill="rgb(248 255 255)">}</text><text x="693" y="895"  fill="rgb(249 255 255)"> } </text><text x="702" y="895"  fill="rgb(248 255 255)">priv</text><text x="714" y="895"  fill="rgb(244 255 255)">a</text><text x="717" y="895"  fill="rgb(244 249 248)">t</text><text x="720" y="895"  fill="rgb(246 233 233)">e</text><text x="723" y="895"  fill="rgb(246 223 225)"> </text><text x="726" y="895"  fill="rgb(241 216 216)">v</text><text x="729" y="895"  fill="rgb(225 167 165)">a</text><text x="732" y="895"  fill="rgb(227 133 131)">l</text><text x="735" y="895"  fill="rgb(228 122 121)">i</text><text x="738" y="895"  fill="rgb(223 90 91)">d</text><text x="741" y="895"  fill="rgb(218 10 5)">a</text><text x="744" y="895"  fill="rgb(221 0 0)">t</text><text x="747" y="895"  fill="rgb(218 0 0)">eF</text><text x="753" y="895"  fill="rgb(221 0 0)">i</text><text x="756" y="895"  fill="rgb(223 8 0)">l</text><text x="759" y="895"  fill="rgb(223 21 9)">t</text><text x="762" y="895"  fill="rgb(222 28 16)">e</text><text x="765" y="895"  fill="rgb(226 31 25)">r</text><text x="768" y="895"  fill="rgb(222 33 26)">(</text><text x="771" y="895"  fill="rgb(221 28 24)">q</text><text x="774" y="895"  fill="rgb(222 29 19)">:</text><text x="777" y="895"  fill="rgb(223 28 16)"> </text><text x="780" y="895"  fill="rgb(224 28 21)">a</text><text x="783" y="895"  fill="rgb(222 28 21)">ny</text><text x="789" y="895"  fill="rgb(221 29 21)">)</text><text x="792" y="895"  fill="rgb(223 27 22)">:</text><text x="795" y="895"  fill="rgb(224 27 19)"> </text><text x="798" y="895"  fill="rgb(221 29 20)">v</text><text x="801" y="895"  fill="rgb(222 29 20)">o</text><text x="804" y="895"  fill="rgb(223 29 20)">id { if (Object.keys(q).length !== 1</text><text x="912" y="895"  fill="rgb(222 29 20)">)</text><text x="915" y="895"  fill="rgb(223 29 20)"> </text><text x="918" y="895"  fill="rgb(223 29 19)">{</text><text x="921" y="895"  fill="rgb(222 29 20)"> t</text><text x="927" y="895"  fill="rgb(223 29 19)">h</text><text x="930" y="895"  fill="rgb(222 29 20)">r</text><text x="933" y="895"  fill="rgb(223 29 20)">o</text><text x="936" y="895"  fill="rgb(226 27 19)">w</text><text x="939" y="895"  fill="rgb(227 27 19)"> </text><text x="942" y="895"  fill="rgb(220 29 23)">n</text><text x="945" y="895"  fill="rgb(218 8 0)">e</text><text x="948" y="895"  fill="rgb(225 72 71)">w</text><text x="951" y="895"  fill="rgb(255 255 255)"> </text><text x="954" y="895"  fill="rgb(224 244 215)">I</text><text x="957" y="895"  fill="rgb(111 184 0)">n</text><text x="960" y="895"  fill="rgb(179 211 134)">s</text><text x="963" y="895"  fill="rgb(253 250 255)">i</text><text x="966" y="895"  fill="rgb(253 249 255)">g</text><text x="969" y="895"  fill="rgb(245 245 245)">h</text><text x="972" y="895"  fill="rgb(246 246 245)">t</text><text x="975" y="895"  fill="rgb(246 246 246)">Error(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.valid</text><text x="0" y="900"  fill="rgb(246 246 246)">ateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validate</text><text x="567" y="900"  fill="rgb(245 245 245)">N</text><text x="570" y="900"  fill="rgb(246 248 248)">O</text><text x="573" y="900"  fill="rgb(250 255 255)">T</text><text x="576" y="900"  fill="rgb(242 254 254)">(</text><text x="579" y="900"  fill="rgb(223 78 79)">v</text><text x="582" y="900"  fill="rgb(221 0 0)">a</text><text x="585" y="900"  fill="rgb(219 19 7)">l</text><text x="588" y="900"  fill="rgb(220 32 27)">u</text><text x="591" y="900"  fill="rgb(231 24 25)">e</text><text x="594" y="900"  fill="rgb(221 28 19)">:</text><text x="597" y="900"  fill="rgb(226 27 17)"> </text><text x="600" y="900"  fill="rgb(222 29 18)">a</text><text x="603" y="900"  fill="rgb(222 29 19)">ny</text><text x="609" y="900"  fill="rgb(224 28 20)">)</text><text x="612" y="900"  fill="rgb(223 28 20)">:</text><text x="615" y="900"  fill="rgb(223 29 20)"> </text><text x="618" y="900"  fill="rgb(222 29 20)">vo</text><text x="624" y="900"  fill="rgb(223 28 19)">i</text><text x="627" y="900"  fill="rgb(223 29 18)">d</text><text x="630" y="900"  fill="rgb(223 30 20)"> </text><text x="633" y="900"  fill="rgb(222 30 21)">{</text><text x="636" y="900"  fill="rgb(221 30 21)"> </text><text x="639" y="900"  fill="rgb(222 30 19)">i</text><text x="642" y="900"  fill="rgb(223 26 16)">f</text><text x="645" y="900"  fill="rgb(223 24 13)"> </text><text x="648" y="900"  fill="rgb(222 0 0)">(</text><text x="651" y="900"  fill="rgb(217 0 0)">t</text><text x="654" y="900"  fill="rgb(219 0 0)">y</text><text x="657" y="900"  fill="rgb(221 0 0)">pe</text><text x="663" y="900"  fill="rgb(218 0 0)">o</text><text x="666" y="900"  fill="rgb(213 0 0)">f</text><text x="669" y="900"  fill="rgb(206 6 2)"> </text><text x="672" y="900"  fill="rgb(216 40 40)">v</text><text x="675" y="900"  fill="rgb(224 53 55)">a</text><text x="678" y="900"  fill="rgb(224 56 57)">l</text><text x="681" y="900"  fill="rgb(226 56 58)">u</text><text x="684" y="900"  fill="rgb(230 56 57)">e</text><text x="687" y="900"  fill="rgb(238 56 58)"> </text><text x="690" y="900"  fill="rgb(230 57 58)">!</text><text x="693" y="900"  fill="rgb(228 57 58)">=</text><text x="696" y="900"  fill="rgb(227 57 58)">=</text><text x="699" y="900"  fill="rgb(226 57 59)"> </text><text x="702" y="900"  fill="rgb(226 56 58)">&quot;o</text><text x="708" y="900"  fill="rgb(230 55 57)">b</text><text x="711" y="900"  fill="rgb(226 45 47)">j</text><text x="714" y="900"  fill="rgb(216 19 19)">e</text><text x="717" y="900"  fill="rgb(211 0 0)">c</text><text x="720" y="900"  fill="rgb(217 0 0)">t&quot;</text><text x="726" y="900"  fill="rgb(211 0 0)">)</text><text x="729" y="900"  fill="rgb(217 0 0)"> </text><text x="732" y="900"  fill="rgb(222 0 0)">{</text><text x="735" y="900"  fill="rgb(226 0 0)"> </text><text x="738" y="900"  fill="rgb(222 0 0)">t</text><text x="741" y="900"  fill="rgb(219 21 14)">h</text><text x="744" y="900"  fill="rgb(221 26 16)">r</text><text x="747" y="900"  fill="rgb(223 28 17)">o</text><text x="750" y="900"  fill="rgb(222 31 22)">w</text><text x="753" y="900"  fill="rgb(222 30 21)"> </text><text x="756" y="900"  fill="rgb(223 30 20)">n</text><text x="759" y="900"  fill="rgb(222 29 20)">e</text><text x="762" y="900"  fill="rgb(223 28 20)">w</text><text x="765" y="900"  fill="rgb(222 29 19)"> I</text><text x="771" y="900"  fill="rgb(223 29 19)">n</text><text x="774" y="900"  fill="rgb(222 29 20)">si</text><text x="780" y="900"  fill="rgb(222 29 19)">g</text><text x="783" y="900"  fill="rgb(223 29 19)">ht</text><text x="789" y="900"  fill="rgb(223 28 19)">E</text><text x="792" y="900"  fill="rgb(222 29 19)">r</text><text x="795" y="900"  fill="rgb(222 29 20)">r</text><text x="798" y="900"  fill="rgb(223 29 20)">or</text><text x="804" y="900"  fill="rgb(222 29 20)">(</text><text x="807" y="900"  fill="rgb(223 29 20)">); } this.validateFilter(value); } </text><text x="912" y="900"  fill="rgb(222 29 20)">p</text><text x="915" y="900"  fill="rgb(223 29 20)">r</text><text x="918" y="900"  fill="rgb(223 29 19)">i</text><text x="921" y="900"  fill="rgb(222 29 20)">va</text><text x="927" y="900"  fill="rgb(223 29 19)">t</text><text x="930" y="900"  fill="rgb(222 29 19)">e</text><text x="933" y="900"  fill="rgb(221 29 20)"> </text><text x="936" y="900"  fill="rgb(216 32 20)">v</text><text x="939" y="900"  fill="rgb(226 27 26)">a</text><text x="942" y="900"  fill="rgb(227 32 20)">l</text><text x="945" y="900"  fill="rgb(223 0 0)">i</text><text x="948" y="900"  fill="rgb(239 205 210)">d</text><text x="951" y="900"  fill="rgb(236 245 234)">a</text><text x="954" y="900"  fill="rgb(146 191 59)">t</text><text x="957" y="900"  fill="rgb(206 225 178)">e</text><text x="960" y="900"  fill="rgb(255 253 255)">I</text><text x="963" y="900"  fill="rgb(249 247 252)">S</text><text x="966" y="900"  fill="rgb(245 245 245)">(</text><text x="969" y="900"  fill="rgb(246 246 246)">value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0</text><text x="0" y="905"  fill="rgb(246 246 246)">].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str</text><text x="570" y="905"  fill="rgb(246 245 245)"> </text><text x="573" y="905"  fill="rgb(245 245 245)">!</text><text x="576" y="905"  fill="rgb(247 254 254)">=</text><text x="579" y="905"  fill="rgb(249 255 255)">=</text><text x="582" y="905"  fill="rgb(237 219 220)"> </text><text x="585" y="905"  fill="rgb(226 30 32)">&quot;</text><text x="588" y="905"  fill="rgb(211 0 0)">s</text><text x="591" y="905"  fill="rgb(218 30 4)">t</text><text x="594" y="905"  fill="rgb(226 27 27)">r</text><text x="597" y="905"  fill="rgb(220 29 24)">i</text><text x="600" y="905"  fill="rgb(222 29 20)">n</text><text x="603" y="905"  fill="rgb(222 29 19)">g</text><text x="606" y="905"  fill="rgb(223 28 19)">&quot;</text><text x="609" y="905"  fill="rgb(220 29 20)">)</text><text x="612" y="905"  fill="rgb(222 28 18)"> </text><text x="615" y="905"  fill="rgb(223 29 19)">{</text><text x="618" y="905"  fill="rgb(222 29 19)"> t</text><text x="624" y="905"  fill="rgb(222 29 20)">h</text><text x="627" y="905"  fill="rgb(223 29 20)">r</text><text x="630" y="905"  fill="rgb(222 29 19)">o</text><text x="633" y="905"  fill="rgb(223 29 20)">w</text><text x="636" y="905"  fill="rgb(222 29 20)"> </text><text x="639" y="905"  fill="rgb(222 28 20)">n</text><text x="642" y="905"  fill="rgb(222 29 20)">ew</text><text x="648" y="905"  fill="rgb(222 32 23)"> </text><text x="651" y="905"  fill="rgb(226 29 21)">I</text><text x="654" y="905"  fill="rgb(225 31 23)">n</text><text x="657" y="905"  fill="rgb(221 32 22)">s</text><text x="660" y="905"  fill="rgb(223 31 24)">i</text><text x="663" y="905"  fill="rgb(224 32 25)">g</text><text x="666" y="905"  fill="rgb(226 27 20)">h</text><text x="669" y="905"  fill="rgb(230 22 17)">t</text><text x="672" y="905"  fill="rgb(228 16 10)">E</text><text x="675" y="905"  fill="rgb(223 14 7)">r</text><text x="678" y="905"  fill="rgb(220 13 7)">r</text><text x="681" y="905"  fill="rgb(220 14 4)">o</text><text x="684" y="905"  fill="rgb(219 13 7)">r</text><text x="687" y="905"  fill="rgb(219 14 4)">(</text><text x="690" y="905"  fill="rgb(219 13 1)">)</text><text x="693" y="905"  fill="rgb(221 12 0)">;</text><text x="696" y="905"  fill="rgb(222 12 0)"> </text><text x="699" y="905"  fill="rgb(223 12 0)">}</text><text x="702" y="905"  fill="rgb(226 12 0)"> </text><text x="705" y="905"  fill="rgb(224 14 1)">e</text><text x="708" y="905"  fill="rgb(216 17 3)">l</text><text x="711" y="905"  fill="rgb(221 17 9)">s</text><text x="714" y="905"  fill="rgb(223 22 13)">e</text><text x="717" y="905"  fill="rgb(226 27 14)"> </text><text x="720" y="905"  fill="rgb(224 30 19)">{</text><text x="723" y="905"  fill="rgb(226 32 19)"> </text><text x="726" y="905"  fill="rgb(231 29 27)">i</text><text x="729" y="905"  fill="rgb(227 28 24)">f</text><text x="732" y="905"  fill="rgb(222 31 22)"> </text><text x="735" y="905"  fill="rgb(221 31 22)">((</text><text x="741" y="905"  fill="rgb(224 27 22)">s</text><text x="744" y="905"  fill="rgb(223 29 19)">t</text><text x="747" y="905"  fill="rgb(222 29 19)">r</text><text x="750" y="905"  fill="rgb(223 29 20)">.</text><text x="753" y="905"  fill="rgb(222 29 18)">s</text><text x="756" y="905"  fill="rgb(223 29 20)">lice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring</text><text x="912" y="905"  fill="rgb(223 29 18)">(</text><text x="915" y="905"  fill="rgb(223 29 19)">i</text><text x="918" y="905"  fill="rgb(222 28 20)">d</text><text x="921" y="905"  fill="rgb(223 28 20)">s</text><text x="924" y="905"  fill="rgb(223 29 18)">t</text><text x="927" y="905"  fill="rgb(222 29 19)">r</text><text x="930" y="905"  fill="rgb(221 28 20)">i</text><text x="933" y="905"  fill="rgb(224 28 17)">n</text><text x="936" y="905"  fill="rgb(226 28 16)">g</text><text x="939" y="905"  fill="rgb(222 35 16)">)</text><text x="942" y="905"  fill="rgb(214 0 0)"> </text><text x="945" y="905"  fill="rgb(230 87 96)">|</text><text x="948" y="905"  fill="rgb(247 253 250)">|</text><text x="951" y="905"  fill="rgb(207 225 166)"> </text><text x="954" y="905"  fill="rgb(241 244 241)">!</text><text x="957" y="905"  fill="rgb(255 252 255)">t</text><text x="960" y="905"  fill="rgb(246 246 247)">h</text><text x="963" y="905"  fill="rgb(245 245 245)">i</text><text x="966" y="905"  fill="rgb(246 246 246)">s.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new Insig</text><text x="0" y="910"  fill="rgb(246 246 246)">htError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; le</text><text x="576" y="910"  fill="rgb(246 245 245)">t</text><text x="579" y="910"  fill="rgb(246 246 246)"> </text><text x="582" y="910"  fill="rgb(248 255 255)">n</text><text x="585" y="910"  fill="rgb(245 255 255)">u</text><text x="588" y="910"  fill="rgb(229 149 153)">m</text><text x="591" y="910"  fill="rgb(224 0 0)">:</text><text x="594" y="910"  fill="rgb(221 4 0)"> </text><text x="597" y="910"  fill="rgb(221 35 21)">a</text><text x="600" y="910"  fill="rgb(224 29 21)">n</text><text x="603" y="910"  fill="rgb(222 28 18)">y</text><text x="606" y="910"  fill="rgb(221 30 16)"> </text><text x="609" y="910"  fill="rgb(226 28 19)">=</text><text x="612" y="910"  fill="rgb(223 29 22)"> </text><text x="615" y="910"  fill="rgb(223 28 20)">O</text><text x="618" y="910"  fill="rgb(223 28 18)">b</text><text x="621" y="910"  fill="rgb(223 29 18)">j</text><text x="624" y="910"  fill="rgb(221 29 20)">e</text><text x="627" y="910"  fill="rgb(222 28 20)">c</text><text x="630" y="910"  fill="rgb(221 29 19)">t</text><text x="633" y="910"  fill="rgb(223 29 20)">.</text><text x="636" y="910"  fill="rgb(225 28 20)">v</text><text x="639" y="910"  fill="rgb(225 27 20)">a</text><text x="642" y="910"  fill="rgb(222 29 20)">l</text><text x="645" y="910"  fill="rgb(223 29 20)">u</text><text x="648" y="910"  fill="rgb(220 27 19)">e</text><text x="651" y="910"  fill="rgb(226 28 19)">s</text><text x="654" y="910"  fill="rgb(225 27 20)">(</text><text x="657" y="910"  fill="rgb(225 29 21)">v</text><text x="660" y="910"  fill="rgb(221 28 21)">a</text><text x="663" y="910"  fill="rgb(222 29 22)">l</text><text x="666" y="910"  fill="rgb(223 29 22)">u</text><text x="669" y="910"  fill="rgb(221 29 21)">e</text><text x="672" y="910"  fill="rgb(222 30 18)">)</text><text x="675" y="910"  fill="rgb(222 30 19)">[</text><text x="678" y="910"  fill="rgb(223 29 19)">0</text><text x="681" y="910"  fill="rgb(225 30 20)">]</text><text x="684" y="910"  fill="rgb(223 29 18)">;</text><text x="687" y="910"  fill="rgb(223 29 19)"> </text><text x="690" y="910"  fill="rgb(221 30 19)">i</text><text x="693" y="910"  fill="rgb(224 28 21)">f</text><text x="696" y="910"  fill="rgb(225 28 20)"> </text><text x="699" y="910"  fill="rgb(223 30 19)">(</text><text x="702" y="910"  fill="rgb(220 30 20)">(</text><text x="705" y="910"  fill="rgb(221 30 20)">t</text><text x="708" y="910"  fill="rgb(225 29 21)">y</text><text x="711" y="910"  fill="rgb(225 28 17)">p</text><text x="714" y="910"  fill="rgb(226 28 19)">e</text><text x="717" y="910"  fill="rgb(225 27 19)">o</text><text x="720" y="910"  fill="rgb(222 29 20)">f</text><text x="723" y="910"  fill="rgb(221 29 21)"> </text><text x="726" y="910"  fill="rgb(223 29 19)">n</text><text x="729" y="910"  fill="rgb(224 28 20)">u</text><text x="732" y="910"  fill="rgb(226 28 20)">m</text><text x="735" y="910"  fill="rgb(224 28 18)"> </text><text x="738" y="910"  fill="rgb(224 29 18)">!</text><text x="741" y="910"  fill="rgb(222 29 19)">=</text><text x="744" y="910"  fill="rgb(223 29 19)">=</text><text x="747" y="910"  fill="rgb(221 29 20)"> &quot;</text><text x="753" y="910"  fill="rgb(223 29 19)">n</text><text x="756" y="910"  fill="rgb(223 29 20)">umber&quot;) || !this.validateIdstring(idstring) || </text><text x="897" y="910"  fill="rgb(222 29 20)">!t</text><text x="903" y="910"  fill="rgb(223 29 20)">his</text><text x="912" y="910"  fill="rgb(222 29 20)">.</text><text x="915" y="910"  fill="rgb(221 29 20)">m</text><text x="918" y="910"  fill="rgb(220 30 17)">f</text><text x="921" y="910"  fill="rgb(222 29 17)">i</text><text x="924" y="910"  fill="rgb(224 27 23)">e</text><text x="927" y="910"  fill="rgb(223 28 20)">l</text><text x="930" y="910"  fill="rgb(224 30 17)">d</text><text x="933" y="910"  fill="rgb(220 29 20)">s</text><text x="936" y="910"  fill="rgb(229 30 23)">.</text><text x="939" y="910"  fill="rgb(222 0 0)">i</text><text x="942" y="910"  fill="rgb(220 88 81)">n</text><text x="945" y="910"  fill="rgb(244 255 253)">c</text><text x="948" y="910"  fill="rgb(246 249 249)">l</text><text x="951" y="910"  fill="rgb(251 247 255)">u</text><text x="954" y="910"  fill="rgb(250 248 253)">d</text><text x="957" y="910"  fill="rgb(245 245 245)">e</text><text x="960" y="910"  fill="rgb(246 246 246)">s(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of valu</text><text x="0" y="915"  fill="rgb(246 246 246)">e) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insi</text><text x="579" y="915"  fill="rgb(246 245 245)">g</text><text x="582" y="915"  fill="rgb(245 245 245)">h</text><text x="585" y="915"  fill="rgb(246 250 250)">t</text><text x="588" y="915"  fill="rgb(250 255 255)">D</text><text x="591" y="915"  fill="rgb(242 250 251)">a</text><text x="594" y="915"  fill="rgb(220 73 75)">t</text><text x="597" y="915"  fill="rgb(221 0 0)">a</text><text x="600" y="915"  fill="rgb(222 13 3)">s</text><text x="603" y="915"  fill="rgb(225 32 20)">e</text><text x="606" y="915"  fill="rgb(220 33 25)">t</text><text x="609" y="915"  fill="rgb(220 30 21)">.</text><text x="612" y="915"  fill="rgb(223 29 20)">i</text><text x="615" y="915"  fill="rgb(223 29 21)">d</text><text x="618" y="915"  fill="rgb(224 28 21)"> </text><text x="621" y="915"  fill="rgb(222 29 20)">==</text><text x="627" y="915"  fill="rgb(221 29 18)">=</text><text x="630" y="915"  fill="rgb(223 29 19)"> </text><text x="633" y="915"  fill="rgb(223 29 20)">i</text><text x="636" y="915"  fill="rgb(221 29 20)">d</text><text x="639" y="915"  fill="rgb(222 29 20)">stri</text><text x="651" y="915"  fill="rgb(222 28 19)">n</text><text x="654" y="915"  fill="rgb(222 29 19)">g</text><text x="657" y="915"  fill="rgb(223 29 19)">) </text><text x="663" y="915"  fill="rgb(222 28 19)">{</text><text x="666" y="915"  fill="rgb(222 29 18)"> </text><text x="669" y="915"  fill="rgb(223 28 19)">t</text><text x="672" y="915"  fill="rgb(223 29 20)">h</text><text x="675" y="915"  fill="rgb(222 28 19)">i</text><text x="678" y="915"  fill="rgb(222 30 19)">s</text><text x="681" y="915"  fill="rgb(223 28 19)">.</text><text x="684" y="915"  fill="rgb(222 29 19)">i</text><text x="687" y="915"  fill="rgb(223 28 20)">d</text><text x="690" y="915"  fill="rgb(222 29 19)">In</text><text x="696" y="915"  fill="rgb(222 29 20)">Q</text><text x="699" y="915"  fill="rgb(222 28 20)">ue</text><text x="705" y="915"  fill="rgb(223 28 21)">r</text><text x="708" y="915"  fill="rgb(222 28 20)">y</text><text x="711" y="915"  fill="rgb(222 29 20)">.p</text><text x="717" y="915"  fill="rgb(221 29 20)">u</text><text x="720" y="915"  fill="rgb(223 28 19)">sh</text><text x="726" y="915"  fill="rgb(222 28 20)">(</text><text x="729" y="915"  fill="rgb(222 29 19)">i</text><text x="732" y="915"  fill="rgb(223 28 19)">d</text><text x="735" y="915"  fill="rgb(222 29 19)">s</text><text x="738" y="915"  fill="rgb(223 29 20)">t</text><text x="741" y="915"  fill="rgb(221 29 20)">r</text><text x="744" y="915"  fill="rgb(223 29 20)">i</text><text x="747" y="915"  fill="rgb(222 29 19)">n</text><text x="750" y="915"  fill="rgb(222 29 20)">g</text><text x="753" y="915"  fill="rgb(223 29 19)">)</text><text x="756" y="915"  fill="rgb(223 29 20)">; if (insightDataset.kind === InsightDatasetKin</text><text x="897" y="915"  fill="rgb(222 29 20)">d</text><text x="900" y="915"  fill="rgb(223 29 20)">.Cou</text><text x="912" y="915"  fill="rgb(223 29 19)">r</text><text x="915" y="915"  fill="rgb(222 28 21)">s</text><text x="918" y="915"  fill="rgb(226 27 21)">e</text><text x="921" y="915"  fill="rgb(223 29 20)">s</text><text x="924" y="915"  fill="rgb(213 33 17)">)</text><text x="927" y="915"  fill="rgb(224 27 23)"> </text><text x="930" y="915"  fill="rgb(221 31 25)">{</text><text x="933" y="915"  fill="rgb(226 32 24)"> </text><text x="936" y="915"  fill="rgb(220 0 0)">t</text><text x="939" y="915"  fill="rgb(214 9 9)">h</text><text x="942" y="915"  fill="rgb(244 245 246)">i</text><text x="945" y="915"  fill="rgb(247 253 253)">s</text><text x="948" y="915"  fill="rgb(246 245 245)">.</text><text x="951" y="915"  fill="rgb(246 246 246)">m</text><text x="954" y="915"  fill="rgb(245 245 245)">f</text><text x="957" y="915"  fill="rgb(246 246 246)">ields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.i</text><text x="0" y="920"  fill="rgb(246 246 246)">dInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default cla</text><text x="585" y="920"  fill="rgb(246 245 245)">s</text><text x="588" y="920"  fill="rgb(245 245 245)">s</text><text x="591" y="920"  fill="rgb(247 254 254)"> </text><text x="594" y="920"  fill="rgb(251 255 255)">Q</text><text x="597" y="920"  fill="rgb(233 227 225)">u</text><text x="600" y="920"  fill="rgb(217 42 42)">e</text><text x="603" y="920"  fill="rgb(218 0 0)">r</text><text x="606" y="920"  fill="rgb(233 0 0)">y</text><text x="609" y="920"  fill="rgb(228 27 24)">V</text><text x="612" y="920"  fill="rgb(215 35 16)">a</text><text x="615" y="920"  fill="rgb(221 32 19)">l</text><text x="618" y="920"  fill="rgb(223 28 20)">i</text><text x="621" y="920"  fill="rgb(223 29 19)">d</text><text x="624" y="920"  fill="rgb(223 29 17)">a</text><text x="627" y="920"  fill="rgb(223 29 19)">tor </text><text x="639" y="920"  fill="rgb(223 29 20)">{ </text><text x="645" y="920"  fill="rgb(223 28 20)">p</text><text x="648" y="920"  fill="rgb(223 29 20)">r</text><text x="651" y="920"  fill="rgb(222 29 20)">i</text><text x="654" y="920"  fill="rgb(223 29 20)">v</text><text x="657" y="920"  fill="rgb(222 29 20)">at</text><text x="663" y="920"  fill="rgb(223 29 20)">e r</text><text x="672" y="920"  fill="rgb(223 28 20)">e</text><text x="675" y="920"  fill="rgb(223 29 20)">a</text><text x="678" y="920"  fill="rgb(223 28 20)">d</text><text x="681" y="920"  fill="rgb(222 29 20)">o</text><text x="684" y="920"  fill="rgb(223 29 20)">n</text><text x="687" y="920"  fill="rgb(222 29 20)">l</text><text x="690" y="920"  fill="rgb(223 28 20)">y</text><text x="693" y="920"  fill="rgb(223 29 20)"> cou</text><text x="705" y="920"  fill="rgb(223 29 19)">rs</text><text x="711" y="920"  fill="rgb(223 29 20)">emf</text><text x="720" y="920"  fill="rgb(222 29 20)">i</text><text x="723" y="920"  fill="rgb(223 29 20)">eld</text><text x="732" y="920"  fill="rgb(222 29 20)">s</text><text x="735" y="920"  fill="rgb(223 29 20)">:</text><text x="738" y="920"  fill="rgb(222 29 20)"> </text><text x="741" y="920"  fill="rgb(223 28 20)">s</text><text x="744" y="920"  fill="rgb(223 29 20)">tri</text><text x="753" y="920"  fill="rgb(222 29 20)">n</text><text x="756" y="920"  fill="rgb(223 29 20)">g[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]</text><text x="894" y="920"  fill="rgb(222 29 20)">;</text><text x="897" y="920"  fill="rgb(223 29 20)"> </text><text x="900" y="920"  fill="rgb(224 28 20)">p</text><text x="903" y="920"  fill="rgb(222 29 20)">ri</text><text x="909" y="920"  fill="rgb(223 29 20)">v</text><text x="912" y="920"  fill="rgb(223 28 19)">a</text><text x="915" y="920"  fill="rgb(222 29 20)">t</text><text x="918" y="920"  fill="rgb(225 28 22)">e</text><text x="921" y="920"  fill="rgb(231 25 21)"> </text><text x="924" y="920"  fill="rgb(227 30 17)">r</text><text x="927" y="920"  fill="rgb(221 35 14)">e</text><text x="930" y="920"  fill="rgb(228 11 2)">a</text><text x="933" y="920"  fill="rgb(218 0 0)">d</text><text x="936" y="920"  fill="rgb(218 60 62)">o</text><text x="939" y="920"  fill="rgb(244 255 255)">n</text><text x="942" y="920"  fill="rgb(247 254 254)">l</text><text x="945" y="920"  fill="rgb(245 245 245)">y</text><text x="948" y="920"  fill="rgb(246 246 246)"> coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;s</text><text x="0" y="925"  fill="rgb(246 246 246)">hortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idIn</text><text x="591" y="925"  fill="rgb(246 245 245)">Q</text><text x="594" y="925"  fill="rgb(246 246 246)">u</text><text x="597" y="925"  fill="rgb(249 255 255)">er</text><text x="603" y="925"  fill="rgb(234 192 189)">y</text><text x="606" y="925"  fill="rgb(221 91 90)">:</text><text x="609" y="925"  fill="rgb(217 0 0)"> </text><text x="612" y="925"  fill="rgb(229 4 3)">s</text><text x="615" y="925"  fill="rgb(224 29 20)">t</text><text x="618" y="925"  fill="rgb(219 33 21)">r</text><text x="621" y="925"  fill="rgb(222 29 21)">i</text><text x="624" y="925"  fill="rgb(220 29 20)">n</text><text x="627" y="925"  fill="rgb(223 28 19)">g</text><text x="630" y="925"  fill="rgb(223 28 20)">[</text><text x="633" y="925"  fill="rgb(221 29 20)">]</text><text x="636" y="925"  fill="rgb(222 29 20)">;</text><text x="639" y="925"  fill="rgb(223 29 20)"> </text><text x="642" y="925"  fill="rgb(221 29 20)">/</text><text x="645" y="925"  fill="rgb(221 29 18)">/</text><text x="648" y="925"  fill="rgb(223 29 20)"> make sure the query only has one id private keysInQuery: string[]; // all keys ap</text><text x="894" y="925"  fill="rgb(222 29 20)">pe</text><text x="900" y="925"  fill="rgb(221 29 20)">ar</text><text x="906" y="925"  fill="rgb(224 29 19)">e</text><text x="909" y="925"  fill="rgb(222 28 19)">d</text><text x="912" y="925"  fill="rgb(222 29 19)"> </text><text x="915" y="925"  fill="rgb(224 29 19)">i</text><text x="918" y="925"  fill="rgb(220 32 19)">n</text><text x="921" y="925"  fill="rgb(221 34 17)"> </text><text x="924" y="925"  fill="rgb(224 1 0)">c</text><text x="927" y="925"  fill="rgb(214 0 0)">o</text><text x="930" y="925"  fill="rgb(218 8 6)">l</text><text x="933" y="925"  fill="rgb(234 201 204)">u</text><text x="936" y="925"  fill="rgb(250 255 255)">m</text><text x="939" y="925"  fill="rgb(247 253 253)">n</text><text x="942" y="925"  fill="rgb(245 245 245)">s</text><text x="945" y="925"  fill="rgb(246 246 246)"> after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; </text><text x="0" y="930"  fill="rgb(246 246 246)">private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } publi</text><text x="594" y="930"  fill="rgb(246 245 245)">c</text><text x="597" y="930"  fill="rgb(245 245 245)"> </text><text x="600" y="930"  fill="rgb(246 248 248)">v</text><text x="603" y="930"  fill="rgb(249 255 255)">al</text><text x="609" y="930"  fill="rgb(235 208 206)">i</text><text x="612" y="930"  fill="rgb(215 48 49)">d</text><text x="615" y="930"  fill="rgb(222 0 0)">at</text><text x="621" y="930"  fill="rgb(224 28 24)">e</text><text x="624" y="930"  fill="rgb(229 30 22)">(</text><text x="627" y="930"  fill="rgb(222 31 17)">q</text><text x="630" y="930"  fill="rgb(219 30 13)">:</text><text x="633" y="930"  fill="rgb(227 27 16)"> </text><text x="636" y="930"  fill="rgb(227 27 19)">a</text><text x="639" y="930"  fill="rgb(220 29 20)">n</text><text x="642" y="930"  fill="rgb(224 28 20)">y</text><text x="645" y="930"  fill="rgb(223 28 19)">)</text><text x="648" y="930"  fill="rgb(223 29 20)">: void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let </text><text x="894" y="930"  fill="rgb(223 29 19)">k</text><text x="897" y="930"  fill="rgb(223 29 20)">e</text><text x="900" y="930"  fill="rgb(221 29 19)">y</text><text x="903" y="930"  fill="rgb(222 29 19)"> </text><text x="906" y="930"  fill="rgb(223 28 17)">o</text><text x="909" y="930"  fill="rgb(220 32 20)">f</text><text x="912" y="930"  fill="rgb(220 33 21)"> </text><text x="915" y="930"  fill="rgb(222 29 16)">O</text><text x="918" y="930"  fill="rgb(222 4 0)">b</text><text x="921" y="930"  fill="rgb(221 0 0)">j</text><text x="924" y="930"  fill="rgb(217 76 78)">e</text><text x="927" y="930"  fill="rgb(239 201 199)">c</text><text x="930" y="930"  fill="rgb(247 255 255)">t</text><text x="933" y="930"  fill="rgb(249 255 255)">.</text><text x="936" y="930"  fill="rgb(246 247 247)">k</text><text x="939" y="930"  fill="rgb(245 245 245)">e</text><text x="942" y="930"  fill="rgb(246 246 246)">ys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.T</text><text x="0" y="935"  fill="rgb(246 246 246)">RANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2)</text><text x="603" y="935"  fill="rgb(245 245 245)"> </text><text x="606" y="935"  fill="rgb(246 247 247)">{</text><text x="609" y="935"  fill="rgb(248 255 255)"> </text><text x="612" y="935"  fill="rgb(251 255 255)">t</text><text x="615" y="935"  fill="rgb(242 255 255)">h</text><text x="618" y="935"  fill="rgb(224 86 97)">r</text><text x="621" y="935"  fill="rgb(210 0 0)">o</text><text x="624" y="935"  fill="rgb(217 0 0)">w</text><text x="627" y="935"  fill="rgb(228 16 10)"> </text><text x="630" y="935"  fill="rgb(220 26 28)">n</text><text x="633" y="935"  fill="rgb(215 35 21)">e</text><text x="636" y="935"  fill="rgb(217 32 15)">w</text><text x="639" y="935"  fill="rgb(223 28 20)"> </text><text x="642" y="935"  fill="rgb(222 29 19)">I</text><text x="645" y="935"  fill="rgb(221 28 19)">n</text><text x="648" y="935"  fill="rgb(222 29 20)">s</text><text x="651" y="935"  fill="rgb(223 29 20)">i</text><text x="654" y="935"  fill="rgb(222 29 20)">gh</text><text x="660" y="935"  fill="rgb(223 29 20)">t</text><text x="663" y="935"  fill="rgb(222 29 20)">E</text><text x="666" y="935"  fill="rgb(223 29 20)">rror</text><text x="678" y="935"  fill="rgb(221 29 20)">()</text><text x="684" y="935"  fill="rgb(223 29 20)">; } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } p</text><text x="879" y="935"  fill="rgb(222 29 20)">riv</text><text x="888" y="935"  fill="rgb(223 29 20)">a</text><text x="891" y="935"  fill="rgb(222 29 20)">t</text><text x="894" y="935"  fill="rgb(223 29 20)">e</text><text x="897" y="935"  fill="rgb(221 28 19)"> </text><text x="900" y="935"  fill="rgb(224 28 21)">v</text><text x="903" y="935"  fill="rgb(226 29 25)">a</text><text x="906" y="935"  fill="rgb(219 33 31)">l</text><text x="909" y="935"  fill="rgb(230 5 0)">i</text><text x="912" y="935"  fill="rgb(228 0 0)">d</text><text x="915" y="935"  fill="rgb(213 0 0)">a</text><text x="918" y="935"  fill="rgb(231 75 79)">t</text><text x="921" y="935"  fill="rgb(235 228 231)">e</text><text x="924" y="935"  fill="rgb(252 255 255)">G</text><text x="927" y="935"  fill="rgb(248 255 255)">R</text><text x="930" y="935"  fill="rgb(246 249 249)">O</text><text x="933" y="935"  fill="rgb(245 245 245)">U</text><text x="936" y="935"  fill="rgb(246 246 246)">P(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.tr</text><text x="0" y="940"  fill="rgb(246 246 246)">ansformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { th</text><text x="609" y="940"  fill="rgb(246 245 245)">r</text><text x="612" y="940"  fill="rgb(246 246 246)">o</text><text x="615" y="940"  fill="rgb(247 253 253)">w</text><text x="618" y="940"  fill="rgb(249 255 255)"> </text><text x="621" y="940"  fill="rgb(246 250 247)">n</text><text x="624" y="940"  fill="rgb(236 179 180)">e</text><text x="627" y="940"  fill="rgb(218 8 7)">w</text><text x="630" y="940"  fill="rgb(218 0 0)"> </text><text x="633" y="940"  fill="rgb(228 0 0)">I</text><text x="636" y="940"  fill="rgb(229 21 15)">n</text><text x="639" y="940"  fill="rgb(224 32 21)">s</text><text x="642" y="940"  fill="rgb(222 30 21)">i</text><text x="645" y="940"  fill="rgb(223 30 20)">g</text><text x="648" y="940"  fill="rgb(223 28 20)">h</text><text x="651" y="940"  fill="rgb(222 29 20)">tError</text><text x="669" y="940"  fill="rgb(222 29 19)">()</text><text x="675" y="940"  fill="rgb(222 28 20)">;</text><text x="678" y="940"  fill="rgb(222 29 20)"> }</text><text x="684" y="940"  fill="rgb(223 29 20)"> if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfiel</text><text x="861" y="940"  fill="rgb(222 29 20)">d</text><text x="864" y="940"  fill="rgb(223 29 20)">s</text><text x="867" y="940"  fill="rgb(223 28 19)">.</text><text x="870" y="940"  fill="rgb(223 29 20)">in</text><text x="876" y="940"  fill="rgb(222 29 20)">c</text><text x="879" y="940"  fill="rgb(221 29 20)">l</text><text x="882" y="940"  fill="rgb(223 29 19)">u</text><text x="885" y="940"  fill="rgb(221 29 19)">d</text><text x="888" y="940"  fill="rgb(222 29 19)">es(</text><text x="897" y="940"  fill="rgb(224 33 21)">s</text><text x="900" y="940"  fill="rgb(223 25 14)">p</text><text x="903" y="940"  fill="rgb(220 0 0)">l</text><text x="906" y="940"  fill="rgb(221 0 0)">i</text><text x="909" y="940"  fill="rgb(220 63 63)">t</text><text x="912" y="940"  fill="rgb(227 150 150)">t</text><text x="915" y="940"  fill="rgb(245 252 252)">e</text><text x="918" y="940"  fill="rgb(248 255 255)">dK</text><text x="924" y="940"  fill="rgb(245 245 245)">e</text><text x="927" y="940"  fill="rgb(246 245 245)">y</text><text x="930" y="940"  fill="rgb(246 246 246)">[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and sho</text><text x="0" y="945"  fill="rgb(246 246 246)">uld have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]</text><text x="612" y="945"  fill="rgb(246 245 245)">;</text><text x="615" y="945"  fill="rgb(245 245 245)"> </text><text x="618" y="945"  fill="rgb(246 246 246)">l</text><text x="621" y="945"  fill="rgb(247 254 255)">e</text><text x="624" y="945"  fill="rgb(249 255 255)">t</text><text x="627" y="945"  fill="rgb(246 255 255)"> </text><text x="630" y="945"  fill="rgb(239 234 232)">c</text><text x="633" y="945"  fill="rgb(219 93 87)">r</text><text x="636" y="945"  fill="rgb(210 0 0)">i</text><text x="639" y="945"  fill="rgb(218 0 0)">t</text><text x="642" y="945"  fill="rgb(222 1 0)">e</text><text x="645" y="945"  fill="rgb(223 22 11)">r</text><text x="648" y="945"  fill="rgb(223 31 22)">i</text><text x="651" y="945"  fill="rgb(223 32 22)">a</text><text x="654" y="945"  fill="rgb(224 28 18)"> </text><text x="657" y="945"  fill="rgb(223 28 17)">=</text><text x="660" y="945"  fill="rgb(222 28 20)"> </text><text x="663" y="945"  fill="rgb(222 29 20)">a</text><text x="666" y="945"  fill="rgb(222 28 20)">p</text><text x="669" y="945"  fill="rgb(224 27 19)">p</text><text x="672" y="945"  fill="rgb(222 29 19)">l</text><text x="675" y="945"  fill="rgb(221 28 20)">y</text><text x="678" y="945"  fill="rgb(221 29 20)">r</text><text x="681" y="945"  fill="rgb(223 29 20)">ule[</text><text x="693" y="945"  fill="rgb(223 29 19)">ap</text><text x="699" y="945"  fill="rgb(223 29 20)">plykey]; if (applykey.length === 0 || applykey.i</text><text x="843" y="945"  fill="rgb(223 28 20)">n</text><text x="846" y="945"  fill="rgb(223 29 20)">clud</text><text x="858" y="945"  fill="rgb(223 28 20)">e</text><text x="861" y="945"  fill="rgb(222 29 20)">s</text><text x="864" y="945"  fill="rgb(223 29 20)">(</text><text x="867" y="945"  fill="rgb(223 28 19)">&quot;</text><text x="870" y="945"  fill="rgb(222 29 20)">_</text><text x="873" y="945"  fill="rgb(221 29 20)">&quot;</text><text x="876" y="945"  fill="rgb(221 28 19)">)</text><text x="879" y="945"  fill="rgb(223 28 18)"> </text><text x="882" y="945"  fill="rgb(223 29 19)">|</text><text x="885" y="945"  fill="rgb(223 32 21)">|</text><text x="888" y="945"  fill="rgb(222 32 22)"> </text><text x="891" y="945"  fill="rgb(222 25 16)">t</text><text x="894" y="945"  fill="rgb(222 11 0)">h</text><text x="897" y="945"  fill="rgb(218 0 0)">i</text><text x="900" y="945"  fill="rgb(212 0 0)">s</text><text x="903" y="945"  fill="rgb(222 100 101)">.</text><text x="906" y="945"  fill="rgb(236 179 179)">t</text><text x="909" y="945"  fill="rgb(250 255 255)">ra</text><text x="915" y="945"  fill="rgb(247 254 254)">n</text><text x="918" y="945"  fill="rgb(246 246 246)">sf</text><text x="924" y="945"  fill="rgb(246 245 245)">o</text><text x="927" y="945"  fill="rgb(246 246 246)">rmationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let appl</text><text x="0" y="950"  fill="rgb(246 246 246)">ytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (k</text><text x="624" y="950"  fill="rgb(245 245 245)">e</text><text x="627" y="950"  fill="rgb(246 249 249)">y</text><text x="630" y="950"  fill="rgb(248 255 255)">.</text><text x="633" y="950"  fill="rgb(252 255 255)">l</text><text x="636" y="950"  fill="rgb(250 255 255)">e</text><text x="639" y="950"  fill="rgb(233 226 224)">n</text><text x="642" y="950"  fill="rgb(228 100 101)">g</text><text x="645" y="950"  fill="rgb(222 12 11)">t</text><text x="648" y="950"  fill="rgb(217 0 0)">h</text><text x="651" y="950"  fill="rgb(221 0 0)"> </text><text x="654" y="950"  fill="rgb(223 24 15)">!</text><text x="657" y="950"  fill="rgb(221 28 24)">=</text><text x="660" y="950"  fill="rgb(219 32 20)">=</text><text x="663" y="950"  fill="rgb(224 29 17)"> </text><text x="666" y="950"  fill="rgb(229 26 18)">2</text><text x="669" y="950"  fill="rgb(220 31 22)">)</text><text x="672" y="950"  fill="rgb(221 28 22)"> </text><text x="675" y="950"  fill="rgb(223 30 20)">{</text><text x="678" y="950"  fill="rgb(223 28 20)"> </text><text x="681" y="950"  fill="rgb(223 29 20)">t</text><text x="684" y="950"  fill="rgb(222 29 20)">h</text><text x="687" y="950"  fill="rgb(223 29 20)">r</text><text x="690" y="950"  fill="rgb(223 28 19)">o</text><text x="693" y="950"  fill="rgb(223 28 21)">w</text><text x="696" y="950"  fill="rgb(223 29 20)"> n</text><text x="702" y="950"  fill="rgb(223 29 19)">ew I</text><text x="714" y="950"  fill="rgb(223 29 20)">nsi</text><text x="723" y="950"  fill="rgb(222 29 20)">g</text><text x="726" y="950"  fill="rgb(223 29 20)">ht</text><text x="732" y="950"  fill="rgb(222 29 20)">E</text><text x="735" y="950"  fill="rgb(223 29 20)">rror(); } if (this.m</text><text x="795" y="950"  fill="rgb(223 29 19)">tok</text><text x="804" y="950"  fill="rgb(223 29 20)">en.i</text><text x="816" y="950"  fill="rgb(222 29 20)">ncl</text><text x="825" y="950"  fill="rgb(223 28 20)">u</text><text x="828" y="950"  fill="rgb(223 29 20)">des(ap</text><text x="846" y="950"  fill="rgb(222 28 20)">p</text><text x="849" y="950"  fill="rgb(223 29 20)">l</text><text x="852" y="950"  fill="rgb(223 29 19)">yt</text><text x="858" y="950"  fill="rgb(222 29 19)">o</text><text x="861" y="950"  fill="rgb(224 28 20)">k</text><text x="864" y="950"  fill="rgb(221 28 20)">e</text><text x="867" y="950"  fill="rgb(216 33 22)">n</text><text x="870" y="950"  fill="rgb(225 27 18)">)</text><text x="873" y="950"  fill="rgb(228 27 17)">)</text><text x="876" y="950"  fill="rgb(221 31 21)"> </text><text x="879" y="950"  fill="rgb(220 28 20)">{</text><text x="882" y="950"  fill="rgb(223 23 17)"> </text><text x="885" y="950"  fill="rgb(221 0 0)">i</text><text x="888" y="950"  fill="rgb(218 0 0)">f</text><text x="891" y="950"  fill="rgb(222 0 0)"> </text><text x="894" y="950"  fill="rgb(227 63 65)">(</text><text x="897" y="950"  fill="rgb(226 205 204)">!</text><text x="900" y="950"  fill="rgb(249 255 255)">(</text><text x="903" y="950"  fill="rgb(251 255 255)">t</text><text x="906" y="950"  fill="rgb(248 255 255)">h</text><text x="909" y="950"  fill="rgb(246 248 248)">i</text><text x="912" y="950"  fill="rgb(245 245 245)">s</text><text x="915" y="950"  fill="rgb(246 245 245)">.</text><text x="918" y="950"  fill="rgb(246 246 246)">validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]</text><text x="0" y="955"  fill="rgb(246 246 246)">) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER</text><text x="630" y="955"  fill="rgb(246 245 245)">&quot;</text><text x="633" y="955"  fill="rgb(245 245 245)">)</text><text x="636" y="955"  fill="rgb(246 247 247)"> </text><text x="639" y="955"  fill="rgb(249 255 255)">{ </text><text x="645" y="955"  fill="rgb(245 255 255)">t</text><text x="648" y="955"  fill="rgb(235 191 196)">h</text><text x="651" y="955"  fill="rgb(224 103 106)">r</text><text x="654" y="955"  fill="rgb(220 2 2)">o</text><text x="657" y="955"  fill="rgb(221 0 0)">w</text><text x="660" y="955"  fill="rgb(225 0 0)"> </text><text x="663" y="955"  fill="rgb(220 6 6)">n</text><text x="666" y="955"  fill="rgb(221 33 26)">e</text><text x="669" y="955"  fill="rgb(223 32 23)">w</text><text x="672" y="955"  fill="rgb(224 31 22)"> </text><text x="675" y="955"  fill="rgb(222 28 19)">I</text><text x="678" y="955"  fill="rgb(222 28 20)">n</text><text x="681" y="955"  fill="rgb(222 29 18)">s</text><text x="684" y="955"  fill="rgb(222 29 19)">i</text><text x="687" y="955"  fill="rgb(223 28 19)">g</text><text x="690" y="955"  fill="rgb(221 29 19)">h</text><text x="693" y="955"  fill="rgb(222 29 20)">tE</text><text x="699" y="955"  fill="rgb(223 28 20)">r</text><text x="702" y="955"  fill="rgb(223 29 18)">ror</text><text x="711" y="955"  fill="rgb(222 29 19)">(</text><text x="714" y="955"  fill="rgb(222 29 20)">);</text><text x="720" y="955"  fill="rgb(223 28 20)"> </text><text x="723" y="955"  fill="rgb(222 29 19)">} </text><text x="729" y="955"  fill="rgb(222 28 19)">}</text><text x="732" y="955"  fill="rgb(221 29 19)"> </text><text x="735" y="955"  fill="rgb(222 28 20)">t</text><text x="738" y="955"  fill="rgb(223 28 20)">hi</text><text x="744" y="955"  fill="rgb(223 29 20)">s</text><text x="747" y="955"  fill="rgb(222 29 20)">.</text><text x="750" y="955"  fill="rgb(221 29 20)">v</text><text x="753" y="955"  fill="rgb(222 29 20)">a</text><text x="756" y="955"  fill="rgb(223 29 20)">lidateColumns</text><text x="795" y="955"  fill="rgb(223 29 18)">(</text><text x="798" y="955"  fill="rgb(223 29 19)">q.</text><text x="804" y="955"  fill="rgb(222 29 19)">C</text><text x="807" y="955"  fill="rgb(222 29 20)">OL</text><text x="813" y="955"  fill="rgb(223 28 20)">U</text><text x="816" y="955"  fill="rgb(222 29 20)">M</text><text x="819" y="955"  fill="rgb(221 29 20)">N</text><text x="822" y="955"  fill="rgb(222 28 20)">S</text><text x="825" y="955"  fill="rgb(222 29 18)">)</text><text x="828" y="955"  fill="rgb(223 29 19)">;</text><text x="831" y="955"  fill="rgb(223 29 20)"> if</text><text x="840" y="955"  fill="rgb(222 29 20)"> </text><text x="843" y="955"  fill="rgb(222 28 19)">(</text><text x="846" y="955"  fill="rgb(221 29 19)">q</text><text x="849" y="955"  fill="rgb(222 28 19)">.</text><text x="852" y="955"  fill="rgb(223 28 21)">O</text><text x="855" y="955"  fill="rgb(222 29 20)">R</text><text x="858" y="955"  fill="rgb(222 29 18)">D</text><text x="861" y="955"  fill="rgb(221 27 17)">E</text><text x="864" y="955"  fill="rgb(222 31 22)">R</text><text x="867" y="955"  fill="rgb(226 31 25)">)</text><text x="870" y="955"  fill="rgb(222 32 25)"> </text><text x="873" y="955"  fill="rgb(224 24 19)">{</text><text x="876" y="955"  fill="rgb(226 0 0)"> </text><text x="879" y="955"  fill="rgb(224 0 0)">t</text><text x="882" y="955"  fill="rgb(222 2 2)">h</text><text x="885" y="955"  fill="rgb(223 95 96)">i</text><text x="888" y="955"  fill="rgb(236 198 199)">s</text><text x="891" y="955"  fill="rgb(245 253 253)">.</text><text x="894" y="955"  fill="rgb(249 255 255)">v</text><text x="897" y="955"  fill="rgb(250 255 255)">a</text><text x="900" y="955"  fill="rgb(246 249 250)">l</text><text x="903" y="955"  fill="rgb(245 245 245)">i</text><text x="906" y="955"  fill="rgb(246 245 245)">d</text><text x="909" y="955"  fill="rgb(246 246 246)">ateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.</text><text x="0" y="960"  fill="rgb(246 246 246)">includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else </text><text x="636" y="960"  fill="rgb(246 245 245)">i</text><text x="639" y="960"  fill="rgb(245 245 245)">f</text><text x="642" y="960"  fill="rgb(246 247 247)"> </text><text x="645" y="960"  fill="rgb(246 251 251)">(</text><text x="648" y="960"  fill="rgb(249 255 255)">t</text><text x="651" y="960"  fill="rgb(250 255 255)">y</text><text x="654" y="960"  fill="rgb(244 255 255)">p</text><text x="657" y="960"  fill="rgb(231 219 221)">e</text><text x="660" y="960"  fill="rgb(229 129 128)">o</text><text x="663" y="960"  fill="rgb(219 55 52)">f</text><text x="666" y="960"  fill="rgb(210 0 0)"> </text><text x="669" y="960"  fill="rgb(221 0 0)">q</text><text x="672" y="960"  fill="rgb(223 0 0)"> </text><text x="675" y="960"  fill="rgb(223 14 2)">=</text><text x="678" y="960"  fill="rgb(222 20 9)">=</text><text x="681" y="960"  fill="rgb(224 32 24)">=</text><text x="684" y="960"  fill="rgb(224 30 21)"> </text><text x="687" y="960"  fill="rgb(223 30 21)">&quot;</text><text x="690" y="960"  fill="rgb(222 29 20)">s</text><text x="693" y="960"  fill="rgb(222 29 18)">t</text><text x="696" y="960"  fill="rgb(223 29 19)">r</text><text x="699" y="960"  fill="rgb(221 29 20)">i</text><text x="702" y="960"  fill="rgb(222 29 19)">n</text><text x="705" y="960"  fill="rgb(221 29 19)">g</text><text x="708" y="960"  fill="rgb(222 29 20)">&quot;</text><text x="711" y="960"  fill="rgb(222 29 19)">)</text><text x="714" y="960"  fill="rgb(222 29 18)"> {</text><text x="720" y="960"  fill="rgb(221 29 18)"> </text><text x="723" y="960"  fill="rgb(223 29 19)">i</text><text x="726" y="960"  fill="rgb(222 29 19)">f</text><text x="729" y="960"  fill="rgb(224 28 19)"> </text><text x="732" y="960"  fill="rgb(222 29 19)">(</text><text x="735" y="960"  fill="rgb(222 30 18)">!</text><text x="738" y="960"  fill="rgb(223 28 20)">th</text><text x="744" y="960"  fill="rgb(223 29 20)">is</text><text x="750" y="960"  fill="rgb(222 29 20)">.</text><text x="753" y="960"  fill="rgb(223 29 20)">keysInQuery.i</text><text x="792" y="960"  fill="rgb(222 29 20)">n</text><text x="795" y="960"  fill="rgb(223 29 20)">c</text><text x="798" y="960"  fill="rgb(223 29 19)">l</text><text x="801" y="960"  fill="rgb(222 29 18)">u</text><text x="804" y="960"  fill="rgb(222 29 17)">d</text><text x="807" y="960"  fill="rgb(222 29 18)">es</text><text x="813" y="960"  fill="rgb(222 29 19)">(</text><text x="816" y="960"  fill="rgb(223 29 19)">q</text><text x="819" y="960"  fill="rgb(222 29 18)">)</text><text x="822" y="960"  fill="rgb(222 29 19)">) </text><text x="828" y="960"  fill="rgb(223 28 19)">{</text><text x="831" y="960"  fill="rgb(222 29 19)"> </text><text x="834" y="960"  fill="rgb(222 28 19)">t</text><text x="837" y="960"  fill="rgb(223 28 20)">h</text><text x="840" y="960"  fill="rgb(221 29 20)">r</text><text x="843" y="960"  fill="rgb(220 30 19)">o</text><text x="846" y="960"  fill="rgb(223 29 18)">w</text><text x="849" y="960"  fill="rgb(223 31 21)"> </text><text x="852" y="960"  fill="rgb(222 31 22)">n</text><text x="855" y="960"  fill="rgb(223 32 22)">e</text><text x="858" y="960"  fill="rgb(222 25 15)">w</text><text x="861" y="960"  fill="rgb(223 16 5)"> </text><text x="864" y="960"  fill="rgb(220 0 0)">I</text><text x="867" y="960"  fill="rgb(217 0 0)">n</text><text x="870" y="960"  fill="rgb(212 0 0)">s</text><text x="873" y="960"  fill="rgb(210 0 0)">i</text><text x="876" y="960"  fill="rgb(229 133 133)">g</text><text x="879" y="960"  fill="rgb(233 219 219)">h</text><text x="882" y="960"  fill="rgb(246 255 255)">t</text><text x="885" y="960"  fill="rgb(251 255 255)">E</text><text x="888" y="960"  fill="rgb(249 255 255)">r</text><text x="891" y="960"  fill="rgb(246 254 254)">r</text><text x="894" y="960"  fill="rgb(246 247 247)">o</text><text x="897" y="960"  fill="rgb(246 245 245)">r</text><text x="900" y="960"  fill="rgb(245 245 245)">(</text><text x="903" y="960"  fill="rgb(246 246 246)">); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(</text><text x="0" y="965"  fill="rgb(246 246 246)">keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)</text><text x="648" y="965"  fill="rgb(245 245 245)">)</text><text x="651" y="965"  fill="rgb(246 245 245)"> </text><text x="654" y="965"  fill="rgb(247 251 251)">{</text><text x="657" y="965"  fill="rgb(249 255 255)"> </text><text x="660" y="965"  fill="rgb(250 255 255)">t</text><text x="663" y="965"  fill="rgb(252 255 255)">h</text><text x="666" y="965"  fill="rgb(253 255 255)">r</text><text x="669" y="965"  fill="rgb(234 204 203)">o</text><text x="672" y="965"  fill="rgb(223 153 153)">w</text><text x="675" y="965"  fill="rgb(216 49 51)"> </text><text x="678" y="965"  fill="rgb(222 26 27)">n</text><text x="681" y="965"  fill="rgb(216 0 0)">e</text><text x="684" y="965"  fill="rgb(215 0 0)">w</text><text x="687" y="965"  fill="rgb(218 15 1)"> </text><text x="690" y="965"  fill="rgb(221 20 14)">I</text><text x="693" y="965"  fill="rgb(226 24 18)">n</text><text x="696" y="965"  fill="rgb(222 27 17)">s</text><text x="699" y="965"  fill="rgb(221 29 18)">i</text><text x="702" y="965"  fill="rgb(221 30 22)">g</text><text x="705" y="965"  fill="rgb(223 30 22)">h</text><text x="708" y="965"  fill="rgb(221 30 21)">t</text><text x="711" y="965"  fill="rgb(224 29 21)">E</text><text x="714" y="965"  fill="rgb(224 28 22)">r</text><text x="717" y="965"  fill="rgb(223 27 21)">r</text><text x="720" y="965"  fill="rgb(224 28 21)">o</text><text x="723" y="965"  fill="rgb(222 28 22)">r</text><text x="726" y="965"  fill="rgb(221 29 21)">()</text><text x="732" y="965"  fill="rgb(225 27 21)">;</text><text x="735" y="965"  fill="rgb(223 28 20)"> </text><text x="738" y="965"  fill="rgb(222 30 18)">}</text><text x="741" y="965"  fill="rgb(220 30 18)"> </text><text x="744" y="965"  fill="rgb(222 29 20)">e</text><text x="747" y="965"  fill="rgb(223 28 20)">l</text><text x="750" y="965"  fill="rgb(222 29 20)">s</text><text x="753" y="965"  fill="rgb(223 29 20)">e</text><text x="756" y="965"  fill="rgb(223 28 20)"> {</text><text x="762" y="965"  fill="rgb(223 29 20)"> if (</text><text x="777" y="965"  fill="rgb(222 28 20)">O</text><text x="780" y="965"  fill="rgb(223 29 20)">b</text><text x="783" y="965"  fill="rgb(222 29 20)">j</text><text x="786" y="965"  fill="rgb(223 29 20)">e</text><text x="789" y="965"  fill="rgb(223 29 19)">c</text><text x="792" y="965"  fill="rgb(223 28 20)">t</text><text x="795" y="965"  fill="rgb(222 29 20)">.</text><text x="798" y="965"  fill="rgb(222 28 22)">k</text><text x="801" y="965"  fill="rgb(224 27 25)">e</text><text x="804" y="965"  fill="rgb(225 26 24)">y</text><text x="807" y="965"  fill="rgb(223 28 21)">s</text><text x="810" y="965"  fill="rgb(222 28 21)">(</text><text x="813" y="965"  fill="rgb(221 29 19)">q</text><text x="816" y="965"  fill="rgb(222 28 19)">)</text><text x="819" y="965"  fill="rgb(225 28 21)">.</text><text x="822" y="965"  fill="rgb(224 28 20)">l</text><text x="825" y="965"  fill="rgb(224 28 22)">e</text><text x="828" y="965"  fill="rgb(219 30 23)">n</text><text x="831" y="965"  fill="rgb(222 30 22)">g</text><text x="834" y="965"  fill="rgb(222 31 23)">t</text><text x="837" y="965"  fill="rgb(222 29 20)">h</text><text x="840" y="965"  fill="rgb(229 25 15)"> </text><text x="843" y="965"  fill="rgb(228 25 17)">!</text><text x="846" y="965"  fill="rgb(220 21 15)">=</text><text x="849" y="965"  fill="rgb(219 15 5)">=</text><text x="852" y="965"  fill="rgb(220 0 0)"> </text><text x="855" y="965"  fill="rgb(215 0 0)">0</text><text x="858" y="965"  fill="rgb(220 0 0)">)</text><text x="861" y="965"  fill="rgb(218 48 50)"> </text><text x="864" y="965"  fill="rgb(222 119 116)">{</text><text x="867" y="965"  fill="rgb(236 208 206)"> </text><text x="870" y="965"  fill="rgb(245 255 255)">t</text><text x="873" y="965"  fill="rgb(254 255 255)">h</text><text x="876" y="965"  fill="rgb(250 255 255)">i</text><text x="879" y="965"  fill="rgb(248 255 255)">s</text><text x="882" y="965"  fill="rgb(246 251 251)">.</text><text x="885" y="965"  fill="rgb(245 245 245)">va</text><text x="891" y="965"  fill="rgb(246 245 245)">l</text><text x="894" y="965"  fill="rgb(246 246 246)">idateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (</text><text x="0" y="970"  fill="rgb(246 246 246)">key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; d</text><text x="657" y="970"  fill="rgb(246 245 245)">e</text><text x="660" y="970"  fill="rgb(245 245 245)">fau</text><text x="669" y="970"  fill="rgb(249 255 255)">lt</text><text x="675" y="970"  fill="rgb(248 255 255)">:</text><text x="678" y="970"  fill="rgb(244 255 255)"> </text><text x="681" y="970"  fill="rgb(239 216 219)">t</text><text x="684" y="970"  fill="rgb(232 174 171)">h</text><text x="687" y="970"  fill="rgb(230 15 13)">r</text><text x="690" y="970"  fill="rgb(223 13 12)">o</text><text x="693" y="970"  fill="rgb(214 0 0)">w</text><text x="696" y="970"  fill="rgb(219 0 0)"> </text><text x="699" y="970"  fill="rgb(223 0 0)">ne</text><text x="705" y="970"  fill="rgb(224 0 0)">w</text><text x="708" y="970"  fill="rgb(229 11 4)"> </text><text x="711" y="970"  fill="rgb(224 31 17)">I</text><text x="714" y="970"  fill="rgb(219 37 18)">n</text><text x="717" y="970"  fill="rgb(220 35 20)">s</text><text x="720" y="970"  fill="rgb(224 33 24)">i</text><text x="723" y="970"  fill="rgb(228 31 23)">g</text><text x="726" y="970"  fill="rgb(225 30 21)">h</text><text x="729" y="970"  fill="rgb(223 30 22)">t</text><text x="732" y="970"  fill="rgb(221 29 20)">E</text><text x="735" y="970"  fill="rgb(224 28 22)">r</text><text x="738" y="970"  fill="rgb(225 26 21)">r</text><text x="741" y="970"  fill="rgb(224 28 22)">o</text><text x="744" y="970"  fill="rgb(222 29 19)">r</text><text x="747" y="970"  fill="rgb(222 29 20)">(</text><text x="750" y="970"  fill="rgb(222 28 19)">);</text><text x="756" y="970"  fill="rgb(222 29 19)"> }</text><text x="762" y="970"  fill="rgb(222 29 20)"> </text><text x="765" y="970"  fill="rgb(223 29 19)">} </text><text x="771" y="970"  fill="rgb(223 29 18)">}</text><text x="774" y="970"  fill="rgb(222 29 19)"> </text><text x="777" y="970"  fill="rgb(221 29 19)">p</text><text x="780" y="970"  fill="rgb(222 29 20)">r</text><text x="783" y="970"  fill="rgb(224 29 20)">i</text><text x="786" y="970"  fill="rgb(223 29 19)">v</text><text x="789" y="970"  fill="rgb(222 29 20)">a</text><text x="792" y="970"  fill="rgb(223 28 20)">t</text><text x="795" y="970"  fill="rgb(223 28 18)">e</text><text x="798" y="970"  fill="rgb(221 30 12)"> </text><text x="801" y="970"  fill="rgb(219 31 15)">v</text><text x="804" y="970"  fill="rgb(220 30 18)">a</text><text x="807" y="970"  fill="rgb(220 30 19)">l</text><text x="810" y="970"  fill="rgb(221 32 21)">i</text><text x="813" y="970"  fill="rgb(226 30 22)">d</text><text x="816" y="970"  fill="rgb(226 32 22)">a</text><text x="819" y="970"  fill="rgb(218 34 21)">t</text><text x="822" y="970"  fill="rgb(220 34 20)">e</text><text x="825" y="970"  fill="rgb(223 32 17)">N</text><text x="828" y="970"  fill="rgb(228 19 7)">O</text><text x="831" y="970"  fill="rgb(227 2 0)">T</text><text x="834" y="970"  fill="rgb(221 0 0)">(</text><text x="837" y="970"  fill="rgb(219 0 0)">v</text><text x="840" y="970"  fill="rgb(216 0 0)">al</text><text x="846" y="970"  fill="rgb(223 10 8)">u</text><text x="849" y="970"  fill="rgb(231 15 14)">e</text><text x="852" y="970"  fill="rgb(228 146 145)">:</text><text x="855" y="970"  fill="rgb(240 213 213)"> </text><text x="858" y="970"  fill="rgb(240 244 242)">a</text><text x="861" y="970"  fill="rgb(248 255 255)">n</text><text x="864" y="970"  fill="rgb(249 255 255)">y)</text><text x="870" y="970"  fill="rgb(247 250 251)">:</text><text x="873" y="970"  fill="rgb(245 245 245)"> v</text><text x="879" y="970"  fill="rgb(246 245 245)">o</text><text x="882" y="970"  fill="rgb(246 246 246)">id { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value)</text><text x="0" y="975"  fill="rgb(246 246 246)">.length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; </text><text x="666" y="975"  fill="rgb(246 245 245)">l</text><text x="669" y="975"  fill="rgb(245 245 245)">e</text><text x="672" y="975"  fill="rgb(246 246 246)">t</text><text x="675" y="975"  fill="rgb(246 248 248)"> </text><text x="678" y="975"  fill="rgb(247 251 251)">s</text><text x="681" y="975"  fill="rgb(248 255 255)">t</text><text x="684" y="975"  fill="rgb(249 255 255)">r</text><text x="687" y="975"  fill="rgb(250 255 255)">:</text><text x="690" y="975"  fill="rgb(248 255 255)"> </text><text x="693" y="975"  fill="rgb(243 249 251)">a</text><text x="696" y="975"  fill="rgb(247 240 242)">n</text><text x="699" y="975"  fill="rgb(228 175 177)">y</text><text x="702" y="975"  fill="rgb(224 111 113)"> </text><text x="705" y="975"  fill="rgb(221 100 100)">=</text><text x="708" y="975"  fill="rgb(208 24 12)"> </text><text x="711" y="975"  fill="rgb(212 0 0)">O</text><text x="714" y="975"  fill="rgb(220 0 0)">b</text><text x="717" y="975"  fill="rgb(228 0 0)">j</text><text x="720" y="975"  fill="rgb(220 0 0)">e</text><text x="723" y="975"  fill="rgb(214 0 0)">c</text><text x="726" y="975"  fill="rgb(222 0 0)">t</text><text x="729" y="975"  fill="rgb(223 4 0)">.</text><text x="732" y="975"  fill="rgb(224 19 7)">v</text><text x="735" y="975"  fill="rgb(221 21 9)">a</text><text x="738" y="975"  fill="rgb(222 21 8)">l</text><text x="741" y="975"  fill="rgb(222 19 6)">u</text><text x="744" y="975"  fill="rgb(221 21 10)">e</text><text x="747" y="975"  fill="rgb(224 24 13)">s</text><text x="750" y="975"  fill="rgb(224 28 17)">(</text><text x="753" y="975"  fill="rgb(222 30 21)">v</text><text x="756" y="975"  fill="rgb(222 30 22)">a</text><text x="759" y="975"  fill="rgb(223 32 23)">l</text><text x="762" y="975"  fill="rgb(223 32 22)">ue</text><text x="768" y="975"  fill="rgb(223 32 21)">)</text><text x="771" y="975"  fill="rgb(223 32 23)">[</text><text x="774" y="975"  fill="rgb(222 32 23)">0</text><text x="777" y="975"  fill="rgb(223 33 22)">]</text><text x="780" y="975"  fill="rgb(223 31 22)">;</text><text x="783" y="975"  fill="rgb(223 30 22)"> </text><text x="786" y="975"  fill="rgb(223 27 19)">i</text><text x="789" y="975"  fill="rgb(223 26 16)">f</text><text x="792" y="975"  fill="rgb(221 23 10)"> </text><text x="795" y="975"  fill="rgb(222 19 11)">(</text><text x="798" y="975"  fill="rgb(226 17 19)">t</text><text x="801" y="975"  fill="rgb(224 18 13)">y</text><text x="804" y="975"  fill="rgb(226 18 5)">p</text><text x="807" y="975"  fill="rgb(229 9 0)">e</text><text x="810" y="975"  fill="rgb(227 0 0)">o</text><text x="813" y="975"  fill="rgb(222 0 0)">f</text><text x="816" y="975"  fill="rgb(219 0 0)"> </text><text x="819" y="975"  fill="rgb(225 0 0)">s</text><text x="822" y="975"  fill="rgb(222 0 0)">t</text><text x="825" y="975"  fill="rgb(213 0 0)">r</text><text x="828" y="975"  fill="rgb(210 0 0)"> </text><text x="831" y="975"  fill="rgb(219 76 74)">!</text><text x="834" y="975"  fill="rgb(224 112 114)">=</text><text x="837" y="975"  fill="rgb(227 155 155)">=</text><text x="840" y="975"  fill="rgb(243 233 233)"> </text><text x="843" y="975"  fill="rgb(241 246 247)">&quot;</text><text x="846" y="975"  fill="rgb(245 255 255)">s</text><text x="849" y="975"  fill="rgb(250 255 255)">tr</text><text x="855" y="975"  fill="rgb(248 255 255)">i</text><text x="858" y="975"  fill="rgb(247 255 255)">n</text><text x="861" y="975"  fill="rgb(246 248 248)">g</text><text x="864" y="975"  fill="rgb(246 247 247)">&quot;</text><text x="867" y="975"  fill="rgb(245 245 245)">) </text><text x="873" y="975"  fill="rgb(246 246 246)">{ throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void</text><text x="0" y="980"  fill="rgb(246 246 246)"> { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring</text><text x="678" y="980"  fill="rgb(246 245 245)">: </text><text x="684" y="980"  fill="rgb(245 245 245)">st</text><text x="690" y="980"  fill="rgb(246 246 246)">r</text><text x="693" y="980"  fill="rgb(247 254 253)">i</text><text x="696" y="980"  fill="rgb(246 255 255)">n</text><text x="699" y="980"  fill="rgb(250 255 255)">g</text><text x="702" y="980"  fill="rgb(251 255 255)"> =</text><text x="708" y="980"  fill="rgb(250 255 255)"> </text><text x="711" y="980"  fill="rgb(249 255 255)">mk</text><text x="717" y="980"  fill="rgb(229 233 225)">e</text><text x="720" y="980"  fill="rgb(230 172 160)">y</text><text x="723" y="980"  fill="rgb(235 152 150)">[</text><text x="726" y="980"  fill="rgb(227 141 140)">0</text><text x="729" y="980"  fill="rgb(218 93 95)">]</text><text x="732" y="980"  fill="rgb(217 40 42)">;</text><text x="735" y="980"  fill="rgb(225 32 34)"> </text><text x="738" y="980"  fill="rgb(221 30 32)">l</text><text x="741" y="980"  fill="rgb(222 29 31)">e</text><text x="744" y="980"  fill="rgb(219 24 25)">t</text><text x="747" y="980"  fill="rgb(216 9 9)"> </text><text x="750" y="980"  fill="rgb(214 0 0)">mf</text><text x="756" y="980"  fill="rgb(215 0 0)">i</text><text x="759" y="980"  fill="rgb(216 0 0)">el</text><text x="765" y="980"  fill="rgb(217 0 0)">d</text><text x="768" y="980"  fill="rgb(216 0 0)">: st</text><text x="780" y="980"  fill="rgb(215 0 0)">r</text><text x="783" y="980"  fill="rgb(214 0 0)">in</text><text x="789" y="980"  fill="rgb(214 1 0)">g</text><text x="792" y="980"  fill="rgb(221 21 22)"> </text><text x="795" y="980"  fill="rgb(219 29 30)">=</text><text x="798" y="980"  fill="rgb(221 30 30)"> </text><text x="801" y="980"  fill="rgb(221 32 32)">m</text><text x="804" y="980"  fill="rgb(216 36 37)">k</text><text x="807" y="980"  fill="rgb(212 64 57)">e</text><text x="810" y="980"  fill="rgb(224 134 135)">y</text><text x="813" y="980"  fill="rgb(228 149 148)">[</text><text x="816" y="980"  fill="rgb(232 165 155)">1</text><text x="819" y="980"  fill="rgb(228 214 205)">]</text><text x="822" y="980"  fill="rgb(246 255 255)">;</text><text x="825" y="980"  fill="rgb(249 255 255)"> </text><text x="828" y="980"  fill="rgb(250 255 255)">le</text><text x="834" y="980"  fill="rgb(251 255 255)">t </text><text x="840" y="980"  fill="rgb(247 255 255)">n</text><text x="843" y="980"  fill="rgb(247 254 254)">u</text><text x="846" y="980"  fill="rgb(246 248 248)">m</text><text x="849" y="980"  fill="rgb(245 245 245)">: </text><text x="855" y="980"  fill="rgb(246 245 245)">an</text><text x="861" y="980"  fill="rgb(246 246 246)">y = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(</text><text x="0" y="985"  fill="rgb(246 246 246)">value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insigh</text><text x="699" y="985"  fill="rgb(245 245 245)">tDa</text><text x="708" y="985"  fill="rgb(246 247 247)">ta</text><text x="714" y="985"  fill="rgb(246 248 248)">s</text><text x="717" y="985"  fill="rgb(250 255 255)">et</text><text x="723" y="985"  fill="rgb(249 255 255)"> </text><text x="726" y="985"  fill="rgb(250 255 255)">o</text><text x="729" y="985"  fill="rgb(248 255 255)">f</text><text x="732" y="985"  fill="rgb(246 255 255)"> </text><text x="735" y="985"  fill="rgb(247 255 255)">t</text><text x="738" y="985"  fill="rgb(246 255 255)">h</text><text x="741" y="985"  fill="rgb(247 255 255)">i</text><text x="744" y="985"  fill="rgb(246 255 255)">s</text><text x="747" y="985"  fill="rgb(239 244 243)">.</text><text x="750" y="985"  fill="rgb(232 222 223)">a</text><text x="753" y="985"  fill="rgb(233 208 207)">l</text><text x="756" y="985"  fill="rgb(235 205 204)">l</text><text x="759" y="985"  fill="rgb(236 199 200)">I</text><text x="762" y="985"  fill="rgb(239 197 199)">n</text><text x="765" y="985"  fill="rgb(239 197 198)">s</text><text x="768" y="985"  fill="rgb(238 196 197)">i</text><text x="771" y="985"  fill="rgb(239 196 198)">g</text><text x="774" y="985"  fill="rgb(238 197 199)">h</text><text x="777" y="985"  fill="rgb(236 199 199)">t</text><text x="780" y="985"  fill="rgb(237 201 200)">D</text><text x="783" y="985"  fill="rgb(234 205 202)">a</text><text x="786" y="985"  fill="rgb(233 216 215)">t</text><text x="789" y="985"  fill="rgb(235 235 232)">a</text><text x="792" y="985"  fill="rgb(244 255 255)">s</text><text x="795" y="985"  fill="rgb(247 255 255)">e</text><text x="798" y="985"  fill="rgb(248 255 255)">t</text><text x="801" y="985"  fill="rgb(247 255 255)">) </text><text x="807" y="985"  fill="rgb(248 255 255)">{</text><text x="810" y="985"  fill="rgb(250 255 255)"> i</text><text x="816" y="985"  fill="rgb(249 255 255)">f</text><text x="819" y="985"  fill="rgb(250 255 255)"> </text><text x="822" y="985"  fill="rgb(247 250 250)">(</text><text x="825" y="985"  fill="rgb(246 247 247)">in</text><text x="831" y="985"  fill="rgb(246 246 246)">s</text><text x="834" y="985"  fill="rgb(245 245 245)">ig</text><text x="840" y="985"  fill="rgb(246 246 246)">htDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; th</text><text x="0" y="990"  fill="rgb(246 246 246)">is.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError</text><text x="708" y="990"  fill="rgb(246 245 245)">} f</text><text x="717" y="990"  fill="rgb(245 245 245)">rom </text><text x="729" y="990"  fill="rgb(246 247 247)">&quot;</text><text x="732" y="990"  fill="rgb(246 248 248)">.</text><text x="735" y="990"  fill="rgb(246 249 249)">/II</text><text x="744" y="990"  fill="rgb(246 250 251)">n</text><text x="747" y="990"  fill="rgb(248 255 255)">s</text><text x="750" y="990"  fill="rgb(249 255 255)">ight</text><text x="762" y="990"  fill="rgb(248 255 255)">Facad</text><text x="777" y="990"  fill="rgb(249 255 255)">e&quot;; e</text><text x="792" y="990"  fill="rgb(247 252 252)">x</text><text x="795" y="990"  fill="rgb(246 249 249)">port</text><text x="807" y="990"  fill="rgb(246 248 248)"> </text><text x="810" y="990"  fill="rgb(246 246 246)">d</text><text x="813" y="990"  fill="rgb(245 245 245)">efau</text><text x="825" y="990"  fill="rgb(246 245 245)">lt</text><text x="831" y="990"  fill="rgb(246 246 246)"> class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string</text><text x="0" y="995"  fill="rgb(246 246 246)">[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: </text><text x="747" y="995"  fill="rgb(246 245 245)">s</text><text x="750" y="995"  fill="rgb(245 245 245)">tring</text><text x="765" y="995"  fill="rgb(246 245 245)">[</text><text x="768" y="995"  fill="rgb(245 245 245)">] = [&quot;CO</text><text x="792" y="995"  fill="rgb(246 245 245)">U</text><text x="795" y="995"  fill="rgb(246 246 246)">NT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a t</text><text x="0" y="1000"  fill="rgb(246 246 246)">ransformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } </text><text x="0" y="1005"  fill="rgb(246 246 246)">this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and</text><text x="0" y="1010"  fill="rgb(246 246 246)"> should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void</text><text x="0" y="1015"  fill="rgb(246 246 246)"> { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray</text><text x="0" y="1020"  fill="rgb(246 246 246)">(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includ</text><text x="0" y="1025"  fill="rgb(246 246 246)">es(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (l</text><text x="0" y="1030"  fill="rgb(246 246 246)">et mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir</text><text x="0" y="1035"  fill="rgb(246 246 246)"> !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else</text><text x="0" y="1040"  fill="rgb(246 246 246)"> { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void</text><text x="0" y="1045"  fill="rgb(246 246 246)"> { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes</text><text x="0" y="1050"  fill="rgb(246 246 246)">(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw n</text><text x="0" y="1055"  fill="rgb(246 246 246)">ew InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemf</text><text x="0" y="1060"  fill="rgb(246 246 246)">ields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[]</text><text x="0" y="1065"  fill="rgb(246 246 246)"> = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated pr</text><text x="0" y="1070"  fill="rgb(246 246 246)">ivate transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTI</text><text x="0" y="1075"  fill="rgb(246 246 246)">ONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array</text><text x="0" y="1080"  fill="rgb(246 246 246)">.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(</text><text x="0" y="1085"  fill="rgb(246 246 246)">splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) </text><text x="0" y="1090"  fill="rgb(246 246 246)">{ throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.m</text><text x="0" y="1095"  fill="rgb(246 246 246)">fields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private valida</text><text x="0" y="1100"  fill="rgb(246 246 246)">teColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || </text><text x="0" y="1105"  fill="rgb(246 246 246)">Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilt</text><text x="0" y="1110"  fill="rgb(246 246 246)">er(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw ne</text><text x="0" y="1115"  fill="rgb(246 246 246)">w InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.sli</text><text x="0" y="1120"  fill="rgb(246 246 246)">ce(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;num</text><text x="0" y="1125"  fill="rgb(246 246 246)">ber&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); </text><text x="0" y="1130"  fill="rgb(246 246 246)">if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[</text><text x="0" y="1135"  fill="rgb(246 246 246)">] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id p</text><text x="0" y="1140"  fill="rgb(246 246 246)">rivate keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTI</text><text x="0" y="1145"  fill="rgb(246 246 246)">ONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.G</text><text x="0" y="1150"  fill="rgb(246 246 246)">ROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstri</text><text x="0" y="1155"  fill="rgb(246 246 246)">ng(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey</text><text x="0" y="1160"  fill="rgb(246 246 246)">.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); }</text><text x="0" y="1165"  fill="rgb(246 246 246)"> if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.vali</text><text x="0" y="1170"  fill="rgb(246 246 246)">dateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.key</text><text x="0" y="1175"  fill="rgb(246 246 246)">sInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else {</text><text x="0" y="1180"  fill="rgb(246 246 246)"> if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); }</text><text x="0" y="1185"  fill="rgb(246 246 246)"> } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(val</text><text x="0" y="1190"  fill="rgb(246 246 246)">ue)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfie</text><text x="0" y="1195"  fill="rgb(246 246 246)">ld: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allI</text><text x="0" y="1200"  fill="rgb(246 246 246)">nsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsight</text><text x="0" y="1205"  fill="rgb(246 246 246)">Facade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: strin</text><text x="0" y="1210"  fill="rgb(246 246 246)">g[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightData</text><text x="0" y="1215"  fill="rgb(246 246 246)">set = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined</text><text x="0" y="1220"  fill="rgb(246 246 246)">&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;);</text><text x="0" y="1225"  fill="rgb(246 246 246)"> if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey</text><text x="0" y="1230"  fill="rgb(246 246 246)">: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] </text><text x="0" y="1235"  fill="rgb(246 246 246)">= criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys)</text><text x="0" y="1240"  fill="rgb(246 246 246)"> { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isA</text><text x="0" y="1245"  fill="rgb(246 246 246)">rray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public va</text><text x="0" y="1250"  fill="rgb(246 246 246)">lidateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value);</text><text x="0" y="1255"  fill="rgb(246 246 246)"> break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idst</text><text x="0" y="1260"  fill="rgb(246 246 246)">ring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.lengt</text><text x="0" y="1265"  fill="rgb(246 246 246)">h !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: stri</text><text x="0" y="1270"  fill="rgb(246 246 246)">ng): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idI</text><text x="0" y="1275"  fill="rgb(246 246 246)">nQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private rea</text><text x="0" y="1280"  fill="rgb(246 246 246)">donly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.i</text><text x="0" y="1285"  fill="rgb(246 246 246)">dInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformatio</text><text x="0" y="1290"  fill="rgb(246 246 246)">ns(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } </text><text x="0" y="1295"  fill="rgb(246 246 246)">} private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(apply</text><text x="0" y="1300"  fill="rgb(246 246 246)">rule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;</text><text x="0" y="1305"  fill="rgb(246 246 246)">&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public v</text><text x="0" y="1310"  fill="rgb(246 246 246)">alidateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); }</text><text x="0" y="1315"  fill="rgb(246 246 246)"> this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) {</text><text x="0" y="1320"  fill="rgb(246 246 246)"> if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.v</text><text x="0" y="1325"  fill="rgb(246 246 246)">alidateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(valu</text><text x="0" y="1330"  fill="rgb(246 246 246)">e)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new I</text><text x="0" y="1335"  fill="rgb(246 246 246)">nsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of </text><text x="0" y="1340"  fill="rgb(246 246 246)">value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields; this.sfields = this.roomsfields; } return true; } } return false; } else { return th</text><text x="0" y="1345"  fill="rgb(246 246 246)">is.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: string[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;</text><text x="0" y="1350"  fill="rgb(246 246 246)">, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is a transformation private allInsightDataset: InsightDataset[]; private mfields: string</text><text x="0" y="1355"  fill="rgb(246 246 246)">[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); } } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations</text><text x="0" y="1360"  fill="rgb(246 246 246)">(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object, and should has at least one element } for (let key of q) { this.validateKey(key); thi</text><text x="0" y="1365"  fill="rgb(246 246 246)">s.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and</text><text x="0" y="1370"  fill="rgb(246 246 246)"> should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isArray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let </text><text x="0" y="1375"  fill="rgb(246 246 246)">applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(ke</text><text x="0" y="1380"  fill="rgb(246 246 246)">y[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } for (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformation</text><text x="0" y="1385"  fill="rgb(246 246 246)">Key.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isAr</text><text x="0" y="1390"  fill="rgb(246 246 246)">ray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; swit</text><text x="0" y="1395"  fill="rgb(246 246 246)">ch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(va</text><text x="0" y="1400"  fill="rgb(246 246 246)">lue).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.includes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): </text><text x="0" y="1405"  fill="rgb(246 246 246)">void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { throw new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isAr</text><text x="0" y="1410"  fill="rgb(246 246 246)">ray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.coursemfields; this.sfields = this.coursesfields; } else { this.mfields = this.roommfields</text><text x="0" y="1415"  fill="rgb(246 246 246)">; this.sfields = this.roomsfields; } return true; } } return false; } else { return this.idInQuery.includes(idstring); } } public getIdInQuery(): string[] { return this.idInQuery; } } import {InsightDataset, InsightDatasetKind, InsightError} from &quot;./IInsightFacade&quot;; export default class QueryValidator { private readonly coursemfields: string[] = [&quot;avg&quot;, &quot;pass&quot;, &quot;fail&quot;, &quot;audit&quot;, &quot;year&quot;]; private readonly coursesfields: string[] = [&quot;dept&quot;, &quot;id&quot;, &quot;instructor&quot;, &quot;title&quot;, &quot;uuid&quot;]; private readonly roommfields: st</text><text x="0" y="1420"  fill="rgb(246 246 246)">ring[] = [&quot;lat&quot;, &quot;lon&quot;, &quot;seats&quot;]; private readonly roomsfields: string[] = [&quot;fullname&quot;, &quot;shortname&quot;, &quot;number&quot; , &quot;name&quot;, &quot;address&quot;, &quot;type&quot;, &quot;furniture&quot;, &quot;href&quot;]; private readonly mtoken: string[] = [&quot;MAX&quot;, &quot;MIN&quot;, &quot;AVG&quot;, &quot;SUM&quot;]; private readonly mstoken: string[] = [&quot;COUNT&quot;]; private idInQuery: string[]; // make sure the query only has one id private keysInQuery: string[]; // all keys appeared in columns after being validated private transformationKey: string[]; // keys appeared in transformation, if there is</text><text x="0" y="1425"  fill="rgb(246 246 246)"> a transformation private allInsightDataset: InsightDataset[]; private mfields: string[]; private sfields: string[]; constructor(insightDatasets: InsightDataset[]) { this.idInQuery = []; this.keysInQuery = []; this.transformationKey = []; this.allInsightDataset = insightDatasets; } public validate(q: any): void { if (!q || !q.WHERE || !q.OPTIONS) { throw new InsightError(); } for (let key of Object.keys(q)) { if (key !== &quot;OPTIONS&quot; &amp;&amp; key !== &quot;WHERE&quot; &amp;&amp; key !== &quot;TRANSFORMATIONS&quot;) { throw new InsightError(); </text><text x="0" y="1430"  fill="rgb(246 246 246)">} } this.validateWhere(q.WHERE); if (q.TRANSFORMATIONS) { this.validateTransformations(q.TRANSFORMATIONS); } this.validateOptions(q.OPTIONS); } public validateTransformations(q: any): void { if (typeof q.GROUP === &quot;undefined&quot; || typeof q.APPLY === &quot;undefined&quot; || Object.keys(q).length !== 2) { throw new InsightError(); } this.validateGROUP(q.GROUP); this.validateAPPLY(q.APPLY); } private validateGROUP(q: any): void { if (!Array.isArray(q) || q.length &lt; 1) { throw new InsightError(); // q should be an object,</text><text x="0" y="1435"  fill="rgb(246 246 246)"> and should has at least one element } for (let key of q) { this.validateKey(key); this.transformationKey.push(key); // if the key is valid, push it to transformationKey } } private validateKey(key: string): void { let splittedKey: string[] = key.split(&quot;_&quot;); if (splittedKey.length !== 2) { throw new InsightError(); } if (!(this.validateIdstring(splittedKey[0]) &amp;&amp; (this.mfields.includes(splittedKey[1]) || this.sfields.includes(splittedKey[1])))) { throw new InsightError(); } } private validateAPPLY(q: any): </text><text x="0" y="1440"  fill="rgb(246 246 246)">void { if (!Array.isArray(q)) { throw new InsightError(); // q should be an array, and should have at least one element } for (let applyrule of q) { if (Array.isArray(applyrule) || Object.keys(applyrule).length &gt; 1) { throw new InsightError(); } let applykey: string = Object.keys(applyrule)[0]; let criteria = applyrule[applykey]; if (applykey.length === 0 || applykey.includes(&quot;_&quot;) || this.transformationKey.includes(applykey)) { throw new InsightError(); } this.transformationKey.push(applykey); if (Array.isA</text><text x="0" y="1445"  fill="rgb(246 246 246)">rray(criteria) || Object.keys(criteria).length &gt; 1) { throw new InsightError(); } let applytoken: string = Object.keys(criteria)[0]; if (!this.mtoken.includes(applytoken) &amp;&amp; !this.mstoken.includes(applytoken)) { throw new InsightError(); } let key: string[] = criteria[applytoken].split(&quot;_&quot;); if (key.length !== 2) { throw new InsightError(); } if (this.mtoken.includes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; this.mfields.includes(key[1]))) { throw new InsightError(); } } else if (this.mstoken.in</text><text x="0" y="1450"  fill="rgb(246 246 246)">cludes(applytoken)) { if (!(this.validateIdstring(key[0]) &amp;&amp; (this.sfields.includes(key[1]) || this.mfields.includes(key[1])))) { throw new InsightError(); } } } } public validateOptions(q: any): void { let keys: any[] = Object.keys(q); for (let key of keys) { if (key !== &quot;COLUMNS&quot; &amp;&amp; key !== &quot;ORDER&quot;) { throw new InsightError(); } } this.validateColumns(q.COLUMNS); if (q.ORDER) { this.validateOrder(q.ORDER); } } private validateColumns(q: any): void { if (!q || q.length &lt; 1) { throw new InsightError(); } fo</text><text x="0" y="1455"  fill="rgb(246 246 246)">r (let mskey of q) { if (this.transformationKey.length &gt; 0) { if (!this.transformationKey.includes(mskey)) { throw new InsightError(); } } else { this.validateKey(mskey); } this.keysInQuery.push(mskey); } } private validateOrder(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else if (typeof q === &quot;string&quot;) { if (!this.keysInQuery.includes(q)) { throw new InsightError(); } } else { if (!q.dir || !q.keys || Object.keys(q).length !== 2) { throw new InsightError(); } if (q.dir !== &quot;UP&quot; &amp;&amp; q</text><text x="0" y="1460"  fill="rgb(246 246 246)">.dir !== &quot;DOWN&quot;) { throw new InsightError(); } let keys: any = q.keys; if (!Array.isArray(keys) || keys.length &lt; 1) { throw new InsightError(); } for (let anykey of keys) { if (!this.keysInQuery.includes(anykey)) { throw new InsightError(); } } } } public validateWhere(q: any): void { if (Array.isArray(q)) { throw new InsightError(); } else { if (Object.keys(q).length !== 0) { this.validateFilter(q); } } } private validateFilter(q: any): void { if (Object.keys(q).length !== 1) { throw new InsightError(); } </text><text x="0" y="1465"  fill="rgb(246 246 246)">else { let key: string = Object.keys(q)[0]; let value: any = Object.values(q)[0]; switch (key) { case &quot;AND&quot;: case &quot;OR&quot;: this.validateANDOR(value); break; case &quot;NOT&quot;: this.validateNOT(value); break; case &quot;GT&quot;: case &quot;LT&quot;: case &quot;EQ&quot;: this.validateGTLTEQ(value); break; case &quot;IS&quot;: this.validateIS(value); break; default: throw new InsightError(); } } } private validateNOT(value: any): void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } this.validateFilter(value); } private validateIS(value: any): </text><text x="0" y="1470"  fill="rgb(246 246 246)">void { if (typeof value !== &quot;object&quot;) { throw new InsightError(); } if (Object.keys(value).length !== 1) { throw new InsightError(); } let skey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (skey.length !== 2) { throw new InsightError(); } else { let idstring: string = skey[0]; let sfield: string = skey[1]; let str: any = Object.values(value)[0]; if (typeof str !== &quot;string&quot;) { throw new InsightError(); } else { if ((str.slice(1, -1).includes(&quot;*&quot;)) || !this.validateIdstring(idstring) || !this.sfields.incl</text><text x="0" y="1475"  fill="rgb(246 246 246)">udes(sfield)) { throw new InsightError(); } } } } private validateGTLTEQ(value: any): void { if (typeof value !== &quot;object&quot; || Object.keys(value).length !== 1) { throw new InsightError(); } let mkey: string[] = Object.keys(value)[0].split(&quot;_&quot;); if (mkey.length !== 2) { throw new InsightError(); } else { let idstring: string = mkey[0]; let mfield: string = mkey[1]; let num: any = Object.values(value)[0]; if ((typeof num !== &quot;number&quot;) || !this.validateIdstring(idstring) || !this.mfields.includes(mfield)) { thr</text><text x="0" y="1480"  fill="rgb(246 246 246)">ow new InsightError(); } } } private validateANDOR(value: any): void { if (!Array.isArray(value) || value.length &lt; 1) { throw new InsightError(); } for (let innerObject of value) { this.validateFilter(innerObject); } } private validateIdstring(idstring: string): boolean { if (this.idInQuery.length === 0) { for (let insightDataset of this.allInsightDataset) { if (insightDataset.id === idstring) { this.idInQuery.push(idstring); if (insightDataset.kind === InsightDatasetKind.Courses) { this.mfields = this.cour</text></svg>